
projekt_mikroprocesory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004604  08004604  0000625c  2**0
                  CONTENTS
  4 .ARM          00000008  08004604  08004604  00005604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800460c  0800460c  0000625c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  08004614  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  2000025c  08004870  0000625c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08004870  00006a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000625c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0ba  00000000  00000000  0000628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee4  00000000  00000000  00010346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  00012230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  00012a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cfd  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c365  00000000  00000000  00034de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9863  00000000  00000000  0004114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a9af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  0010a9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000025c 	.word	0x2000025c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042f0 	.word	0x080042f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000260 	.word	0x20000260
 800020c:	080042f0 	.word	0x080042f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <byteStuffing>:
// stablicowane wartości CRC16
// znajduje się w niej preobliczone wartości
// obliczone dla każdego możliwego bajtu od 0x00 do 0xFF

// formatowanie ramki do wysyłki jako ciąg znaków
size_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 80005b0:	b480      	push	{r7}
 80005b2:	b087      	sub	sp, #28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
    size_t j = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
    output[0] = '~';
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	227e      	movs	r2, #126	@ 0x7e
 80005c4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 1; i < input_len; i++) {
 80005c6:	2301      	movs	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	e04b      	b.n	8000664 <byteStuffing+0xb4>
        if (input[i] == ESCAPE_CHAR) {
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b7d      	cmp	r3, #125	@ 0x7d
 80005d6:	d10e      	bne.n	80005f6 <byteStuffing+0x46>
            output[j++] = ESCAPE_CHAR;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	617a      	str	r2, [r7, #20]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	227d      	movs	r2, #125	@ 0x7d
 80005e4:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	617a      	str	r2, [r7, #20]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	225d      	movs	r2, #93	@ 0x5d
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e033      	b.n	800065e <byteStuffing+0xae>
        } else if (input[i] == '~') {
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8000600:	d10e      	bne.n	8000620 <byteStuffing+0x70>
            output[j++] = ESCAPE_CHAR;
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	617a      	str	r2, [r7, #20]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	227d      	movs	r2, #125	@ 0x7d
 800060e:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	617a      	str	r2, [r7, #20]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	225e      	movs	r2, #94	@ 0x5e
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e01e      	b.n	800065e <byteStuffing+0xae>
        } else if (input[i] == '`') {
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b60      	cmp	r3, #96	@ 0x60
 800062a:	d10e      	bne.n	800064a <byteStuffing+0x9a>
            output[j++] = ESCAPE_CHAR;
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	617a      	str	r2, [r7, #20]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	227d      	movs	r2, #125	@ 0x7d
 8000638:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	1c5a      	adds	r2, r3, #1
 800063e:	617a      	str	r2, [r7, #20]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	2226      	movs	r2, #38	@ 0x26
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e009      	b.n	800065e <byteStuffing+0xae>
        } else {
            output[j++] = input[i];
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	441a      	add	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	6179      	str	r1, [r7, #20]
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	440b      	add	r3, r1
 800065a:	7812      	ldrb	r2, [r2, #0]
 800065c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 1; i < input_len; i++) {
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	3301      	adds	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3af      	bcc.n	80005cc <byteStuffing+0x1c>
        }
    }
    output[j++] = '`';
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	617a      	str	r2, [r7, #20]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	2260      	movs	r2, #96	@ 0x60
 8000678:	701a      	strb	r2, [r3, #0]
    return j;
 800067a:	697b      	ldr	r3, [r7, #20]
}
 800067c:	4618      	mov	r0, r3
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	@ 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000698:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	e019      	b.n	80006d4 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 80006aa:	8bfb      	ldrh	r3, [r7, #30]
 80006ac:	0a1b      	lsrs	r3, r3, #8
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	4053      	eors	r3, r2
 80006b6:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 80006b8:	8bfb      	ldrh	r3, [r7, #30]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21a      	sxth	r2, r3
 80006be:	7dbb      	ldrb	r3, [r7, #22]
 80006c0:	490f      	ldr	r1, [pc, #60]	@ (8000700 <calculate_crc16+0x78>)
 80006c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4053      	eors	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	3301      	adds	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3e1      	bcc.n	80006a0 <calculate_crc16+0x18>
    }
    crc_out[0] = (char)((crc >> 8) & 0xFF); // bajt po lewej
 80006dc:	8bfb      	ldrh	r3, [r7, #30]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (char)(crc & 0xFF);        // bajt po prawej
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3301      	adds	r3, #1
 80006ec:	8bfa      	ldrh	r2, [r7, #30]
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	701a      	strb	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	3724      	adds	r7, #36	@ 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <checkFrame>:

// funkcja dekodująca ramkę i sprawdzająca jej poprawność
bool checkFrame(char *bx, Frame *frame, uint8_t len) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
	char ownCrc[2];
	char incCrc[2];
    	if(len >= MIN_DECODED_RAW_FRAME_LEN && len <= MAX_DECODED_RAW_FRAME_LEN) {
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b07      	cmp	r3, #7
 8000716:	d959      	bls.n	80007cc <checkFrame+0xc8>
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b40      	cmp	r3, #64	@ 0x40
 800071c:	d856      	bhi.n	80007cc <checkFrame+0xc8>
    		uint8_t k = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	76fb      	strb	r3, [r7, #27]
    		frame->sender_address = bx[k++];						// kopiujemy nadawce do struktury
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	76fa      	strb	r2, [r7, #27]
 8000728:	461a      	mov	r2, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	701a      	strb	r2, [r3, #0]
    		frame->receiver_address = bx[k++];						// kopiujemy odbiorce do struktury
 8000734:	7efb      	ldrb	r3, [r7, #27]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	76fa      	strb	r2, [r7, #27]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	705a      	strb	r2, [r3, #1]
    		memcpy(frame->command, &bx[k],COMMAND_LEN);				// kopiujemy komende do struktury
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	3302      	adds	r3, #2
 800074a:	7efa      	ldrb	r2, [r7, #27]
 800074c:	68f9      	ldr	r1, [r7, #12]
 800074e:	440a      	add	r2, r1
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	601a      	str	r2, [r3, #0]
    	    k += COMMAND_LEN;
 8000754:	7efb      	ldrb	r3, [r7, #27]
 8000756:	3304      	adds	r3, #4
 8000758:	76fb      	strb	r3, [r7, #27]
    	    uint8_t data_len = len - MIN_DECODED_RAW_FRAME_LEN;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	3b08      	subs	r3, #8
 800075e:	76bb      	strb	r3, [r7, #26]
    	    if(data_len != 0) {											// wyliczamy długość danych
 8000760:	7ebb      	ldrb	r3, [r7, #26]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d008      	beq.n	8000778 <checkFrame+0x74>
    		memcpy(frame->data, &bx[k],data_len);
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1d98      	adds	r0, r3, #6
 800076a:	7efb      	ldrb	r3, [r7, #27]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	7eba      	ldrb	r2, [r7, #26]
 8000772:	4619      	mov	r1, r3
 8000774:	f003 f970 	bl	8003a58 <memcpy>
    	    }
    		k += data_len;
 8000778:	7efa      	ldrb	r2, [r7, #27]
 800077a:	7ebb      	ldrb	r3, [r7, #26]
 800077c:	4413      	add	r3, r2
 800077e:	76fb      	strb	r3, [r7, #27]
    		memcpy(incCrc, &bx[k], 2);								// kopiujemy crc do tablicy
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	82bb      	strh	r3, [r7, #20]
    		calculate_crc16((uint8_t *)frame, k, ownCrc);
 800078c:	7efb      	ldrb	r3, [r7, #27]
 800078e:	f107 0218 	add.w	r2, r7, #24
 8000792:	4619      	mov	r1, r3
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f7ff ff77 	bl	8000688 <calculate_crc16>
    		for (int l = 0; l < 2; l++) {
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	e010      	b.n	80007c2 <checkFrame+0xbe>
    			if(ownCrc[l] != incCrc[l]) {
 80007a0:	f107 0218 	add.w	r2, r7, #24
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	4413      	add	r3, r2
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	f107 0114 	add.w	r1, r7, #20
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	440b      	add	r3, r1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d001      	beq.n	80007bc <checkFrame+0xb8>
    				return false;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e008      	b.n	80007ce <checkFrame+0xca>
    		for (int l = 0; l < 2; l++) {
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	3301      	adds	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	ddeb      	ble.n	80007a0 <checkFrame+0x9c>
    			}
    		}
    		return true; // crc zostalo pomyslnie porownanie
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <checkFrame+0xca>
    	}
    return false; // ramka niepoprawna
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <sendFrame>:

void sendFrame(char *command, char *data) {
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b0c5      	sub	sp, #276	@ 0x114
 80007dc:	af00      	add	r7, sp, #0
 80007de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007e6:	6018      	str	r0, [r3, #0]
 80007e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007f0:	6019      	str	r1, [r3, #0]
	char ownCrc[2];
	char bx_send[126] = "~SC";
 80007f2:	4b5e      	ldr	r3, [pc, #376]	@ (800096c <sendFrame+0x194>)
 80007f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80007f8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80007fc:	227a      	movs	r2, #122	@ 0x7a
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f8cf 	bl	80039a4 <memset>
	char stuffed_frame[126];
	uint8_t i , j, k;
	for(i = 0; i < COMMAND_LEN; i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800080c:	e015      	b.n	800083a <sendFrame+0x62>
		bx_send[3 + i] = command[i];
 800080e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000812:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000816:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	441a      	add	r2, r3
 800081e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000822:	3303      	adds	r3, #3
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800082a:	443b      	add	r3, r7
 800082c:	f803 2c88 	strb.w	r2, [r3, #-136]
	for(i = 0; i < COMMAND_LEN; i++) {
 8000830:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000834:	3301      	adds	r3, #1
 8000836:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800083a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800083e:	2b03      	cmp	r3, #3
 8000840:	d9e5      	bls.n	800080e <sendFrame+0x36>
	}
	for(j = 0; j < strlen(data); j++) {
 8000842:	2300      	movs	r3, #0
 8000844:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 8000848:	e018      	b.n	800087c <sendFrame+0xa4>
		bx_send[3 + i + j] = data[j];
 800084a:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800084e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000852:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	441a      	add	r2, r3
 800085a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800085e:	1cd9      	adds	r1, r3, #3
 8000860:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000864:	440b      	add	r3, r1
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800086c:	443b      	add	r3, r7
 800086e:	f803 2c88 	strb.w	r2, [r3, #-136]
	for(j = 0; j < strlen(data); j++) {
 8000872:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8000876:	3301      	adds	r3, #1
 8000878:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800087c:	f897 410e 	ldrb.w	r4, [r7, #270]	@ 0x10e
 8000880:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000884:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	429c      	cmp	r4, r3
 8000892:	d3da      	bcc.n	800084a <sendFrame+0x72>
	}
	uint8_t len = 3 + i + j;
 8000894:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8000898:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	3303      	adds	r3, #3
 80008a2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
	calculate_crc16((uint8_t *)bx_send, len, ownCrc);
 80008a6:	f897 110b 	ldrb.w	r1, [r7, #267]	@ 0x10b
 80008aa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80008ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fee8 	bl	8000688 <calculate_crc16>
	for(k = 0; k < 2; k++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80008be:	e015      	b.n	80008ec <sendFrame+0x114>
		bx_send[len + k] = ownCrc[k];
 80008c0:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80008c4:	f897 110b 	ldrb.w	r1, [r7, #267]	@ 0x10b
 80008c8:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80008cc:	440b      	add	r3, r1
 80008ce:	f502 7288 	add.w	r2, r2, #272	@ 0x110
 80008d2:	443a      	add	r2, r7
 80008d4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80008d8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80008dc:	443b      	add	r3, r7
 80008de:	f803 2c88 	strb.w	r2, [r3, #-136]
	for(k = 0; k < 2; k++) {
 80008e2:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80008e6:	3301      	adds	r3, #1
 80008e8:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80008ec:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d9e5      	bls.n	80008c0 <sendFrame+0xe8>
	}
	len = len + k;
 80008f4:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80008f8:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80008fc:	4413      	add	r3, r2
 80008fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
	 uint8_t stuffed_len = byteStuffing(bx_send, len, stuffed_frame);
 8000902:	f897 110b 	ldrb.w	r1, [r7, #267]	@ 0x10b
 8000906:	f107 0208 	add.w	r2, r7, #8
 800090a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fe4e 	bl	80005b0 <byteStuffing>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	 stuffed_frame[stuffed_len] = '`';
 800091a:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 800091e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000922:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000926:	2160      	movs	r1, #96	@ 0x60
 8000928:	54d1      	strb	r1, [r2, r3]
	 for(uint8_t i = 0; i < stuffed_len; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8000930:	e00f      	b.n	8000952 <sendFrame+0x17a>
		 USART_fsend("%c", stuffed_frame[i]);
 8000932:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8000936:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800093a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	4619      	mov	r1, r3
 8000942:	480b      	ldr	r0, [pc, #44]	@ (8000970 <sendFrame+0x198>)
 8000944:	f000 fa94 	bl	8000e70 <USART_fsend>
	 for(uint8_t i = 0; i < stuffed_len; i++) {
 8000948:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 800094c:	3301      	adds	r3, #1
 800094e:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8000952:	f897 210c 	ldrb.w	r2, [r7, #268]	@ 0x10c
 8000956:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 800095a:	429a      	cmp	r2, r3
 800095c:	d3e9      	bcc.n	8000932 <sendFrame+0x15a>
	 }
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0043537e 	.word	0x0043537e
 8000970:	08004308 	.word	0x08004308

08000974 <handleCommand>:

void handleCommand(Frame *frame, uint8_t len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b09a      	sub	sp, #104	@ 0x68
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
    uint8_t data_len = len - MIN_DECODED_RAW_FRAME_LEN;
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	3b08      	subs	r3, #8
 8000984:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	CommandEntry commandTable[11] = {
 8000988:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <handleCommand+0x78>)
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4611      	mov	r1, r2
 8000990:	2258      	movs	r2, #88	@ 0x58
 8000992:	4618      	mov	r0, r3
 8000994:	f003 f860 	bl	8003a58 <memcpy>
	    {"WINI", executeWINI}, // inicjalizuj WWDG
	    {"WREF", executeWREF}, // ustaw interwał odświeżania

	};

    for (int i = 0; i < 11; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	667b      	str	r3, [r7, #100]	@ 0x64
 800099c:	e01c      	b.n	80009d8 <handleCommand+0x64>
        if (strncmp(frame->command, commandTable[i].command, COMMAND_LEN) == 0) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1c98      	adds	r0, r3, #2
 80009a2:	f107 0208 	add.w	r2, r7, #8
 80009a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	4413      	add	r3, r2
 80009ac:	2204      	movs	r2, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	f003 f800 	bl	80039b4 <strncmp>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d10b      	bne.n	80009d2 <handleCommand+0x5e>
            commandTable[i].function(frame, data_len);  // Wywołaj przypisaną funkcję
 80009ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	3368      	adds	r3, #104	@ 0x68
 80009c0:	443b      	add	r3, r7
 80009c2:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80009c6:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80009ca:	4611      	mov	r1, r2
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4798      	blx	r3
 80009d0:	e008      	b.n	80009e4 <handleCommand+0x70>
    for (int i = 0; i < 11; i++) {
 80009d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009d4:	3301      	adds	r3, #1
 80009d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80009d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009da:	2b0a      	cmp	r3, #10
 80009dc:	dddf      	ble.n	800099e <handleCommand+0x2a>
            return;
        }
    }
    USART_fsend("Unknown command\r\n");
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <handleCommand+0x7c>)
 80009e0:	f000 fa46 	bl	8000e70 <USART_fsend>
}
 80009e4:	3768      	adds	r7, #104	@ 0x68
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08004320 	.word	0x08004320
 80009f0:	0800430c 	.word	0x0800430c

080009f4 <executeILSI>:

// KOMENDY DO IWDG

void executeILSI() {
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	RCC->CSR |= RCC_CSR_LSION;	// włączamy LSI
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <executeILSI+0x2c>)
 80009fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009fc:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <executeILSI+0x2c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6753      	str	r3, [r2, #116]	@ 0x74

	while(!(RCC->CSR & RCC_CSR_LSIRDY));	// czekamy na stabilizacje
 8000a04:	bf00      	nop
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <executeILSI+0x2c>)
 8000a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f9      	beq.n	8000a06 <executeILSI+0x12>
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <executeIPRE>:

void executeIPRE(Frame *frame, uint8_t len) {
 8000a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70fb      	strb	r3, [r7, #3]
 8000a32:	466b      	mov	r3, sp
 8000a34:	461e      	mov	r6, r3
	   if (len == 0 || len > MAX_DATA_LEN) {
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <executeIPRE+0x1e>
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b36      	cmp	r3, #54	@ 0x36
 8000a40:	d918      	bls.n	8000a74 <executeIPRE+0x50>
		   strncpy(frame->command, "FAIL", COMMAND_LEN);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3302      	adds	r3, #2
 8000a46:	4a48      	ldr	r2, [pc, #288]	@ (8000b68 <executeIPRE+0x144>)
 8000a48:	6810      	ldr	r0, [r2, #0]
 8000a4a:	6018      	str	r0, [r3, #0]
		   strncpy(frame->data, "zla wartosc preskaler", MAX_DATA_LEN);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3306      	adds	r3, #6
 8000a50:	2236      	movs	r2, #54	@ 0x36
 8000a52:	4946      	ldr	r1, [pc, #280]	@ (8000b6c <executeIPRE+0x148>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 ffbf 	bl	80039d8 <strncpy>
		   frame->data[21] = '\0';
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	76da      	strb	r2, [r3, #27]
	        sendFrame(frame->command,frame->data);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1c9a      	adds	r2, r3, #2
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3306      	adds	r3, #6
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	f7ff feb4 	bl	80007d8 <sendFrame>
	        //TODO: WYSŁAĆ RAMKE TYPU FAIL
	        return;
 8000a70:	46b5      	mov	sp, r6
 8000a72:	e075      	b.n	8000b60 <executeIPRE+0x13c>
	    }

	    // dodanie \0 zapobiega przetwarzaniu niepotrzebnych danych
	    char temp_data[len + 1];
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	1c59      	adds	r1, r3, #1
 8000a78:	1e4b      	subs	r3, r1, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	2300      	movs	r3, #0
 8000a80:	4690      	mov	r8, r2
 8000a82:	4699      	mov	r9, r3
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a98:	460a      	mov	r2, r1
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	4614      	mov	r4, r2
 8000a9e:	461d      	mov	r5, r3
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	00eb      	lsls	r3, r5, #3
 8000aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000aae:	00e2      	lsls	r2, r4, #3
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	3307      	adds	r3, #7
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	ebad 0d03 	sub.w	sp, sp, r3
 8000abc:	466b      	mov	r3, sp
 8000abe:	3300      	adds	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
	    memcpy(temp_data, frame->data, len); // kopiuj do tablicy
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3306      	adds	r3, #6
 8000ac6:	78fa      	ldrb	r2, [r7, #3]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6938      	ldr	r0, [r7, #16]
 8000acc:	f002 ffc4 	bl	8003a58 <memcpy>
	    temp_data[len] = '\0'; // na potrzeby funkcji atoi
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	54d1      	strb	r1, [r2, r3]

	    uint8_t prescaler = atoi(temp_data); // zamień na liczbę całkowitą
 8000ad8:	6938      	ldr	r0, [r7, #16]
 8000ada:	f002 febb 	bl	8003854 <atoi>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
	    if (prescaler == 4 || prescaler == 8 || prescaler == 16 || prescaler == 32 ||
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d00e      	beq.n	8000b06 <executeIPRE+0xe2>
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d00b      	beq.n	8000b06 <executeIPRE+0xe2>
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b10      	cmp	r3, #16
 8000af2:	d008      	beq.n	8000b06 <executeIPRE+0xe2>
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d005      	beq.n	8000b06 <executeIPRE+0xe2>
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b40      	cmp	r3, #64	@ 0x40
 8000afe:	d002      	beq.n	8000b06 <executeIPRE+0xe2>
	        prescaler == 64 || prescaler == 128 || prescaler == 256) {
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	2b80      	cmp	r3, #128	@ 0x80
 8000b04:	d128      	bne.n	8000b58 <executeIPRE+0x134>
	        IWDG->KR = 0x5555; // to odblokowuje konfiguracje KR
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <executeIPRE+0x14c>)
 8000b08:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000b0c:	601a      	str	r2, [r3, #0]
	        IWDG->PR = (prescaler == 4)   ? 0 :	// skrocone instrukcje if,
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d01a      	beq.n	8000b4a <executeIPRE+0x126>
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d015      	beq.n	8000b46 <executeIPRE+0x122>
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d010      	beq.n	8000b42 <executeIPRE+0x11e>
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b20      	cmp	r3, #32
 8000b24:	d00b      	beq.n	8000b3e <executeIPRE+0x11a>
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b40      	cmp	r3, #64	@ 0x40
 8000b2a:	d006      	beq.n	8000b3a <executeIPRE+0x116>
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b80      	cmp	r3, #128	@ 0x80
 8000b30:	d101      	bne.n	8000b36 <executeIPRE+0x112>
 8000b32:	2305      	movs	r3, #5
 8000b34:	e00a      	b.n	8000b4c <executeIPRE+0x128>
 8000b36:	2306      	movs	r3, #6
 8000b38:	e008      	b.n	8000b4c <executeIPRE+0x128>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	e006      	b.n	8000b4c <executeIPRE+0x128>
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e004      	b.n	8000b4c <executeIPRE+0x128>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e002      	b.n	8000b4c <executeIPRE+0x128>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <executeIPRE+0x128>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <executeIPRE+0x14c>)
 8000b4e:	6053      	str	r3, [r2, #4]
	                   (prescaler == 8)   ? 1 :
	                   (prescaler == 16)  ? 2 :
	                   (prescaler == 32)  ? 3 :
	                   (prescaler == 64)  ? 4 :
	                   (prescaler == 128) ? 5 : 6; // mapujemy wartości na to co trzeba przekazać do rejerstru
	        USART_fsend("GOOD\r\n");	//TODO wysłać ramke informującą, że udało się ustawić preskaler
 8000b50:	4808      	ldr	r0, [pc, #32]	@ (8000b74 <executeIPRE+0x150>)
 8000b52:	f000 f98d 	bl	8000e70 <USART_fsend>
 8000b56:	e002      	b.n	8000b5e <executeIPRE+0x13a>
	    } else {
	        USART_fsend("FAIL:zla_wartosc_preskaler\r\n");
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <executeIPRE+0x154>)
 8000b5a:	f000 f989 	bl	8000e70 <USART_fsend>
 8000b5e:	46b5      	mov	sp, r6
	    }
}
 8000b60:	371c      	adds	r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b68:	08004378 	.word	0x08004378
 8000b6c:	08004380 	.word	0x08004380
 8000b70:	40003000 	.word	0x40003000
 8000b74:	08004398 	.word	0x08004398
 8000b78:	080043a0 	.word	0x080043a0

08000b7c <executeIREL>:

void executeIREL(Frame *frame, uint8_t len) {
 8000b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b80:	b087      	sub	sp, #28
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
 8000b8a:	466b      	mov	r3, sp
 8000b8c:	461e      	mov	r6, r3
    if (len == 0 || len > MAX_DATA_LEN) {
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <executeIREL+0x1e>
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	2b36      	cmp	r3, #54	@ 0x36
 8000b98:	d904      	bls.n	8000ba4 <executeIREL+0x28>
        USART_fsend("FAIL:data_len\r\n");	//TODO KOMUNIKAT ZWROTNY
 8000b9a:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <executeIREL+0xc8>)
 8000b9c:	f000 f968 	bl	8000e70 <USART_fsend>
        return;
 8000ba0:	46b5      	mov	sp, r6
 8000ba2:	e04b      	b.n	8000c3c <executeIREL+0xc0>
    }

    // formatowanie tablicy na potrzebe funkcji atoi
    char temp_data[len + 1];
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	1c59      	adds	r1, r3, #1
 8000ba8:	1e4b      	subs	r3, r1, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	460a      	mov	r2, r1
 8000bae:	2300      	movs	r3, #0
 8000bb0:	4690      	mov	r8, r2
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bc8:	460a      	mov	r2, r1
 8000bca:	2300      	movs	r3, #0
 8000bcc:	4614      	mov	r4, r2
 8000bce:	461d      	mov	r5, r3
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	00eb      	lsls	r3, r5, #3
 8000bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bde:	00e2      	lsls	r2, r4, #3
 8000be0:	460b      	mov	r3, r1
 8000be2:	3307      	adds	r3, #7
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	ebad 0d03 	sub.w	sp, sp, r3
 8000bec:	466b      	mov	r3, sp
 8000bee:	3300      	adds	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
    memcpy(temp_data, frame->data, len);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3306      	adds	r3, #6
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	6938      	ldr	r0, [r7, #16]
 8000bfc:	f002 ff2c 	bl	8003a58 <memcpy>
    temp_data[len] = '\0';
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	2100      	movs	r1, #0
 8000c06:	54d1      	strb	r1, [r2, r3]

    uint16_t reload = (uint16_t)atoi(temp_data);
 8000c08:	6938      	ldr	r0, [r7, #16]
 8000c0a:	f002 fe23 	bl	8003854 <atoi>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	81fb      	strh	r3, [r7, #14]
    if (reload >= 0 && reload <= 4095) {
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c18:	d20c      	bcs.n	8000c34 <executeIREL+0xb8>
        IWDG->KR = 0x5555; // Oblokuj IWDG
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <executeIREL+0xcc>)
 8000c1c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000c20:	601a      	str	r2, [r3, #0]
        IWDG->RLR = reload; // Ustaw wartosc reload
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <executeIREL+0xcc>)
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	6093      	str	r3, [r2, #8]
        USART_fsend("GOOD:%d\r\n", reload);	//TODO KOMUNIKAT ZWROTNY
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <executeIREL+0xd0>)
 8000c2e:	f000 f91f 	bl	8000e70 <USART_fsend>
 8000c32:	e002      	b.n	8000c3a <executeIREL+0xbe>
    } else {
        USART_fsend("FAIL:\r\n");	//TODO KOMUNIKAT ZWROTNY
 8000c34:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <executeIREL+0xd4>)
 8000c36:	f000 f91b 	bl	8000e70 <USART_fsend>
 8000c3a:	46b5      	mov	sp, r6
    }
}
 8000c3c:	371c      	adds	r7, #28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c44:	080043c0 	.word	0x080043c0
 8000c48:	40003000 	.word	0x40003000
 8000c4c:	080043d0 	.word	0x080043d0
 8000c50:	080043dc 	.word	0x080043dc

08000c54 <executeIREF>:

void executeIREF(Frame *frame, uint8_t len) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for setting the refresh interval
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <executeIINI>:

void executeIINI(Frame *frame, uint8_t len) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for initializing IWDG
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <executeIGET>:

void executeIGET(Frame *frame, uint8_t len) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for getting the current IWDG configuration
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <executeWPRE>:

// KOMENDY DO WWDG
void executeWPRE(Frame *frame, uint8_t len) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for setting the prescaler
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <executeWREL>:

void executeWREL(Frame *frame, uint8_t len) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for setting the reload
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <executeWWIN>:

void executeWWIN(Frame *frame, uint8_t len) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for setting the window value
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <executeWEWI>:

void executeWEWI(Frame *frame, uint8_t len) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for enabling/disabling EWI interrupt
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <executeWINI>:

void executeWINI(Frame *frame, uint8_t len) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
    // TODO: Implement the functionality for initializing WWDG
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a2c      	ldr	r2, [pc, #176]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a25      	ldr	r2, [pc, #148]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a17      	ldr	r2, [pc, #92]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	4812      	ldr	r0, [pc, #72]	@ (8000de8 <MX_GPIO_Init+0xd4>)
 8000da0:	f000 ffb6 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000daa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	@ (8000dec <MX_GPIO_Init+0xd8>)
 8000dbc:	f000 fe14 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <MX_GPIO_Init+0xd4>)
 8000dd8:	f000 fe06 	bl	80019e8 <HAL_GPIO_Init>

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020800 	.word	0x40020800

08000df0 <USART_kbhit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// sprawdź czy bufor nie jest pusty
uint8_t USART_kbhit() {
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
    return (USART_RX_Empty != USART_RX_Busy);
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <USART_kbhit+0x20>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <USART_kbhit+0x24>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	200008e8 	.word	0x200008e8
 8000e14:	200008ec 	.word	0x200008ec

08000e18 <USART_getchar>:

// pobierz pojedyńczy znak z bufora odbiorczego jeśli dostępne są nowe dane
int16_t USART_getchar() {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
    if (USART_RX_Empty != USART_RX_Busy) {
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <USART_getchar+0x4c>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <USART_getchar+0x50>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d013      	beq.n	8000e52 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[USART_RX_Busy];	// pobranie znaku z bufora
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <USART_getchar+0x50>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <USART_getchar+0x54>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	80fb      	strh	r3, [r7, #6]
        USART_RX_Busy++;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <USART_getchar+0x50>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <USART_getchar+0x50>)
 8000e3c:	6013      	str	r3, [r2, #0]
        if (USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy = 0;	// "cykl" bufora
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <USART_getchar+0x50>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e44:	dd02      	ble.n	8000e4c <USART_getchar+0x34>
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <USART_getchar+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
        return tmp;
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	e001      	b.n	8000e56 <USART_getchar+0x3e>
    } else {
        return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200008e8 	.word	0x200008e8
 8000e68:	200008ec 	.word	0x200008ec
 8000e6c:	20000860 	.word	0x20000860

08000e70 <USART_fsend>:
    }
    return 0;
}

// wysyła sformatowane dane za pomocą UART z użyciem bufora nadawczego
void USART_fsend(char* format,...){
 8000e70:	b40f      	push	{r0, r1, r2, r3}
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b0a4      	sub	sp, #144	@ 0x90
 8000e76:	af00      	add	r7, sp, #0
	char tmp_rs[128];
	int i;
	__IO int idx;
	va_list arglist;
	va_start(arglist,format);
 8000e78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7c:	607b      	str	r3, [r7, #4]
	vsprintf(tmp_rs,format,arglist);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 fd81 	bl	8003990 <vsiprintf>
	va_end(arglist);
	idx=USART_TX_Empty;
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f4c <USART_fsend+0xdc>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	60bb      	str	r3, [r7, #8]
	for(i=0;i<strlen(tmp_rs);i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000e9a:	e016      	b.n	8000eca <USART_fsend+0x5a>
		USART_TxBuf[idx]=tmp_rs[i];
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000ea6:	440a      	add	r2, r1
 8000ea8:	7811      	ldrb	r1, [r2, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <USART_fsend+0xe0>)
 8000eac:	54d1      	strb	r1, [r2, r3]
		idx++;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
		if(idx >= USART_TXBUF_LEN)idx=0;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8000eba:	db01      	blt.n	8000ec0 <USART_fsend+0x50>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
	for(i=0;i<strlen(tmp_rs);i++){
 8000ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f99e 	bl	8000210 <strlen>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d8de      	bhi.n	8000e9c <USART_fsend+0x2c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ede:	b672      	cpsid	i
}
 8000ee0:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <USART_fsend+0xdc>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <USART_fsend+0xe4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d122      	bne.n	8000f34 <USART_fsend+0xc4>
 8000eee:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <USART_fsend+0xe8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef8:	2b80      	cmp	r3, #128	@ 0x80
 8000efa:	d11b      	bne.n	8000f34 <USART_fsend+0xc4>
		USART_TX_Empty=idx;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <USART_fsend+0xdc>)
 8000f00:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <USART_fsend+0xe4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <USART_fsend+0xe0>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	70fb      	strb	r3, [r7, #3]
		USART_TX_Busy++;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <USART_fsend+0xe4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <USART_fsend+0xe4>)
 8000f14:	6013      	str	r3, [r2, #0]
		if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <USART_fsend+0xe4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8000f1e:	db02      	blt.n	8000f26 <USART_fsend+0xb6>
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <USART_fsend+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000f26:	1cfb      	adds	r3, r7, #3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <USART_fsend+0xe8>)
 8000f2e:	f001 fd41 	bl	80029b4 <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){//sprawdzic dodatkowo zajetosc bufora nadajnika
 8000f32:	e002      	b.n	8000f3a <USART_fsend+0xca>
	}else{
		USART_TX_Empty=idx;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <USART_fsend+0xdc>)
 8000f38:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f3a:	b662      	cpsie	i
}
 8000f3c:	bf00      	nop
	}
	__enable_irq();
}//fsend
 8000f3e:	bf00      	nop
 8000f40:	3790      	adds	r7, #144	@ 0x90
 8000f42:	46bd      	mov	sp, r7
 8000f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f48:	b004      	add	sp, #16
 8000f4a:	4770      	bx	lr
 8000f4c:	200008e0 	.word	0x200008e0
 8000f50:	20000278 	.word	0x20000278
 8000f54:	200008e4 	.word	0x200008e4
 8000f58:	200008f4 	.word	0x200008f4

08000f5c <HAL_UART_TxCpltCallback>:

// funkcja typu callback wywoływana po zakończeniu transmisji
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <HAL_UART_TxCpltCallback+0x58>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d11e      	bne.n	8000faa <HAL_UART_TxCpltCallback+0x4e>
        if (USART_TX_Empty != USART_TX_Busy) {
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_UART_TxCpltCallback+0x5c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d018      	beq.n	8000faa <HAL_UART_TxCpltCallback+0x4e>
            uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <HAL_UART_TxCpltCallback+0x64>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	73fb      	strb	r3, [r7, #15]
            USART_TX_Busy++;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f8a:	6013      	str	r3, [r2, #0]
            if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8000f94:	db02      	blt.n	8000f9c <HAL_UART_TxCpltCallback+0x40>
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_UART_TxCpltCallback+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8000f9c:	f107 030f 	add.w	r3, r7, #15
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <HAL_UART_TxCpltCallback+0x58>)
 8000fa6:	f001 fd05 	bl	80029b4 <HAL_UART_Transmit_IT>
        }
    }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200008f4 	.word	0x200008f4
 8000fb8:	200008e0 	.word	0x200008e0
 8000fbc:	200008e4 	.word	0x200008e4
 8000fc0:	20000278 	.word	0x20000278

08000fc4 <HAL_UART_RxCpltCallback>:

// funkcja typu callback wywoływana po zakończeniu odbioru
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <HAL_UART_RxCpltCallback+0x44>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d114      	bne.n	8000ffe <HAL_UART_RxCpltCallback+0x3a>
        USART_RX_Empty++;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_UART_RxCpltCallback+0x48>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <HAL_UART_RxCpltCallback+0x48>)
 8000fdc:	6013      	str	r3, [r2, #0]
        if (USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty = 0;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_UART_RxCpltCallback+0x48>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fe4:	dd02      	ble.n	8000fec <HAL_UART_RxCpltCallback+0x28>
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_UART_RxCpltCallback+0x48>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_UART_RxCpltCallback+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_UART_RxCpltCallback+0x4c>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <HAL_UART_RxCpltCallback+0x44>)
 8000ffa:	f001 fd11 	bl	8002a20 <HAL_UART_Receive_IT>
    }
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200008f4 	.word	0x200008f4
 800100c:	200008e8 	.word	0x200008e8
 8001010:	20000860 	.word	0x20000860

08001014 <reset_frame_state.0>:
uint8_t bx_index = 0;
bool in_frame = false;
char received_char;
Frame ramka;

void reset_frame_state() {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4663      	mov	r3, ip
 800101c:	f8c7 c004 	str.w	ip, [r7, #4]
	in_frame = false;
 8001020:	2200      	movs	r2, #0
 8001022:	709a      	strb	r2, [r3, #2]
	escape_detected = false;
 8001024:	2200      	movs	r2, #0
 8001026:	705a      	strb	r2, [r3, #1]
	bx_index = 0;
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <main>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0b2      	sub	sp, #200	@ 0xc8
 800103c:	af00      	add	r7, sp, #0
int main(void)
 800103e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001042:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  HAL_Init();
 8001046:	f000 fab9 	bl	80015bc <HAL_Init>
  SystemClock_Config();
 800104a:	f000 f8f3 	bl	8001234 <SystemClock_Config>
  MX_GPIO_Init();
 800104e:	f7ff fe61 	bl	8000d14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001052:	f000 fa0f 	bl	8001474 <MX_USART2_UART_Init>
HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001056:	2201      	movs	r2, #1
 8001058:	496d      	ldr	r1, [pc, #436]	@ (8001210 <main+0x1d8>)
 800105a:	486e      	ldr	r0, [pc, #440]	@ (8001214 <main+0x1dc>)
 800105c:	f001 fce0 	bl	8002a20 <HAL_UART_Receive_IT>
bool escape_detected = false;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
uint8_t bx_index = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
bool in_frame = false;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
    if (USART_kbhit()) {                // Sprawdzamy, czy jest dostępny nowy znak
 8001072:	f7ff febd 	bl	8000df0 <USART_kbhit>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0fa      	beq.n	8001072 <main+0x3a>
        received_char = USART_getchar();   // Pobieramy znak z bufora odbiorczego
 800107c:	f7ff fecc 	bl	8000e18 <USART_getchar>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

        if (received_char == '~') {    // Rozpoczęcie nowej ramki
 8001086:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800108a:	2b7e      	cmp	r3, #126	@ 0x7e
 800108c:	d119      	bne.n	80010c2 <main+0x8a>
            if (!in_frame) {
 800108e:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001092:	f083 0301 	eor.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <main+0x7e>
                USART_fsend("ZNALAZLEM POCZATEK RAMKI\r\n");
 800109c:	485e      	ldr	r0, [pc, #376]	@ (8001218 <main+0x1e0>)
 800109e:	f7ff fee7 	bl	8000e70 <USART_fsend>
                in_frame = true;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
                bx_index = 0;           // Resetujemy indeks bufora
 80010a8:	2300      	movs	r3, #0
 80010aa:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
                escape_detected = false; // Resetujemy flagę escape
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 80010b4:	e7dd      	b.n	8001072 <main+0x3a>
            } else {
                reset_frame_state();
 80010b6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80010ba:	469c      	mov	ip, r3
 80010bc:	f7ff ffaa 	bl	8001014 <reset_frame_state.0>
 80010c0:	e7d7      	b.n	8001072 <main+0x3a>
            }
        } else if (received_char == '`') {    // Koniec ramki
 80010c2:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80010c6:	2b60      	cmp	r3, #96	@ 0x60
 80010c8:	d13e      	bne.n	8001148 <main+0x110>
            if (in_frame) {
 80010ca:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d031      	beq.n	8001136 <main+0xfe>
                USART_fsend("KONIEC ODBIORU, SPRAWDZAMY RAMKE\r\n");
 80010d2:	4852      	ldr	r0, [pc, #328]	@ (800121c <main+0x1e4>)
 80010d4:	f7ff fecc 	bl	8000e70 <USART_fsend>
                // Przetwarzanie odebranej ramki (np. wywołanie funkcji lub ustawienie flagi)
                if (bx[1] == 'S') {	// sprawdzamy adres odbiorcy, jesli nim jestesmy, procesujemy ramke
 80010d8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80010dc:	2b53      	cmp	r3, #83	@ 0x53
 80010de:	d11f      	bne.n	8001120 <main+0xe8>
                if (checkFrame(bx,&ramka, bx_index)) {
 80010e0:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 80010e4:	4639      	mov	r1, r7
 80010e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb0a 	bl	8000704 <checkFrame>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <main+0xe0>
                	handleCommand(&ramka, bx_index);
 80010f6:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 80010fa:	463b      	mov	r3, r7
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fc38 	bl	8000974 <handleCommand>
                    USART_fsend("SUKCES!\r\n");
 8001104:	4846      	ldr	r0, [pc, #280]	@ (8001220 <main+0x1e8>)
 8001106:	f7ff feb3 	bl	8000e70 <USART_fsend>
                    USART_fsend("%d", bx_index);
 800110a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800110e:	4619      	mov	r1, r3
 8001110:	4844      	ldr	r0, [pc, #272]	@ (8001224 <main+0x1ec>)
 8001112:	f7ff fead 	bl	8000e70 <USART_fsend>
 8001116:	e008      	b.n	800112a <main+0xf2>
                } else {
                    USART_fsend("BLAD: Dekodowanie ramki nie powiodło się\r\n");
 8001118:	4843      	ldr	r0, [pc, #268]	@ (8001228 <main+0x1f0>)
 800111a:	f7ff fea9 	bl	8000e70 <USART_fsend>
 800111e:	e004      	b.n	800112a <main+0xf2>
                }
                } else {
                	reset_frame_state();
 8001120:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001124:	469c      	mov	ip, r3
 8001126:	f7ff ff75 	bl	8001014 <reset_frame_state.0>
                }

                // Resetujemy stany po przetworzeniu ramki
                reset_frame_state();
 800112a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800112e:	469c      	mov	ip, r3
 8001130:	f7ff ff70 	bl	8001014 <reset_frame_state.0>
 8001134:	e79d      	b.n	8001072 <main+0x3a>
            } else {
                // Jeśli ramka się kończy, ale nie została rozpoczęta
                USART_fsend("BLAD: Zakończenie ramki bez rozpoczęcia\r\n");
 8001136:	483d      	ldr	r0, [pc, #244]	@ (800122c <main+0x1f4>)
 8001138:	f7ff fe9a 	bl	8000e70 <USART_fsend>
                reset_frame_state();
 800113c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001140:	469c      	mov	ip, r3
 8001142:	f7ff ff67 	bl	8001014 <reset_frame_state.0>
 8001146:	e794      	b.n	8001072 <main+0x3a>
            }
        } else if (in_frame) {
 8001148:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 800114c:	2b00      	cmp	r3, #0
 800114e:	d090      	beq.n	8001072 <main+0x3a>
            // Jesteśmy w ramce i przetwarzamy znaki
            if (escape_detected) {
 8001150:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03b      	beq.n	80011d0 <main+0x198>
                // Jeśli wykryto escape char, sprawdzamy następny znak
                if (received_char == '^') {
 8001158:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800115c:	2b5e      	cmp	r3, #94	@ 0x5e
 800115e:	d10b      	bne.n	8001178 <main+0x140>
                    bx[bx_index++] = '~'; // '~' było zakodowane jako '}^'
 8001160:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f887 20bc 	strb.w	r2, [r7, #188]	@ 0xbc
 800116c:	33c8      	adds	r3, #200	@ 0xc8
 800116e:	443b      	add	r3, r7
 8001170:	227e      	movs	r2, #126	@ 0x7e
 8001172:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8001176:	e027      	b.n	80011c8 <main+0x190>
                } else if (received_char == ']') {
 8001178:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800117c:	2b5d      	cmp	r3, #93	@ 0x5d
 800117e:	d10b      	bne.n	8001198 <main+0x160>
                    bx[bx_index++] = '}'; // '}' było zakodowane jako '}]'
 8001180:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	f887 20bc 	strb.w	r2, [r7, #188]	@ 0xbc
 800118c:	33c8      	adds	r3, #200	@ 0xc8
 800118e:	443b      	add	r3, r7
 8001190:	227d      	movs	r2, #125	@ 0x7d
 8001192:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8001196:	e017      	b.n	80011c8 <main+0x190>
                } else if (received_char == '&') {
 8001198:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800119c:	2b26      	cmp	r3, #38	@ 0x26
 800119e:	d10b      	bne.n	80011b8 <main+0x180>
                    bx[bx_index++] = '`'; // '`' było zakodowane jako '}&'
 80011a0:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f887 20bc 	strb.w	r2, [r7, #188]	@ 0xbc
 80011ac:	33c8      	adds	r3, #200	@ 0xc8
 80011ae:	443b      	add	r3, r7
 80011b0:	2260      	movs	r2, #96	@ 0x60
 80011b2:	f803 2c8c 	strb.w	r2, [r3, #-140]
 80011b6:	e007      	b.n	80011c8 <main+0x190>
                } else {
                    // Nieprawidłowy znak po '}', resetujemy
                    USART_fsend("BLAD: Nieprawidlowy escape sequence\r\n");
 80011b8:	481d      	ldr	r0, [pc, #116]	@ (8001230 <main+0x1f8>)
 80011ba:	f7ff fe59 	bl	8000e70 <USART_fsend>
                    reset_frame_state();
 80011be:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80011c2:	469c      	mov	ip, r3
 80011c4:	f7ff ff26 	bl	8001014 <reset_frame_state.0>
                }
                escape_detected = false; // Resetujemy flagę escape
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 80011ce:	e750      	b.n	8001072 <main+0x3a>
            } else if (received_char == '}') {
 80011d0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80011d4:	2b7d      	cmp	r3, #125	@ 0x7d
 80011d6:	d103      	bne.n	80011e0 <main+0x1a8>
                escape_detected = true; // Wykryto znak escape, czekamy na następny
 80011d8:	2301      	movs	r3, #1
 80011da:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 80011de:	e748      	b.n	8001072 <main+0x3a>
            } else {
                // Normalny znak w ramce, zapisujemy do bx
                if (bx_index < sizeof(bx)) {
 80011e0:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0c      	blt.n	8001204 <main+0x1cc>
                    bx[bx_index++] = received_char;
 80011ea:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f887 20bc 	strb.w	r2, [r7, #188]	@ 0xbc
 80011f6:	33c8      	adds	r3, #200	@ 0xc8
 80011f8:	443b      	add	r3, r7
 80011fa:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80011fe:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8001202:	e736      	b.n	8001072 <main+0x3a>

                } else {
                    // kontrola przepełnienia
                    reset_frame_state();
 8001204:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001208:	469c      	mov	ip, r3
 800120a:	f7ff ff03 	bl	8001014 <reset_frame_state.0>
    if (USART_kbhit()) {                // Sprawdzamy, czy jest dostępny nowy znak
 800120e:	e730      	b.n	8001072 <main+0x3a>
 8001210:	20000860 	.word	0x20000860
 8001214:	200008f4 	.word	0x200008f4
 8001218:	080043e4 	.word	0x080043e4
 800121c:	08004400 	.word	0x08004400
 8001220:	08004424 	.word	0x08004424
 8001224:	08004430 	.word	0x08004430
 8001228:	08004434 	.word	0x08004434
 800122c:	08004464 	.word	0x08004464
 8001230:	08004490 	.word	0x08004490

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2234      	movs	r2, #52	@ 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fbae 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <SystemClock_Config+0xd8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <SystemClock_Config+0xd8>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <SystemClock_Config+0xd8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <SystemClock_Config+0xdc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001280:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <SystemClock_Config+0xdc>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <SystemClock_Config+0xdc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001294:	230a      	movs	r3, #10
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 f886 	bl	80023d8 <HAL_RCC_OscConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012d2:	f000 f81f 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	230f      	movs	r3, #15
 80012d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012da:	2302      	movs	r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd26 	bl	8001d44 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80012fe:	f000 f809 	bl	8001314 <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	@ 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <Error_Handler+0x8>

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135e:	2007      	movs	r0, #7
 8001360:	f000 fa6e 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f94b 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <USART2_IRQHandler+0x10>)
 80013d6:	f001 fb49 	bl	8002a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200008f4 	.word	0x200008f4

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f002 faf4 	bl	8003a00 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20020000 	.word	0x20020000
 8001444:	00000400 	.word	0x00000400
 8001448:	200008f0 	.word	0x200008f0
 800144c:	20000a88 	.word	0x20000a88

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f001 fa32 	bl	8002914 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f7ff ff2d 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200008f4 	.word	0x200008f4
 80014c4:	40004400 	.word	0x40004400

080014c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_UART_MspInit+0x94>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d133      	bne.n	8001552 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001560 <HAL_UART_MspInit+0x98>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x98>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_UART_MspInit+0x98>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_UART_MspInit+0x98>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_UART_MspInit+0x98>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001522:	230c      	movs	r3, #12
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2307      	movs	r3, #7
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <HAL_UART_MspInit+0x9c>)
 800153e:	f000 fa53 	bl	80019e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2026      	movs	r0, #38	@ 0x26
 8001548:	f000 f985 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800154c:	2026      	movs	r0, #38	@ 0x26
 800154e:	f000 f99e 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40004400 	.word	0x40004400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <Reset_Handler>:
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a0 <LoopFillZerobss+0xe>
 800156c:	f7ff ff70 	bl	8001450 <SystemInit>
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x16>)
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopFillZerobss+0x1a>)
 8001576:	2300      	movs	r3, #0
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:
 800157a:	58d4      	ldr	r4, [r2, r3]
 800157c:	50c4      	str	r4, [r0, r3]
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:
 8001580:	18c4      	adds	r4, r0, r3
 8001582:	428c      	cmp	r4, r1
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x1e>)
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x22>)
 800158a:	2300      	movs	r3, #0
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:
 8001592:	42a2      	cmp	r2, r4
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
 8001596:	f002 fa39 	bl	8003a0c <__libc_init_array>
 800159a:	f7ff fd4d 	bl	8001038 <main>
 800159e:	4770      	bx	lr
 80015a0:	20020000 	.word	0x20020000
 80015a4:	20000000 	.word	0x20000000
 80015a8:	2000025c 	.word	0x2000025c
 80015ac:	08004614 	.word	0x08004614
 80015b0:	2000025c 	.word	0x2000025c
 80015b4:	20000a88 	.word	0x20000a88

080015b8 <ADC_IRQHandler>:
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	@ (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f92b 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fe96 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f943 	bl	80018aa <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f90b 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	@ (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000200 	.word	0x20000200
 8001658:	20000208 	.word	0x20000208
 800165c:	20000204 	.word	0x20000204

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000208 	.word	0x20000208
 8001684:	2000093c 	.word	0x2000093c

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2000093c 	.word	0x2000093c

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	@ (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	@ (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	@ 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff feda 	bl	8001688 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d008      	beq.n	80018f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2280      	movs	r2, #128	@ 0x80
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e052      	b.n	800199a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0216 	bic.w	r2, r2, #22
 8001902:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001912:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <HAL_DMA_Abort+0x62>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0208 	bic.w	r2, r2, #8
 8001932:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	e013      	b.n	800196e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001946:	f7ff fe9f 	bl	8001688 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b05      	cmp	r3, #5
 8001952:	d90c      	bls.n	800196e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2220      	movs	r2, #32
 8001958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2203      	movs	r2, #3
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e015      	b.n	800199a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e4      	bne.n	8001946 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001980:	223f      	movs	r2, #63	@ 0x3f
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d004      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e00c      	b.n	80019da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2205      	movs	r2, #5
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	e165      	b.n	8001cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8154 	bne.w	8001cca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d005      	beq.n	8001a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d130      	bne.n	8001a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2203      	movs	r2, #3
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 0201 	and.w	r2, r3, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d017      	beq.n	8001ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d123      	bne.n	8001b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	69b9      	ldr	r1, [r7, #24]
 8001b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80ae 	beq.w	8001cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a5c      	ldr	r2, [pc, #368]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce8 <HAL_GPIO_Init+0x300>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <HAL_GPIO_Init+0x308>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <HAL_GPIO_Init+0x30c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x310>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_GPIO_Init+0x314>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d00 <HAL_GPIO_Init+0x318>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x20a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001d04 <HAL_GPIO_Init+0x31c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x206>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a49      	ldr	r2, [pc, #292]	@ (8001d08 <HAL_GPIO_Init+0x320>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x202>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x21c>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	@ (8001cec <HAL_GPIO_Init+0x304>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b3a      	ldr	r3, [pc, #232]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a26      	ldr	r2, [pc, #152]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c76:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc4:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <HAL_GPIO_Init+0x324>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f ae96 	bls.w	8001a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	@ 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40021400 	.word	0x40021400
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0cc      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d90c      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b65      	ldr	r3, [pc, #404]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b8      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001da2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db0:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dbc:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	494d      	ldr	r1, [pc, #308]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d044      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d119      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e07f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3f      	ldr	r3, [pc, #252]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3b      	ldr	r3, [pc, #236]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e067      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4934      	ldr	r1, [pc, #208]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff fc28 	bl	8001688 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff fc24 	bl	8001688 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e04f      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b25      	ldr	r3, [pc, #148]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d20c      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e032      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4916      	ldr	r1, [pc, #88]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eca:	f000 f855 	bl	8001f78 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	490a      	ldr	r1, [pc, #40]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fb88 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00
 8001f00:	40023800 	.word	0x40023800
 8001f04:	080044b8 	.word	0x080044b8
 8001f08:	20000200 	.word	0x20000200
 8001f0c:	20000204 	.word	0x20000204

08001f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000200 	.word	0x20000200

08001f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f2c:	f7ff fff0 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0a9b      	lsrs	r3, r3, #10
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	@ (8001f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	080044c8 	.word	0x080044c8

08001f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f54:	f7ff ffdc 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0b5b      	lsrs	r3, r3, #13
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4903      	ldr	r1, [pc, #12]	@ (8001f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	080044c8 	.word	0x080044c8

08001f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9e:	4bcb      	ldr	r3, [pc, #812]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	f200 8206 	bhi.w	80023b8 <HAL_RCC_GetSysClockFreq+0x440>
 8001fac:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fe9 	.word	0x08001fe9
 8001fb8:	080023b9 	.word	0x080023b9
 8001fbc:	080023b9 	.word	0x080023b9
 8001fc0:	080023b9 	.word	0x080023b9
 8001fc4:	08001ff1 	.word	0x08001ff1
 8001fc8:	080023b9 	.word	0x080023b9
 8001fcc:	080023b9 	.word	0x080023b9
 8001fd0:	080023b9 	.word	0x080023b9
 8001fd4:	08001ff9 	.word	0x08001ff9
 8001fd8:	080023b9 	.word	0x080023b9
 8001fdc:	080023b9 	.word	0x080023b9
 8001fe0:	080023b9 	.word	0x080023b9
 8001fe4:	080021e9 	.word	0x080021e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4bb9      	ldr	r3, [pc, #740]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fee:	e1e7      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4bb8      	ldr	r3, [pc, #736]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ff6:	e1e3      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff8:	4bb4      	ldr	r3, [pc, #720]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002004:	4bb1      	ldr	r3, [pc, #708]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d071      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4bae      	ldr	r3, [pc, #696]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	2200      	movs	r2, #0
 8002018:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800201c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002036:	4622      	mov	r2, r4
 8002038:	462b      	mov	r3, r5
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	0159      	lsls	r1, r3, #5
 8002044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002048:	0150      	lsls	r0, r2, #5
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4621      	mov	r1, r4
 8002050:	1a51      	subs	r1, r2, r1
 8002052:	6439      	str	r1, [r7, #64]	@ 0x40
 8002054:	4629      	mov	r1, r5
 8002056:	eb63 0301 	sbc.w	r3, r3, r1
 800205a:	647b      	str	r3, [r7, #68]	@ 0x44
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002068:	4649      	mov	r1, r9
 800206a:	018b      	lsls	r3, r1, #6
 800206c:	4641      	mov	r1, r8
 800206e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002072:	4641      	mov	r1, r8
 8002074:	018a      	lsls	r2, r1, #6
 8002076:	4641      	mov	r1, r8
 8002078:	1a51      	subs	r1, r2, r1
 800207a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800207c:	4649      	mov	r1, r9
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002090:	4649      	mov	r1, r9
 8002092:	00cb      	lsls	r3, r1, #3
 8002094:	4641      	mov	r1, r8
 8002096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800209a:	4641      	mov	r1, r8
 800209c:	00ca      	lsls	r2, r1, #3
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	4622      	mov	r2, r4
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020aa:	462b      	mov	r3, r5
 80020ac:	460a      	mov	r2, r1
 80020ae:	eb42 0303 	adc.w	r3, r2, r3
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020c0:	4629      	mov	r1, r5
 80020c2:	024b      	lsls	r3, r1, #9
 80020c4:	4621      	mov	r1, r4
 80020c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ca:	4621      	mov	r1, r4
 80020cc:	024a      	lsls	r2, r1, #9
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020e4:	f7fe f8ec 	bl	80002c0 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4613      	mov	r3, r2
 80020ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020f2:	e067      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f4:	4b75      	ldr	r3, [pc, #468]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002100:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002104:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800210e:	2300      	movs	r3, #0
 8002110:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002112:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002116:	4622      	mov	r2, r4
 8002118:	462b      	mov	r3, r5
 800211a:	f04f 0000 	mov.w	r0, #0
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	0159      	lsls	r1, r3, #5
 8002124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002128:	0150      	lsls	r0, r2, #5
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4621      	mov	r1, r4
 8002130:	1a51      	subs	r1, r2, r1
 8002132:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002134:	4629      	mov	r1, r5
 8002136:	eb63 0301 	sbc.w	r3, r3, r1
 800213a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002148:	4649      	mov	r1, r9
 800214a:	018b      	lsls	r3, r1, #6
 800214c:	4641      	mov	r1, r8
 800214e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002152:	4641      	mov	r1, r8
 8002154:	018a      	lsls	r2, r1, #6
 8002156:	4641      	mov	r1, r8
 8002158:	ebb2 0a01 	subs.w	sl, r2, r1
 800215c:	4649      	mov	r1, r9
 800215e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800216e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002176:	4692      	mov	sl, r2
 8002178:	469b      	mov	fp, r3
 800217a:	4623      	mov	r3, r4
 800217c:	eb1a 0303 	adds.w	r3, sl, r3
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	462b      	mov	r3, r5
 8002184:	eb4b 0303 	adc.w	r3, fp, r3
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021ac:	2200      	movs	r2, #0
 80021ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80021b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80021b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021b6:	f7fe f883 	bl	80002c0 <__aeabi_uldivmod>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4613      	mov	r3, r2
 80021c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021c4:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021e6:	e0eb      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f4:	4b35      	ldr	r3, [pc, #212]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d06b      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002200:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	2200      	movs	r2, #0
 8002208:	66bb      	str	r3, [r7, #104]	@ 0x68
 800220a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800220c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800220e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002212:	663b      	str	r3, [r7, #96]	@ 0x60
 8002214:	2300      	movs	r3, #0
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
 8002218:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800221c:	4622      	mov	r2, r4
 800221e:	462b      	mov	r3, r5
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	0159      	lsls	r1, r3, #5
 800222a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222e:	0150      	lsls	r0, r2, #5
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4621      	mov	r1, r4
 8002236:	1a51      	subs	r1, r2, r1
 8002238:	61b9      	str	r1, [r7, #24]
 800223a:	4629      	mov	r1, r5
 800223c:	eb63 0301 	sbc.w	r3, r3, r1
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800224e:	4659      	mov	r1, fp
 8002250:	018b      	lsls	r3, r1, #6
 8002252:	4651      	mov	r1, sl
 8002254:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002258:	4651      	mov	r1, sl
 800225a:	018a      	lsls	r2, r1, #6
 800225c:	4651      	mov	r1, sl
 800225e:	ebb2 0801 	subs.w	r8, r2, r1
 8002262:	4659      	mov	r1, fp
 8002264:	eb63 0901 	sbc.w	r9, r3, r1
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227c:	4690      	mov	r8, r2
 800227e:	4699      	mov	r9, r3
 8002280:	4623      	mov	r3, r4
 8002282:	eb18 0303 	adds.w	r3, r8, r3
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	462b      	mov	r3, r5
 800228a:	eb49 0303 	adc.w	r3, r9, r3
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800229c:	4629      	mov	r1, r5
 800229e:	024b      	lsls	r3, r1, #9
 80022a0:	4621      	mov	r1, r4
 80022a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022a6:	4621      	mov	r1, r4
 80022a8:	024a      	lsls	r2, r1, #9
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022b2:	2200      	movs	r2, #0
 80022b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022bc:	f7fe f800 	bl	80002c0 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ca:	e065      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x420>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d8:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	2200      	movs	r2, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	4611      	mov	r1, r2
 80022e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ea:	2300      	movs	r3, #0
 80022ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80022ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022f2:	4642      	mov	r2, r8
 80022f4:	464b      	mov	r3, r9
 80022f6:	f04f 0000 	mov.w	r0, #0
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	0159      	lsls	r1, r3, #5
 8002300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002304:	0150      	lsls	r0, r2, #5
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4641      	mov	r1, r8
 800230c:	1a51      	subs	r1, r2, r1
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	4649      	mov	r1, r9
 8002312:	eb63 0301 	sbc.w	r3, r3, r1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002324:	4659      	mov	r1, fp
 8002326:	018b      	lsls	r3, r1, #6
 8002328:	4651      	mov	r1, sl
 800232a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800232e:	4651      	mov	r1, sl
 8002330:	018a      	lsls	r2, r1, #6
 8002332:	4651      	mov	r1, sl
 8002334:	1a54      	subs	r4, r2, r1
 8002336:	4659      	mov	r1, fp
 8002338:	eb63 0501 	sbc.w	r5, r3, r1
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	00eb      	lsls	r3, r5, #3
 8002346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234a:	00e2      	lsls	r2, r4, #3
 800234c:	4614      	mov	r4, r2
 800234e:	461d      	mov	r5, r3
 8002350:	4643      	mov	r3, r8
 8002352:	18e3      	adds	r3, r4, r3
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	464b      	mov	r3, r9
 8002358:	eb45 0303 	adc.w	r3, r5, r3
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236a:	4629      	mov	r1, r5
 800236c:	028b      	lsls	r3, r1, #10
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002374:	4621      	mov	r1, r4
 8002376:	028a      	lsls	r2, r1, #10
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002380:	2200      	movs	r2, #0
 8002382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002384:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002386:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800238a:	f7fd ff99 	bl	80002c0 <__aeabi_uldivmod>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4613      	mov	r3, r2
 8002394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0f1b      	lsrs	r3, r3, #28
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80023a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023b6:	e003      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	37b8      	adds	r7, #184	@ 0xb8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	00f42400 	.word	0x00f42400

080023d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e28d      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8083 	beq.w	80024fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f8:	4b94      	ldr	r3, [pc, #592]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b04      	cmp	r3, #4
 8002402:	d019      	beq.n	8002438 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002404:	4b91      	ldr	r3, [pc, #580]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
        || \
 800240c:	2b08      	cmp	r3, #8
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002410:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002418:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b8b      	ldr	r3, [pc, #556]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b88      	ldr	r3, [pc, #544]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b84      	ldr	r3, [pc, #528]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x124>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e25a      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x90>
 800245a:	4b7c      	ldr	r3, [pc, #496]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7b      	ldr	r2, [pc, #492]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xcc>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0xb4>
 8002472:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a75      	ldr	r2, [pc, #468]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b73      	ldr	r3, [pc, #460]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a72      	ldr	r2, [pc, #456]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xcc>
 800248c:	4b6f      	ldr	r3, [pc, #444]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6e      	ldr	r2, [pc, #440]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b6c      	ldr	r3, [pc, #432]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a6b      	ldr	r2, [pc, #428]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f8ec 	bl	8001688 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f8e8 	bl	8001688 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e21f      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b61      	ldr	r3, [pc, #388]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xdc>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f8d8 	bl	8001688 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f8d4 	bl	8001688 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e20b      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x104>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d06f      	beq.n	80025ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800250a:	4b50      	ldr	r3, [pc, #320]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d017      	beq.n	8002546 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002516:	4b4d      	ldr	r3, [pc, #308]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
        || \
 800251e:	2b08      	cmp	r3, #8
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002522:	4b4a      	ldr	r3, [pc, #296]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b47      	ldr	r3, [pc, #284]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d11c      	bne.n	8002574 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b44      	ldr	r3, [pc, #272]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x186>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e1d3      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4937      	ldr	r1, [pc, #220]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	e03a      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <HAL_RCC_OscConfig+0x278>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff f881 	bl	8001688 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff f87d 	bl	8001688 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1b4      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	4b2b      	ldr	r3, [pc, #172]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4925      	ldr	r1, [pc, #148]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <HAL_RCC_OscConfig+0x278>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f860 	bl	8001688 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025cc:	f7ff f85c 	bl	8001688 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e193      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d036      	beq.n	8002664 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff f840 	bl	8001688 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260c:	f7ff f83c 	bl	8001688 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e173      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x234>
 800262a:	e01b      	b.n	8002664 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff f829 	bl	8001688 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	e00e      	b.n	8002658 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff f825 	bl	8001688 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d907      	bls.n	8002658 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e15c      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
 800264c:	40023800 	.word	0x40023800
 8002650:	42470000 	.word	0x42470000
 8002654:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4b8a      	ldr	r3, [pc, #552]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ea      	bne.n	800263a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8097 	beq.w	80027a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b83      	ldr	r3, [pc, #524]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b7f      	ldr	r3, [pc, #508]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	4a7e      	ldr	r2, [pc, #504]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	@ 0x40
 8002692:	4b7c      	ldr	r3, [pc, #496]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b79      	ldr	r3, [pc, #484]	@ (8002888 <HAL_RCC_OscConfig+0x4b0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <HAL_RCC_OscConfig+0x4b0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	@ (8002888 <HAL_RCC_OscConfig+0x4b0>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe ffe5 	bl	8001688 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe ffe1 	bl	8001688 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e118      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_OscConfig+0x4b0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x31e>
 80026e8:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	4a65      	ldr	r2, [pc, #404]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x358>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x340>
 80026fe:	4b61      	ldr	r3, [pc, #388]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	4a60      	ldr	r2, [pc, #384]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6713      	str	r3, [r2, #112]	@ 0x70
 800270a:	4b5e      	ldr	r3, [pc, #376]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	4a5d      	ldr	r2, [pc, #372]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	@ 0x70
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0x358>
 8002718:	4b5a      	ldr	r3, [pc, #360]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a59      	ldr	r2, [pc, #356]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	4b57      	ldr	r3, [pc, #348]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a56      	ldr	r2, [pc, #344]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d015      	beq.n	8002764 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe ffa6 	bl	8001688 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe ffa2 	bl	8001688 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0d7      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ee      	beq.n	8002740 <HAL_RCC_OscConfig+0x368>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe ff90 	bl	8001688 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe ff8c 	bl	8001688 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0c1      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	4a3a      	ldr	r2, [pc, #232]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80ad 	beq.w	8002904 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d060      	beq.n	8002878 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d145      	bne.n	800284a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b33      	ldr	r3, [pc, #204]	@ (800288c <HAL_RCC_OscConfig+0x4b4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe ff60 	bl	8001688 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe ff5c 	bl	8001688 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e093      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b29      	ldr	r3, [pc, #164]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	3b01      	subs	r3, #1
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	071b      	lsls	r3, r3, #28
 8002816:	491b      	ldr	r1, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x4b4>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe ff31 	bl	8001688 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe ff2d 	bl	8001688 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e064      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x452>
 8002848:	e05c      	b.n	8002904 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCC_OscConfig+0x4b4>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe ff1a 	bl	8001688 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe ff16 	bl	8001688 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e04d      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x480>
 8002876:	e045      	b.n	8002904 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e040      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002890:	4b1f      	ldr	r3, [pc, #124]	@ (8002910 <HAL_RCC_OscConfig+0x538>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d030      	beq.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d129      	bne.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d122      	bne.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d119      	bne.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d10f      	bne.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e042      	b.n	80029ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fdc4 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fd07 	bl	800336c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800296c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800297c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800298c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d121      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_Transmit_IT+0x26>
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e01a      	b.n	8002a14 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2221      	movs	r2, #33	@ 0x21
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d112      	bne.n	8002a60 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_UART_Receive_IT+0x26>
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00b      	b.n	8002a62 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fab0 	bl	8002fbc <UART_Start_Receive_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0ba      	sub	sp, #232	@ 0xe8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fb8f 	bl	80031ee <UART_Receive_IT>
      return;
 8002ad0:	e25b      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80de 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
 8002adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80d1 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
 8002b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
 8002b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	f043 0208 	orr.w	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 81f2 	beq.w	8002f80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fb1a 	bl	80031ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc4:	2b40      	cmp	r3, #64	@ 0x40
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_UART_IRQHandler+0x17a>
 8002bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04f      	beq.n	8002c86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa22 	bl	8003030 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d141      	bne.n	8002c7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1d9      	bne.n	8002bfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	4a7e      	ldr	r2, [pc, #504]	@ (8002e4c <HAL_UART_IRQHandler+0x3e0>)
 8002c54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fea1 	bl	80019a2 <HAL_DMA_Abort_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c70:	4610      	mov	r0, r2
 8002c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00e      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f98a 	bl	8002f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e00a      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f986 	bl	8002f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	e006      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f982 	bl	8002f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c92:	e175      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	bf00      	nop
    return;
 8002c96:	e173      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 814f 	bne.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8148 	beq.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8141 	beq.w	8002f40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	f040 80b6 	bne.w	8002e50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8145 	beq.w	8002f84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f080 813e 	bcs.w	8002f84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1a:	f000 8088 	beq.w	8002e2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d9      	bne.n	8002d1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e1      	bne.n	8002d6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e3      	bne.n	8002da6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fd4a 	bl	80018c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8ad 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e4a:	e09b      	b.n	8002f84 <HAL_UART_IRQHandler+0x518>
 8002e4c:	080030f7 	.word	0x080030f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 808e 	beq.w	8002f88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8089 	beq.w	8002f88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e3      	bne.n	8002e76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ed2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f18:	61fa      	str	r2, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	617b      	str	r3, [r7, #20]
   return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e3      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f833 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f3e:	e023      	b.n	8002f88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_UART_IRQHandler+0x4f4>
 8002f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8e0 	bl	800311e <UART_Transmit_IT>
    return;
 8002f5e:	e014      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00e      	beq.n	8002f8a <HAL_UART_IRQHandler+0x51e>
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f920 	bl	80031be <UART_EndTransmit_IT>
    return;
 8002f7e:	e004      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
    return;
 8002f80:	bf00      	nop
 8002f82:	e002      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <HAL_UART_IRQHandler+0x51e>
      return;
 8002f88:	bf00      	nop
  }
}
 8002f8a:	37e8      	adds	r7, #232	@ 0xe8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2222      	movs	r2, #34	@ 0x22
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003000:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003030:	b480      	push	{r7}
 8003032:	b095      	sub	sp, #84	@ 0x54
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003058:	643a      	str	r2, [r7, #64]	@ 0x40
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800305e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	61fb      	str	r3, [r7, #28]
   return(result);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800308c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d119      	bne.n	80030dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030c8:	61ba      	str	r2, [r7, #24]
 80030ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	613b      	str	r3, [r7, #16]
   return(result);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030ea:	bf00      	nop
 80030ec:	3754      	adds	r7, #84	@ 0x54
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff3d 	bl	8002f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b21      	cmp	r3, #33	@ 0x21
 8003130:	d13e      	bne.n	80031b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313a:	d114      	bne.n	8003166 <UART_Transmit_IT+0x48>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]
 8003164:	e008      	b.n	8003178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6211      	str	r1, [r2, #32]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd febc 	bl	8000f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b08c      	sub	sp, #48	@ 0x30
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b22      	cmp	r3, #34	@ 0x22
 8003200:	f040 80ae 	bne.w	8003360 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320c:	d117      	bne.n	800323e <UART_Receive_IT+0x50>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	b29a      	uxth	r2, r3
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	@ 0x28
 800323c:	e026      	b.n	800328c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d007      	beq.n	8003262 <UART_Receive_IT+0x74>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <UART_Receive_IT+0x82>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e008      	b.n	8003282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327c:	b2da      	uxtb	r2, r3
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800329c:	2b00      	cmp	r3, #0
 800329e:	d15d      	bne.n	800335c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0220 	bic.w	r2, r2, #32
 80032ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d135      	bne.n	8003352 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	e853 3f00 	ldrex	r3, [r3]
 80032fa:	613b      	str	r3, [r7, #16]
   return(result);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f023 0310 	bic.w	r3, r3, #16
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	623a      	str	r2, [r7, #32]
 800330e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	69f9      	ldr	r1, [r7, #28]
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	61bb      	str	r3, [r7, #24]
   return(result);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e5      	bne.n	80032ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b10      	cmp	r3, #16
 800332c:	d10a      	bne.n	8003344 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fe2a 	bl	8002fa4 <HAL_UARTEx_RxEventCallback>
 8003350:	e002      	b.n	8003358 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fe36 	bl	8000fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e002      	b.n	8003362 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3730      	adds	r7, #48	@ 0x30
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b0c0      	sub	sp, #256	@ 0x100
 8003372:	af00      	add	r7, sp, #0
 8003374:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	68d9      	ldr	r1, [r3, #12]
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	ea40 0301 	orr.w	r3, r0, r1
 8003394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033c4:	f021 010c 	bic.w	r1, r1, #12
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033d2:	430b      	orrs	r3, r1
 80033d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e6:	6999      	ldr	r1, [r3, #24]
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	ea40 0301 	orr.w	r3, r0, r1
 80033f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003638 <UART_SetConfig+0x2cc>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d005      	beq.n	800340c <UART_SetConfig+0xa0>
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b8d      	ldr	r3, [pc, #564]	@ (800363c <UART_SetConfig+0x2d0>)
 8003408:	429a      	cmp	r2, r3
 800340a:	d104      	bne.n	8003416 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7fe fda0 	bl	8001f50 <HAL_RCC_GetPCLK2Freq>
 8003410:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003414:	e003      	b.n	800341e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7fe fd87 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 800341a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003428:	f040 810c 	bne.w	8003644 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003436:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800343a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	1891      	adds	r1, r2, r2
 8003444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003446:	415b      	adcs	r3, r3
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800344e:	4621      	mov	r1, r4
 8003450:	eb12 0801 	adds.w	r8, r2, r1
 8003454:	4629      	mov	r1, r5
 8003456:	eb43 0901 	adc.w	r9, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800346a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346e:	4690      	mov	r8, r2
 8003470:	4699      	mov	r9, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb18 0303 	adds.w	r3, r8, r3
 8003478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800347c:	462b      	mov	r3, r5
 800347e:	eb49 0303 	adc.w	r3, r9, r3
 8003482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800349a:	460b      	mov	r3, r1
 800349c:	18db      	adds	r3, r3, r3
 800349e:	653b      	str	r3, [r7, #80]	@ 0x50
 80034a0:	4613      	mov	r3, r2
 80034a2:	eb42 0303 	adc.w	r3, r2, r3
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80034a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80034ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80034b0:	f7fc ff06 	bl	80002c0 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4b61      	ldr	r3, [pc, #388]	@ (8003640 <UART_SetConfig+0x2d4>)
 80034ba:	fba3 2302 	umull	r2, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	011c      	lsls	r4, r3, #4
 80034c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034d4:	4642      	mov	r2, r8
 80034d6:	464b      	mov	r3, r9
 80034d8:	1891      	adds	r1, r2, r2
 80034da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034dc:	415b      	adcs	r3, r3
 80034de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034e4:	4641      	mov	r1, r8
 80034e6:	eb12 0a01 	adds.w	sl, r2, r1
 80034ea:	4649      	mov	r1, r9
 80034ec:	eb43 0b01 	adc.w	fp, r3, r1
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003504:	4692      	mov	sl, r2
 8003506:	469b      	mov	fp, r3
 8003508:	4643      	mov	r3, r8
 800350a:	eb1a 0303 	adds.w	r3, sl, r3
 800350e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003512:	464b      	mov	r3, r9
 8003514:	eb4b 0303 	adc.w	r3, fp, r3
 8003518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003528:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800352c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003530:	460b      	mov	r3, r1
 8003532:	18db      	adds	r3, r3, r3
 8003534:	643b      	str	r3, [r7, #64]	@ 0x40
 8003536:	4613      	mov	r3, r2
 8003538:	eb42 0303 	adc.w	r3, r2, r3
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44
 800353e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003542:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003546:	f7fc febb 	bl	80002c0 <__aeabi_uldivmod>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4611      	mov	r1, r2
 8003550:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003552:	fba3 2301 	umull	r2, r3, r3, r1
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2264      	movs	r2, #100	@ 0x64
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	1acb      	subs	r3, r1, r3
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003568:	fba3 2302 	umull	r2, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003574:	441c      	add	r4, r3
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003584:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003590:	415b      	adcs	r3, r3
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003598:	4641      	mov	r1, r8
 800359a:	1851      	adds	r1, r2, r1
 800359c:	6339      	str	r1, [r7, #48]	@ 0x30
 800359e:	4649      	mov	r1, r9
 80035a0:	414b      	adcs	r3, r1
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80035b0:	4659      	mov	r1, fp
 80035b2:	00cb      	lsls	r3, r1, #3
 80035b4:	4651      	mov	r1, sl
 80035b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ba:	4651      	mov	r1, sl
 80035bc:	00ca      	lsls	r2, r1, #3
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	4642      	mov	r2, r8
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035cc:	464b      	mov	r3, r9
 80035ce:	460a      	mov	r2, r1
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035ec:	460b      	mov	r3, r1
 80035ee:	18db      	adds	r3, r3, r3
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f2:	4613      	mov	r3, r2
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003602:	f7fc fe5d 	bl	80002c0 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <UART_SetConfig+0x2d4>)
 800360c:	fba3 1302 	umull	r1, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	2164      	movs	r1, #100	@ 0x64
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	3332      	adds	r3, #50	@ 0x32
 800361e:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <UART_SetConfig+0x2d4>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	f003 0207 	and.w	r2, r3, #7
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4422      	add	r2, r4
 8003632:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003634:	e106      	b.n	8003844 <UART_SetConfig+0x4d8>
 8003636:	bf00      	nop
 8003638:	40011000 	.word	0x40011000
 800363c:	40011400 	.word	0x40011400
 8003640:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800364e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003652:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003656:	4642      	mov	r2, r8
 8003658:	464b      	mov	r3, r9
 800365a:	1891      	adds	r1, r2, r2
 800365c:	6239      	str	r1, [r7, #32]
 800365e:	415b      	adcs	r3, r3
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
 8003662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003666:	4641      	mov	r1, r8
 8003668:	1854      	adds	r4, r2, r1
 800366a:	4649      	mov	r1, r9
 800366c:	eb43 0501 	adc.w	r5, r3, r1
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	00eb      	lsls	r3, r5, #3
 800367a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800367e:	00e2      	lsls	r2, r4, #3
 8003680:	4614      	mov	r4, r2
 8003682:	461d      	mov	r5, r3
 8003684:	4643      	mov	r3, r8
 8003686:	18e3      	adds	r3, r4, r3
 8003688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800368c:	464b      	mov	r3, r9
 800368e:	eb45 0303 	adc.w	r3, r5, r3
 8003692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80036b2:	4629      	mov	r1, r5
 80036b4:	008b      	lsls	r3, r1, #2
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036bc:	4621      	mov	r1, r4
 80036be:	008a      	lsls	r2, r1, #2
 80036c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036c4:	f7fc fdfc 	bl	80002c0 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4b60      	ldr	r3, [pc, #384]	@ (8003850 <UART_SetConfig+0x4e4>)
 80036ce:	fba3 2302 	umull	r2, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	011c      	lsls	r4, r3, #4
 80036d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	61b9      	str	r1, [r7, #24]
 80036f0:	415b      	adcs	r3, r3
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f8:	4641      	mov	r1, r8
 80036fa:	1851      	adds	r1, r2, r1
 80036fc:	6139      	str	r1, [r7, #16]
 80036fe:	4649      	mov	r1, r9
 8003700:	414b      	adcs	r3, r1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003710:	4659      	mov	r1, fp
 8003712:	00cb      	lsls	r3, r1, #3
 8003714:	4651      	mov	r1, sl
 8003716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371a:	4651      	mov	r1, sl
 800371c:	00ca      	lsls	r2, r1, #3
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	4603      	mov	r3, r0
 8003724:	4642      	mov	r2, r8
 8003726:	189b      	adds	r3, r3, r2
 8003728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800372c:	464b      	mov	r3, r9
 800372e:	460a      	mov	r2, r1
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003742:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003750:	4649      	mov	r1, r9
 8003752:	008b      	lsls	r3, r1, #2
 8003754:	4641      	mov	r1, r8
 8003756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800375a:	4641      	mov	r1, r8
 800375c:	008a      	lsls	r2, r1, #2
 800375e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003762:	f7fc fdad 	bl	80002c0 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4611      	mov	r1, r2
 800376c:	4b38      	ldr	r3, [pc, #224]	@ (8003850 <UART_SetConfig+0x4e4>)
 800376e:	fba3 2301 	umull	r2, r3, r3, r1
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2264      	movs	r2, #100	@ 0x64
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	1acb      	subs	r3, r1, r3
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	@ 0x32
 8003780:	4a33      	ldr	r2, [pc, #204]	@ (8003850 <UART_SetConfig+0x4e4>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800378c:	441c      	add	r4, r3
 800378e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003792:	2200      	movs	r2, #0
 8003794:	673b      	str	r3, [r7, #112]	@ 0x70
 8003796:	677a      	str	r2, [r7, #116]	@ 0x74
 8003798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	415b      	adcs	r3, r3
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ac:	4641      	mov	r1, r8
 80037ae:	1851      	adds	r1, r2, r1
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c4:	4659      	mov	r1, fp
 80037c6:	00cb      	lsls	r3, r1, #3
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ce:	4651      	mov	r1, sl
 80037d0:	00ca      	lsls	r2, r1, #3
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4642      	mov	r2, r8
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037de:	464b      	mov	r3, r9
 80037e0:	460a      	mov	r2, r1
 80037e2:	eb42 0303 	adc.w	r3, r2, r3
 80037e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80037f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003812:	f7fc fd55 	bl	80002c0 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <UART_SetConfig+0x4e4>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	@ 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	3332      	adds	r3, #50	@ 0x32
 800382e:	4a08      	ldr	r2, [pc, #32]	@ (8003850 <UART_SetConfig+0x4e4>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4422      	add	r2, r4
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003850:	51eb851f 	.word	0x51eb851f

08003854 <atoi>:
 8003854:	220a      	movs	r2, #10
 8003856:	2100      	movs	r1, #0
 8003858:	f000 b87a 	b.w	8003950 <strtol>

0800385c <_strtol_l.constprop.0>:
 800385c:	2b24      	cmp	r3, #36	@ 0x24
 800385e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003862:	4686      	mov	lr, r0
 8003864:	4690      	mov	r8, r2
 8003866:	d801      	bhi.n	800386c <_strtol_l.constprop.0+0x10>
 8003868:	2b01      	cmp	r3, #1
 800386a:	d106      	bne.n	800387a <_strtol_l.constprop.0+0x1e>
 800386c:	f000 f8c8 	bl	8003a00 <__errno>
 8003870:	2316      	movs	r3, #22
 8003872:	6003      	str	r3, [r0, #0]
 8003874:	2000      	movs	r0, #0
 8003876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387a:	4834      	ldr	r0, [pc, #208]	@ (800394c <_strtol_l.constprop.0+0xf0>)
 800387c:	460d      	mov	r5, r1
 800387e:	462a      	mov	r2, r5
 8003880:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003884:	5d06      	ldrb	r6, [r0, r4]
 8003886:	f016 0608 	ands.w	r6, r6, #8
 800388a:	d1f8      	bne.n	800387e <_strtol_l.constprop.0+0x22>
 800388c:	2c2d      	cmp	r4, #45	@ 0x2d
 800388e:	d12d      	bne.n	80038ec <_strtol_l.constprop.0+0x90>
 8003890:	782c      	ldrb	r4, [r5, #0]
 8003892:	2601      	movs	r6, #1
 8003894:	1c95      	adds	r5, r2, #2
 8003896:	f033 0210 	bics.w	r2, r3, #16
 800389a:	d109      	bne.n	80038b0 <_strtol_l.constprop.0+0x54>
 800389c:	2c30      	cmp	r4, #48	@ 0x30
 800389e:	d12a      	bne.n	80038f6 <_strtol_l.constprop.0+0x9a>
 80038a0:	782a      	ldrb	r2, [r5, #0]
 80038a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80038a6:	2a58      	cmp	r2, #88	@ 0x58
 80038a8:	d125      	bne.n	80038f6 <_strtol_l.constprop.0+0x9a>
 80038aa:	786c      	ldrb	r4, [r5, #1]
 80038ac:	2310      	movs	r3, #16
 80038ae:	3502      	adds	r5, #2
 80038b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80038b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80038b8:	2200      	movs	r2, #0
 80038ba:	fbbc f9f3 	udiv	r9, ip, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80038c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80038c8:	2f09      	cmp	r7, #9
 80038ca:	d81b      	bhi.n	8003904 <_strtol_l.constprop.0+0xa8>
 80038cc:	463c      	mov	r4, r7
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	dd27      	ble.n	8003922 <_strtol_l.constprop.0+0xc6>
 80038d2:	1c57      	adds	r7, r2, #1
 80038d4:	d007      	beq.n	80038e6 <_strtol_l.constprop.0+0x8a>
 80038d6:	4581      	cmp	r9, r0
 80038d8:	d320      	bcc.n	800391c <_strtol_l.constprop.0+0xc0>
 80038da:	d101      	bne.n	80038e0 <_strtol_l.constprop.0+0x84>
 80038dc:	45a2      	cmp	sl, r4
 80038de:	db1d      	blt.n	800391c <_strtol_l.constprop.0+0xc0>
 80038e0:	fb00 4003 	mla	r0, r0, r3, r4
 80038e4:	2201      	movs	r2, #1
 80038e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038ea:	e7eb      	b.n	80038c4 <_strtol_l.constprop.0+0x68>
 80038ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80038ee:	bf04      	itt	eq
 80038f0:	782c      	ldrbeq	r4, [r5, #0]
 80038f2:	1c95      	addeq	r5, r2, #2
 80038f4:	e7cf      	b.n	8003896 <_strtol_l.constprop.0+0x3a>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1da      	bne.n	80038b0 <_strtol_l.constprop.0+0x54>
 80038fa:	2c30      	cmp	r4, #48	@ 0x30
 80038fc:	bf0c      	ite	eq
 80038fe:	2308      	moveq	r3, #8
 8003900:	230a      	movne	r3, #10
 8003902:	e7d5      	b.n	80038b0 <_strtol_l.constprop.0+0x54>
 8003904:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003908:	2f19      	cmp	r7, #25
 800390a:	d801      	bhi.n	8003910 <_strtol_l.constprop.0+0xb4>
 800390c:	3c37      	subs	r4, #55	@ 0x37
 800390e:	e7de      	b.n	80038ce <_strtol_l.constprop.0+0x72>
 8003910:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003914:	2f19      	cmp	r7, #25
 8003916:	d804      	bhi.n	8003922 <_strtol_l.constprop.0+0xc6>
 8003918:	3c57      	subs	r4, #87	@ 0x57
 800391a:	e7d8      	b.n	80038ce <_strtol_l.constprop.0+0x72>
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	e7e1      	b.n	80038e6 <_strtol_l.constprop.0+0x8a>
 8003922:	1c53      	adds	r3, r2, #1
 8003924:	d108      	bne.n	8003938 <_strtol_l.constprop.0+0xdc>
 8003926:	2322      	movs	r3, #34	@ 0x22
 8003928:	f8ce 3000 	str.w	r3, [lr]
 800392c:	4660      	mov	r0, ip
 800392e:	f1b8 0f00 	cmp.w	r8, #0
 8003932:	d0a0      	beq.n	8003876 <_strtol_l.constprop.0+0x1a>
 8003934:	1e69      	subs	r1, r5, #1
 8003936:	e006      	b.n	8003946 <_strtol_l.constprop.0+0xea>
 8003938:	b106      	cbz	r6, 800393c <_strtol_l.constprop.0+0xe0>
 800393a:	4240      	negs	r0, r0
 800393c:	f1b8 0f00 	cmp.w	r8, #0
 8003940:	d099      	beq.n	8003876 <_strtol_l.constprop.0+0x1a>
 8003942:	2a00      	cmp	r2, #0
 8003944:	d1f6      	bne.n	8003934 <_strtol_l.constprop.0+0xd8>
 8003946:	f8c8 1000 	str.w	r1, [r8]
 800394a:	e794      	b.n	8003876 <_strtol_l.constprop.0+0x1a>
 800394c:	080044d1 	.word	0x080044d1

08003950 <strtol>:
 8003950:	4613      	mov	r3, r2
 8003952:	460a      	mov	r2, r1
 8003954:	4601      	mov	r1, r0
 8003956:	4802      	ldr	r0, [pc, #8]	@ (8003960 <strtol+0x10>)
 8003958:	6800      	ldr	r0, [r0, #0]
 800395a:	f7ff bf7f 	b.w	800385c <_strtol_l.constprop.0>
 800395e:	bf00      	nop
 8003960:	2000020c 	.word	0x2000020c

08003964 <_vsiprintf_r>:
 8003964:	b500      	push	{lr}
 8003966:	b09b      	sub	sp, #108	@ 0x6c
 8003968:	9100      	str	r1, [sp, #0]
 800396a:	9104      	str	r1, [sp, #16]
 800396c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003970:	9105      	str	r1, [sp, #20]
 8003972:	9102      	str	r1, [sp, #8]
 8003974:	4905      	ldr	r1, [pc, #20]	@ (800398c <_vsiprintf_r+0x28>)
 8003976:	9103      	str	r1, [sp, #12]
 8003978:	4669      	mov	r1, sp
 800397a:	f000 f9cf 	bl	8003d1c <_svfiprintf_r>
 800397e:	9b00      	ldr	r3, [sp, #0]
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	b01b      	add	sp, #108	@ 0x6c
 8003986:	f85d fb04 	ldr.w	pc, [sp], #4
 800398a:	bf00      	nop
 800398c:	ffff0208 	.word	0xffff0208

08003990 <vsiprintf>:
 8003990:	4613      	mov	r3, r2
 8003992:	460a      	mov	r2, r1
 8003994:	4601      	mov	r1, r0
 8003996:	4802      	ldr	r0, [pc, #8]	@ (80039a0 <vsiprintf+0x10>)
 8003998:	6800      	ldr	r0, [r0, #0]
 800399a:	f7ff bfe3 	b.w	8003964 <_vsiprintf_r>
 800399e:	bf00      	nop
 80039a0:	2000020c 	.word	0x2000020c

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <strncmp>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	b16a      	cbz	r2, 80039d4 <strncmp+0x20>
 80039b8:	3901      	subs	r1, #1
 80039ba:	1884      	adds	r4, r0, r2
 80039bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d103      	bne.n	80039d0 <strncmp+0x1c>
 80039c8:	42a0      	cmp	r0, r4
 80039ca:	d001      	beq.n	80039d0 <strncmp+0x1c>
 80039cc:	2a00      	cmp	r2, #0
 80039ce:	d1f5      	bne.n	80039bc <strncmp+0x8>
 80039d0:	1ad0      	subs	r0, r2, r3
 80039d2:	bd10      	pop	{r4, pc}
 80039d4:	4610      	mov	r0, r2
 80039d6:	e7fc      	b.n	80039d2 <strncmp+0x1e>

080039d8 <strncpy>:
 80039d8:	b510      	push	{r4, lr}
 80039da:	3901      	subs	r1, #1
 80039dc:	4603      	mov	r3, r0
 80039de:	b132      	cbz	r2, 80039ee <strncpy+0x16>
 80039e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80039e4:	f803 4b01 	strb.w	r4, [r3], #1
 80039e8:	3a01      	subs	r2, #1
 80039ea:	2c00      	cmp	r4, #0
 80039ec:	d1f7      	bne.n	80039de <strncpy+0x6>
 80039ee:	441a      	add	r2, r3
 80039f0:	2100      	movs	r1, #0
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d100      	bne.n	80039f8 <strncpy+0x20>
 80039f6:	bd10      	pop	{r4, pc}
 80039f8:	f803 1b01 	strb.w	r1, [r3], #1
 80039fc:	e7f9      	b.n	80039f2 <strncpy+0x1a>
	...

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	@ (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000020c 	.word	0x2000020c

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	@ (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2600      	movs	r6, #0
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a50 <__libc_init_array+0x44>)
 8003a20:	f000 fc66 	bl	80042f0 <_init>
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2600      	movs	r6, #0
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	0800460c 	.word	0x0800460c
 8003a48:	0800460c 	.word	0x0800460c
 8003a4c:	0800460c 	.word	0x0800460c
 8003a50:	08004610 	.word	0x08004610

08003a54 <__retarget_lock_acquire_recursive>:
 8003a54:	4770      	bx	lr

08003a56 <__retarget_lock_release_recursive>:
 8003a56:	4770      	bx	lr

08003a58 <memcpy>:
 8003a58:	440a      	add	r2, r1
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a60:	d100      	bne.n	8003a64 <memcpy+0xc>
 8003a62:	4770      	bx	lr
 8003a64:	b510      	push	{r4, lr}
 8003a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	d1f9      	bne.n	8003a66 <memcpy+0xe>
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <_free_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4605      	mov	r5, r0
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d041      	beq.n	8003b00 <_free_r+0x8c>
 8003a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a80:	1f0c      	subs	r4, r1, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfb8      	it	lt
 8003a86:	18e4      	addlt	r4, r4, r3
 8003a88:	f000 f8e0 	bl	8003c4c <__malloc_lock>
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b04 <_free_r+0x90>)
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	b933      	cbnz	r3, 8003aa0 <_free_r+0x2c>
 8003a92:	6063      	str	r3, [r4, #4]
 8003a94:	6014      	str	r4, [r2, #0]
 8003a96:	4628      	mov	r0, r5
 8003a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a9c:	f000 b8dc 	b.w	8003c58 <__malloc_unlock>
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d908      	bls.n	8003ab6 <_free_r+0x42>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	1821      	adds	r1, r4, r0
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	bf01      	itttt	eq
 8003aac:	6819      	ldreq	r1, [r3, #0]
 8003aae:	685b      	ldreq	r3, [r3, #4]
 8003ab0:	1809      	addeq	r1, r1, r0
 8003ab2:	6021      	streq	r1, [r4, #0]
 8003ab4:	e7ed      	b.n	8003a92 <_free_r+0x1e>
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	b10b      	cbz	r3, 8003ac0 <_free_r+0x4c>
 8003abc:	42a3      	cmp	r3, r4
 8003abe:	d9fa      	bls.n	8003ab6 <_free_r+0x42>
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	1850      	adds	r0, r2, r1
 8003ac4:	42a0      	cmp	r0, r4
 8003ac6:	d10b      	bne.n	8003ae0 <_free_r+0x6c>
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	4401      	add	r1, r0
 8003acc:	1850      	adds	r0, r2, r1
 8003ace:	4283      	cmp	r3, r0
 8003ad0:	6011      	str	r1, [r2, #0]
 8003ad2:	d1e0      	bne.n	8003a96 <_free_r+0x22>
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	6053      	str	r3, [r2, #4]
 8003ada:	4408      	add	r0, r1
 8003adc:	6010      	str	r0, [r2, #0]
 8003ade:	e7da      	b.n	8003a96 <_free_r+0x22>
 8003ae0:	d902      	bls.n	8003ae8 <_free_r+0x74>
 8003ae2:	230c      	movs	r3, #12
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	e7d6      	b.n	8003a96 <_free_r+0x22>
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	1821      	adds	r1, r4, r0
 8003aec:	428b      	cmp	r3, r1
 8003aee:	bf04      	itt	eq
 8003af0:	6819      	ldreq	r1, [r3, #0]
 8003af2:	685b      	ldreq	r3, [r3, #4]
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	bf04      	itt	eq
 8003af8:	1809      	addeq	r1, r1, r0
 8003afa:	6021      	streq	r1, [r4, #0]
 8003afc:	6054      	str	r4, [r2, #4]
 8003afe:	e7ca      	b.n	8003a96 <_free_r+0x22>
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
 8003b02:	bf00      	nop
 8003b04:	20000a84 	.word	0x20000a84

08003b08 <sbrk_aligned>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003b48 <sbrk_aligned+0x40>)
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	6831      	ldr	r1, [r6, #0]
 8003b10:	4605      	mov	r5, r0
 8003b12:	b911      	cbnz	r1, 8003b1a <sbrk_aligned+0x12>
 8003b14:	f000 fba6 	bl	8004264 <_sbrk_r>
 8003b18:	6030      	str	r0, [r6, #0]
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f000 fba1 	bl	8004264 <_sbrk_r>
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	d103      	bne.n	8003b2e <sbrk_aligned+0x26>
 8003b26:	f04f 34ff 	mov.w	r4, #4294967295
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
 8003b2e:	1cc4      	adds	r4, r0, #3
 8003b30:	f024 0403 	bic.w	r4, r4, #3
 8003b34:	42a0      	cmp	r0, r4
 8003b36:	d0f8      	beq.n	8003b2a <sbrk_aligned+0x22>
 8003b38:	1a21      	subs	r1, r4, r0
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f000 fb92 	bl	8004264 <_sbrk_r>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d1f2      	bne.n	8003b2a <sbrk_aligned+0x22>
 8003b44:	e7ef      	b.n	8003b26 <sbrk_aligned+0x1e>
 8003b46:	bf00      	nop
 8003b48:	20000a80 	.word	0x20000a80

08003b4c <_malloc_r>:
 8003b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b50:	1ccd      	adds	r5, r1, #3
 8003b52:	f025 0503 	bic.w	r5, r5, #3
 8003b56:	3508      	adds	r5, #8
 8003b58:	2d0c      	cmp	r5, #12
 8003b5a:	bf38      	it	cc
 8003b5c:	250c      	movcc	r5, #12
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	4606      	mov	r6, r0
 8003b62:	db01      	blt.n	8003b68 <_malloc_r+0x1c>
 8003b64:	42a9      	cmp	r1, r5
 8003b66:	d904      	bls.n	8003b72 <_malloc_r+0x26>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	6033      	str	r3, [r6, #0]
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c48 <_malloc_r+0xfc>
 8003b76:	f000 f869 	bl	8003c4c <__malloc_lock>
 8003b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b7e:	461c      	mov	r4, r3
 8003b80:	bb44      	cbnz	r4, 8003bd4 <_malloc_r+0x88>
 8003b82:	4629      	mov	r1, r5
 8003b84:	4630      	mov	r0, r6
 8003b86:	f7ff ffbf 	bl	8003b08 <sbrk_aligned>
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	d158      	bne.n	8003c42 <_malloc_r+0xf6>
 8003b90:	f8d8 4000 	ldr.w	r4, [r8]
 8003b94:	4627      	mov	r7, r4
 8003b96:	2f00      	cmp	r7, #0
 8003b98:	d143      	bne.n	8003c22 <_malloc_r+0xd6>
 8003b9a:	2c00      	cmp	r4, #0
 8003b9c:	d04b      	beq.n	8003c36 <_malloc_r+0xea>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	eb04 0903 	add.w	r9, r4, r3
 8003ba8:	f000 fb5c 	bl	8004264 <_sbrk_r>
 8003bac:	4581      	cmp	r9, r0
 8003bae:	d142      	bne.n	8003c36 <_malloc_r+0xea>
 8003bb0:	6821      	ldr	r1, [r4, #0]
 8003bb2:	1a6d      	subs	r5, r5, r1
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f7ff ffa6 	bl	8003b08 <sbrk_aligned>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d03a      	beq.n	8003c36 <_malloc_r+0xea>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	442b      	add	r3, r5
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	bb62      	cbnz	r2, 8003c28 <_malloc_r+0xdc>
 8003bce:	f8c8 7000 	str.w	r7, [r8]
 8003bd2:	e00f      	b.n	8003bf4 <_malloc_r+0xa8>
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	1b52      	subs	r2, r2, r5
 8003bd8:	d420      	bmi.n	8003c1c <_malloc_r+0xd0>
 8003bda:	2a0b      	cmp	r2, #11
 8003bdc:	d917      	bls.n	8003c0e <_malloc_r+0xc2>
 8003bde:	1961      	adds	r1, r4, r5
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	6025      	str	r5, [r4, #0]
 8003be4:	bf18      	it	ne
 8003be6:	6059      	strne	r1, [r3, #4]
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	bf08      	it	eq
 8003bec:	f8c8 1000 	streq.w	r1, [r8]
 8003bf0:	5162      	str	r2, [r4, r5]
 8003bf2:	604b      	str	r3, [r1, #4]
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f000 f82f 	bl	8003c58 <__malloc_unlock>
 8003bfa:	f104 000b 	add.w	r0, r4, #11
 8003bfe:	1d23      	adds	r3, r4, #4
 8003c00:	f020 0007 	bic.w	r0, r0, #7
 8003c04:	1ac2      	subs	r2, r0, r3
 8003c06:	bf1c      	itt	ne
 8003c08:	1a1b      	subne	r3, r3, r0
 8003c0a:	50a3      	strne	r3, [r4, r2]
 8003c0c:	e7af      	b.n	8003b6e <_malloc_r+0x22>
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	bf0c      	ite	eq
 8003c14:	f8c8 2000 	streq.w	r2, [r8]
 8003c18:	605a      	strne	r2, [r3, #4]
 8003c1a:	e7eb      	b.n	8003bf4 <_malloc_r+0xa8>
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	6864      	ldr	r4, [r4, #4]
 8003c20:	e7ae      	b.n	8003b80 <_malloc_r+0x34>
 8003c22:	463c      	mov	r4, r7
 8003c24:	687f      	ldr	r7, [r7, #4]
 8003c26:	e7b6      	b.n	8003b96 <_malloc_r+0x4a>
 8003c28:	461a      	mov	r2, r3
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d1fb      	bne.n	8003c28 <_malloc_r+0xdc>
 8003c30:	2300      	movs	r3, #0
 8003c32:	6053      	str	r3, [r2, #4]
 8003c34:	e7de      	b.n	8003bf4 <_malloc_r+0xa8>
 8003c36:	230c      	movs	r3, #12
 8003c38:	6033      	str	r3, [r6, #0]
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 f80c 	bl	8003c58 <__malloc_unlock>
 8003c40:	e794      	b.n	8003b6c <_malloc_r+0x20>
 8003c42:	6005      	str	r5, [r0, #0]
 8003c44:	e7d6      	b.n	8003bf4 <_malloc_r+0xa8>
 8003c46:	bf00      	nop
 8003c48:	20000a84 	.word	0x20000a84

08003c4c <__malloc_lock>:
 8003c4c:	4801      	ldr	r0, [pc, #4]	@ (8003c54 <__malloc_lock+0x8>)
 8003c4e:	f7ff bf01 	b.w	8003a54 <__retarget_lock_acquire_recursive>
 8003c52:	bf00      	nop
 8003c54:	20000a7c 	.word	0x20000a7c

08003c58 <__malloc_unlock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	@ (8003c60 <__malloc_unlock+0x8>)
 8003c5a:	f7ff befc 	b.w	8003a56 <__retarget_lock_release_recursive>
 8003c5e:	bf00      	nop
 8003c60:	20000a7c 	.word	0x20000a7c

08003c64 <__ssputs_r>:
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	688e      	ldr	r6, [r1, #8]
 8003c6a:	461f      	mov	r7, r3
 8003c6c:	42be      	cmp	r6, r7
 8003c6e:	680b      	ldr	r3, [r1, #0]
 8003c70:	4682      	mov	sl, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4690      	mov	r8, r2
 8003c76:	d82d      	bhi.n	8003cd4 <__ssputs_r+0x70>
 8003c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c80:	d026      	beq.n	8003cd0 <__ssputs_r+0x6c>
 8003c82:	6965      	ldr	r5, [r4, #20]
 8003c84:	6909      	ldr	r1, [r1, #16]
 8003c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c8a:	eba3 0901 	sub.w	r9, r3, r1
 8003c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c92:	1c7b      	adds	r3, r7, #1
 8003c94:	444b      	add	r3, r9
 8003c96:	106d      	asrs	r5, r5, #1
 8003c98:	429d      	cmp	r5, r3
 8003c9a:	bf38      	it	cc
 8003c9c:	461d      	movcc	r5, r3
 8003c9e:	0553      	lsls	r3, r2, #21
 8003ca0:	d527      	bpl.n	8003cf2 <__ssputs_r+0x8e>
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	f7ff ff52 	bl	8003b4c <_malloc_r>
 8003ca8:	4606      	mov	r6, r0
 8003caa:	b360      	cbz	r0, 8003d06 <__ssputs_r+0xa2>
 8003cac:	6921      	ldr	r1, [r4, #16]
 8003cae:	464a      	mov	r2, r9
 8003cb0:	f7ff fed2 	bl	8003a58 <memcpy>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	6126      	str	r6, [r4, #16]
 8003cc2:	6165      	str	r5, [r4, #20]
 8003cc4:	444e      	add	r6, r9
 8003cc6:	eba5 0509 	sub.w	r5, r5, r9
 8003cca:	6026      	str	r6, [r4, #0]
 8003ccc:	60a5      	str	r5, [r4, #8]
 8003cce:	463e      	mov	r6, r7
 8003cd0:	42be      	cmp	r6, r7
 8003cd2:	d900      	bls.n	8003cd6 <__ssputs_r+0x72>
 8003cd4:	463e      	mov	r6, r7
 8003cd6:	6820      	ldr	r0, [r4, #0]
 8003cd8:	4632      	mov	r2, r6
 8003cda:	4641      	mov	r1, r8
 8003cdc:	f000 faa8 	bl	8004230 <memmove>
 8003ce0:	68a3      	ldr	r3, [r4, #8]
 8003ce2:	1b9b      	subs	r3, r3, r6
 8003ce4:	60a3      	str	r3, [r4, #8]
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	4433      	add	r3, r6
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	2000      	movs	r0, #0
 8003cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	f000 fac6 	bl	8004284 <_realloc_r>
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d1e0      	bne.n	8003cc0 <__ssputs_r+0x5c>
 8003cfe:	6921      	ldr	r1, [r4, #16]
 8003d00:	4650      	mov	r0, sl
 8003d02:	f7ff feb7 	bl	8003a74 <_free_r>
 8003d06:	230c      	movs	r3, #12
 8003d08:	f8ca 3000 	str.w	r3, [sl]
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	e7e9      	b.n	8003cee <__ssputs_r+0x8a>
	...

08003d1c <_svfiprintf_r>:
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	4698      	mov	r8, r3
 8003d22:	898b      	ldrh	r3, [r1, #12]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	b09d      	sub	sp, #116	@ 0x74
 8003d28:	4607      	mov	r7, r0
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	d510      	bpl.n	8003d52 <_svfiprintf_r+0x36>
 8003d30:	690b      	ldr	r3, [r1, #16]
 8003d32:	b973      	cbnz	r3, 8003d52 <_svfiprintf_r+0x36>
 8003d34:	2140      	movs	r1, #64	@ 0x40
 8003d36:	f7ff ff09 	bl	8003b4c <_malloc_r>
 8003d3a:	6028      	str	r0, [r5, #0]
 8003d3c:	6128      	str	r0, [r5, #16]
 8003d3e:	b930      	cbnz	r0, 8003d4e <_svfiprintf_r+0x32>
 8003d40:	230c      	movs	r3, #12
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	b01d      	add	sp, #116	@ 0x74
 8003d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d4e:	2340      	movs	r3, #64	@ 0x40
 8003d50:	616b      	str	r3, [r5, #20]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d56:	2320      	movs	r3, #32
 8003d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d60:	2330      	movs	r3, #48	@ 0x30
 8003d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f00 <_svfiprintf_r+0x1e4>
 8003d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d6a:	f04f 0901 	mov.w	r9, #1
 8003d6e:	4623      	mov	r3, r4
 8003d70:	469a      	mov	sl, r3
 8003d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d76:	b10a      	cbz	r2, 8003d7c <_svfiprintf_r+0x60>
 8003d78:	2a25      	cmp	r2, #37	@ 0x25
 8003d7a:	d1f9      	bne.n	8003d70 <_svfiprintf_r+0x54>
 8003d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d80:	d00b      	beq.n	8003d9a <_svfiprintf_r+0x7e>
 8003d82:	465b      	mov	r3, fp
 8003d84:	4622      	mov	r2, r4
 8003d86:	4629      	mov	r1, r5
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f7ff ff6b 	bl	8003c64 <__ssputs_r>
 8003d8e:	3001      	adds	r0, #1
 8003d90:	f000 80a7 	beq.w	8003ee2 <_svfiprintf_r+0x1c6>
 8003d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d96:	445a      	add	r2, fp
 8003d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 809f 	beq.w	8003ee2 <_svfiprintf_r+0x1c6>
 8003da4:	2300      	movs	r3, #0
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dae:	f10a 0a01 	add.w	sl, sl, #1
 8003db2:	9304      	str	r3, [sp, #16]
 8003db4:	9307      	str	r3, [sp, #28]
 8003db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dbc:	4654      	mov	r4, sl
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc4:	484e      	ldr	r0, [pc, #312]	@ (8003f00 <_svfiprintf_r+0x1e4>)
 8003dc6:	f7fc fa2b 	bl	8000220 <memchr>
 8003dca:	9a04      	ldr	r2, [sp, #16]
 8003dcc:	b9d8      	cbnz	r0, 8003e06 <_svfiprintf_r+0xea>
 8003dce:	06d0      	lsls	r0, r2, #27
 8003dd0:	bf44      	itt	mi
 8003dd2:	2320      	movmi	r3, #32
 8003dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dd8:	0711      	lsls	r1, r2, #28
 8003dda:	bf44      	itt	mi
 8003ddc:	232b      	movmi	r3, #43	@ 0x2b
 8003dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003de2:	f89a 3000 	ldrb.w	r3, [sl]
 8003de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003de8:	d015      	beq.n	8003e16 <_svfiprintf_r+0xfa>
 8003dea:	9a07      	ldr	r2, [sp, #28]
 8003dec:	4654      	mov	r4, sl
 8003dee:	2000      	movs	r0, #0
 8003df0:	f04f 0c0a 	mov.w	ip, #10
 8003df4:	4621      	mov	r1, r4
 8003df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dfa:	3b30      	subs	r3, #48	@ 0x30
 8003dfc:	2b09      	cmp	r3, #9
 8003dfe:	d94b      	bls.n	8003e98 <_svfiprintf_r+0x17c>
 8003e00:	b1b0      	cbz	r0, 8003e30 <_svfiprintf_r+0x114>
 8003e02:	9207      	str	r2, [sp, #28]
 8003e04:	e014      	b.n	8003e30 <_svfiprintf_r+0x114>
 8003e06:	eba0 0308 	sub.w	r3, r0, r8
 8003e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	9304      	str	r3, [sp, #16]
 8003e12:	46a2      	mov	sl, r4
 8003e14:	e7d2      	b.n	8003dbc <_svfiprintf_r+0xa0>
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	1d19      	adds	r1, r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	9103      	str	r1, [sp, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bfbb      	ittet	lt
 8003e22:	425b      	neglt	r3, r3
 8003e24:	f042 0202 	orrlt.w	r2, r2, #2
 8003e28:	9307      	strge	r3, [sp, #28]
 8003e2a:	9307      	strlt	r3, [sp, #28]
 8003e2c:	bfb8      	it	lt
 8003e2e:	9204      	strlt	r2, [sp, #16]
 8003e30:	7823      	ldrb	r3, [r4, #0]
 8003e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e34:	d10a      	bne.n	8003e4c <_svfiprintf_r+0x130>
 8003e36:	7863      	ldrb	r3, [r4, #1]
 8003e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e3a:	d132      	bne.n	8003ea2 <_svfiprintf_r+0x186>
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	9203      	str	r2, [sp, #12]
 8003e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e48:	3402      	adds	r4, #2
 8003e4a:	9305      	str	r3, [sp, #20]
 8003e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f10 <_svfiprintf_r+0x1f4>
 8003e50:	7821      	ldrb	r1, [r4, #0]
 8003e52:	2203      	movs	r2, #3
 8003e54:	4650      	mov	r0, sl
 8003e56:	f7fc f9e3 	bl	8000220 <memchr>
 8003e5a:	b138      	cbz	r0, 8003e6c <_svfiprintf_r+0x150>
 8003e5c:	9b04      	ldr	r3, [sp, #16]
 8003e5e:	eba0 000a 	sub.w	r0, r0, sl
 8003e62:	2240      	movs	r2, #64	@ 0x40
 8003e64:	4082      	lsls	r2, r0
 8003e66:	4313      	orrs	r3, r2
 8003e68:	3401      	adds	r4, #1
 8003e6a:	9304      	str	r3, [sp, #16]
 8003e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e70:	4824      	ldr	r0, [pc, #144]	@ (8003f04 <_svfiprintf_r+0x1e8>)
 8003e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e76:	2206      	movs	r2, #6
 8003e78:	f7fc f9d2 	bl	8000220 <memchr>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	d036      	beq.n	8003eee <_svfiprintf_r+0x1d2>
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <_svfiprintf_r+0x1ec>)
 8003e82:	bb1b      	cbnz	r3, 8003ecc <_svfiprintf_r+0x1b0>
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	3307      	adds	r3, #7
 8003e88:	f023 0307 	bic.w	r3, r3, #7
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e92:	4433      	add	r3, r6
 8003e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e96:	e76a      	b.n	8003d6e <_svfiprintf_r+0x52>
 8003e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	e7a8      	b.n	8003df4 <_svfiprintf_r+0xd8>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	3401      	adds	r4, #1
 8003ea6:	9305      	str	r3, [sp, #20]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f04f 0c0a 	mov.w	ip, #10
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb4:	3a30      	subs	r2, #48	@ 0x30
 8003eb6:	2a09      	cmp	r2, #9
 8003eb8:	d903      	bls.n	8003ec2 <_svfiprintf_r+0x1a6>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0c6      	beq.n	8003e4c <_svfiprintf_r+0x130>
 8003ebe:	9105      	str	r1, [sp, #20]
 8003ec0:	e7c4      	b.n	8003e4c <_svfiprintf_r+0x130>
 8003ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e7f0      	b.n	8003eae <_svfiprintf_r+0x192>
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8003f0c <_svfiprintf_r+0x1f0>)
 8003ed4:	a904      	add	r1, sp, #16
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f3af 8000 	nop.w
 8003edc:	1c42      	adds	r2, r0, #1
 8003ede:	4606      	mov	r6, r0
 8003ee0:	d1d6      	bne.n	8003e90 <_svfiprintf_r+0x174>
 8003ee2:	89ab      	ldrh	r3, [r5, #12]
 8003ee4:	065b      	lsls	r3, r3, #25
 8003ee6:	f53f af2d 	bmi.w	8003d44 <_svfiprintf_r+0x28>
 8003eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eec:	e72c      	b.n	8003d48 <_svfiprintf_r+0x2c>
 8003eee:	ab03      	add	r3, sp, #12
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	462a      	mov	r2, r5
 8003ef4:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <_svfiprintf_r+0x1f0>)
 8003ef6:	a904      	add	r1, sp, #16
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f000 f879 	bl	8003ff0 <_printf_i>
 8003efe:	e7ed      	b.n	8003edc <_svfiprintf_r+0x1c0>
 8003f00:	080045d1 	.word	0x080045d1
 8003f04:	080045db 	.word	0x080045db
 8003f08:	00000000 	.word	0x00000000
 8003f0c:	08003c65 	.word	0x08003c65
 8003f10:	080045d7 	.word	0x080045d7

08003f14 <_printf_common>:
 8003f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	4616      	mov	r6, r2
 8003f1a:	4698      	mov	r8, r3
 8003f1c:	688a      	ldr	r2, [r1, #8]
 8003f1e:	690b      	ldr	r3, [r1, #16]
 8003f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f24:	4293      	cmp	r3, r2
 8003f26:	bfb8      	it	lt
 8003f28:	4613      	movlt	r3, r2
 8003f2a:	6033      	str	r3, [r6, #0]
 8003f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f30:	4607      	mov	r7, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	b10a      	cbz	r2, 8003f3a <_printf_common+0x26>
 8003f36:	3301      	adds	r3, #1
 8003f38:	6033      	str	r3, [r6, #0]
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	0699      	lsls	r1, r3, #26
 8003f3e:	bf42      	ittt	mi
 8003f40:	6833      	ldrmi	r3, [r6, #0]
 8003f42:	3302      	addmi	r3, #2
 8003f44:	6033      	strmi	r3, [r6, #0]
 8003f46:	6825      	ldr	r5, [r4, #0]
 8003f48:	f015 0506 	ands.w	r5, r5, #6
 8003f4c:	d106      	bne.n	8003f5c <_printf_common+0x48>
 8003f4e:	f104 0a19 	add.w	sl, r4, #25
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	6832      	ldr	r2, [r6, #0]
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	42ab      	cmp	r3, r5
 8003f5a:	dc26      	bgt.n	8003faa <_printf_common+0x96>
 8003f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	3b00      	subs	r3, #0
 8003f64:	bf18      	it	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	0692      	lsls	r2, r2, #26
 8003f6a:	d42b      	bmi.n	8003fc4 <_printf_common+0xb0>
 8003f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f70:	4641      	mov	r1, r8
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c8      	blx	r9
 8003f76:	3001      	adds	r0, #1
 8003f78:	d01e      	beq.n	8003fb8 <_printf_common+0xa4>
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	6922      	ldr	r2, [r4, #16]
 8003f7e:	f003 0306 	and.w	r3, r3, #6
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	bf02      	ittt	eq
 8003f86:	68e5      	ldreq	r5, [r4, #12]
 8003f88:	6833      	ldreq	r3, [r6, #0]
 8003f8a:	1aed      	subeq	r5, r5, r3
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	bf0c      	ite	eq
 8003f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f94:	2500      	movne	r5, #0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	bfc4      	itt	gt
 8003f9a:	1a9b      	subgt	r3, r3, r2
 8003f9c:	18ed      	addgt	r5, r5, r3
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	341a      	adds	r4, #26
 8003fa2:	42b5      	cmp	r5, r6
 8003fa4:	d11a      	bne.n	8003fdc <_printf_common+0xc8>
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e008      	b.n	8003fbc <_printf_common+0xa8>
 8003faa:	2301      	movs	r3, #1
 8003fac:	4652      	mov	r2, sl
 8003fae:	4641      	mov	r1, r8
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	47c8      	blx	r9
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d103      	bne.n	8003fc0 <_printf_common+0xac>
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	e7c6      	b.n	8003f52 <_printf_common+0x3e>
 8003fc4:	18e1      	adds	r1, r4, r3
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	2030      	movs	r0, #48	@ 0x30
 8003fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fce:	4422      	add	r2, r4
 8003fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fd8:	3302      	adds	r3, #2
 8003fda:	e7c7      	b.n	8003f6c <_printf_common+0x58>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	47c8      	blx	r9
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d0e6      	beq.n	8003fb8 <_printf_common+0xa4>
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7d9      	b.n	8003fa2 <_printf_common+0x8e>
	...

08003ff0 <_printf_i>:
 8003ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	7e0f      	ldrb	r7, [r1, #24]
 8003ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ff8:	2f78      	cmp	r7, #120	@ 0x78
 8003ffa:	4691      	mov	r9, r2
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	460c      	mov	r4, r1
 8004000:	469a      	mov	sl, r3
 8004002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004006:	d807      	bhi.n	8004018 <_printf_i+0x28>
 8004008:	2f62      	cmp	r7, #98	@ 0x62
 800400a:	d80a      	bhi.n	8004022 <_printf_i+0x32>
 800400c:	2f00      	cmp	r7, #0
 800400e:	f000 80d2 	beq.w	80041b6 <_printf_i+0x1c6>
 8004012:	2f58      	cmp	r7, #88	@ 0x58
 8004014:	f000 80b9 	beq.w	800418a <_printf_i+0x19a>
 8004018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800401c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004020:	e03a      	b.n	8004098 <_printf_i+0xa8>
 8004022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004026:	2b15      	cmp	r3, #21
 8004028:	d8f6      	bhi.n	8004018 <_printf_i+0x28>
 800402a:	a101      	add	r1, pc, #4	@ (adr r1, 8004030 <_printf_i+0x40>)
 800402c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004030:	08004089 	.word	0x08004089
 8004034:	0800409d 	.word	0x0800409d
 8004038:	08004019 	.word	0x08004019
 800403c:	08004019 	.word	0x08004019
 8004040:	08004019 	.word	0x08004019
 8004044:	08004019 	.word	0x08004019
 8004048:	0800409d 	.word	0x0800409d
 800404c:	08004019 	.word	0x08004019
 8004050:	08004019 	.word	0x08004019
 8004054:	08004019 	.word	0x08004019
 8004058:	08004019 	.word	0x08004019
 800405c:	0800419d 	.word	0x0800419d
 8004060:	080040c7 	.word	0x080040c7
 8004064:	08004157 	.word	0x08004157
 8004068:	08004019 	.word	0x08004019
 800406c:	08004019 	.word	0x08004019
 8004070:	080041bf 	.word	0x080041bf
 8004074:	08004019 	.word	0x08004019
 8004078:	080040c7 	.word	0x080040c7
 800407c:	08004019 	.word	0x08004019
 8004080:	08004019 	.word	0x08004019
 8004084:	0800415f 	.word	0x0800415f
 8004088:	6833      	ldr	r3, [r6, #0]
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6032      	str	r2, [r6, #0]
 8004090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004098:	2301      	movs	r3, #1
 800409a:	e09d      	b.n	80041d8 <_printf_i+0x1e8>
 800409c:	6833      	ldr	r3, [r6, #0]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1d19      	adds	r1, r3, #4
 80040a2:	6031      	str	r1, [r6, #0]
 80040a4:	0606      	lsls	r6, r0, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xbc>
 80040a8:	681d      	ldr	r5, [r3, #0]
 80040aa:	e003      	b.n	80040b4 <_printf_i+0xc4>
 80040ac:	0645      	lsls	r5, r0, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xb8>
 80040b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	da03      	bge.n	80040c0 <_printf_i+0xd0>
 80040b8:	232d      	movs	r3, #45	@ 0x2d
 80040ba:	426d      	negs	r5, r5
 80040bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c0:	4859      	ldr	r0, [pc, #356]	@ (8004228 <_printf_i+0x238>)
 80040c2:	230a      	movs	r3, #10
 80040c4:	e011      	b.n	80040ea <_printf_i+0xfa>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	0608      	lsls	r0, r1, #24
 80040cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80040d0:	d402      	bmi.n	80040d8 <_printf_i+0xe8>
 80040d2:	0649      	lsls	r1, r1, #25
 80040d4:	bf48      	it	mi
 80040d6:	b2ad      	uxthmi	r5, r5
 80040d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040da:	4853      	ldr	r0, [pc, #332]	@ (8004228 <_printf_i+0x238>)
 80040dc:	6033      	str	r3, [r6, #0]
 80040de:	bf14      	ite	ne
 80040e0:	230a      	movne	r3, #10
 80040e2:	2308      	moveq	r3, #8
 80040e4:	2100      	movs	r1, #0
 80040e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040ea:	6866      	ldr	r6, [r4, #4]
 80040ec:	60a6      	str	r6, [r4, #8]
 80040ee:	2e00      	cmp	r6, #0
 80040f0:	bfa2      	ittt	ge
 80040f2:	6821      	ldrge	r1, [r4, #0]
 80040f4:	f021 0104 	bicge.w	r1, r1, #4
 80040f8:	6021      	strge	r1, [r4, #0]
 80040fa:	b90d      	cbnz	r5, 8004100 <_printf_i+0x110>
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d04b      	beq.n	8004198 <_printf_i+0x1a8>
 8004100:	4616      	mov	r6, r2
 8004102:	fbb5 f1f3 	udiv	r1, r5, r3
 8004106:	fb03 5711 	mls	r7, r3, r1, r5
 800410a:	5dc7      	ldrb	r7, [r0, r7]
 800410c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004110:	462f      	mov	r7, r5
 8004112:	42bb      	cmp	r3, r7
 8004114:	460d      	mov	r5, r1
 8004116:	d9f4      	bls.n	8004102 <_printf_i+0x112>
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10b      	bne.n	8004134 <_printf_i+0x144>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	07df      	lsls	r7, r3, #31
 8004120:	d508      	bpl.n	8004134 <_printf_i+0x144>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	6861      	ldr	r1, [r4, #4]
 8004126:	4299      	cmp	r1, r3
 8004128:	bfde      	ittt	le
 800412a:	2330      	movle	r3, #48	@ 0x30
 800412c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004130:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004134:	1b92      	subs	r2, r2, r6
 8004136:	6122      	str	r2, [r4, #16]
 8004138:	f8cd a000 	str.w	sl, [sp]
 800413c:	464b      	mov	r3, r9
 800413e:	aa03      	add	r2, sp, #12
 8004140:	4621      	mov	r1, r4
 8004142:	4640      	mov	r0, r8
 8004144:	f7ff fee6 	bl	8003f14 <_printf_common>
 8004148:	3001      	adds	r0, #1
 800414a:	d14a      	bne.n	80041e2 <_printf_i+0x1f2>
 800414c:	f04f 30ff 	mov.w	r0, #4294967295
 8004150:	b004      	add	sp, #16
 8004152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	f043 0320 	orr.w	r3, r3, #32
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	4833      	ldr	r0, [pc, #204]	@ (800422c <_printf_i+0x23c>)
 8004160:	2778      	movs	r7, #120	@ 0x78
 8004162:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	6831      	ldr	r1, [r6, #0]
 800416a:	061f      	lsls	r7, r3, #24
 800416c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004170:	d402      	bmi.n	8004178 <_printf_i+0x188>
 8004172:	065f      	lsls	r7, r3, #25
 8004174:	bf48      	it	mi
 8004176:	b2ad      	uxthmi	r5, r5
 8004178:	6031      	str	r1, [r6, #0]
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	bf44      	itt	mi
 800417e:	f043 0320 	orrmi.w	r3, r3, #32
 8004182:	6023      	strmi	r3, [r4, #0]
 8004184:	b11d      	cbz	r5, 800418e <_printf_i+0x19e>
 8004186:	2310      	movs	r3, #16
 8004188:	e7ac      	b.n	80040e4 <_printf_i+0xf4>
 800418a:	4827      	ldr	r0, [pc, #156]	@ (8004228 <_printf_i+0x238>)
 800418c:	e7e9      	b.n	8004162 <_printf_i+0x172>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	f023 0320 	bic.w	r3, r3, #32
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	e7f6      	b.n	8004186 <_printf_i+0x196>
 8004198:	4616      	mov	r6, r2
 800419a:	e7bd      	b.n	8004118 <_printf_i+0x128>
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	6825      	ldr	r5, [r4, #0]
 80041a0:	6961      	ldr	r1, [r4, #20]
 80041a2:	1d18      	adds	r0, r3, #4
 80041a4:	6030      	str	r0, [r6, #0]
 80041a6:	062e      	lsls	r6, r5, #24
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	d501      	bpl.n	80041b0 <_printf_i+0x1c0>
 80041ac:	6019      	str	r1, [r3, #0]
 80041ae:	e002      	b.n	80041b6 <_printf_i+0x1c6>
 80041b0:	0668      	lsls	r0, r5, #25
 80041b2:	d5fb      	bpl.n	80041ac <_printf_i+0x1bc>
 80041b4:	8019      	strh	r1, [r3, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6123      	str	r3, [r4, #16]
 80041ba:	4616      	mov	r6, r2
 80041bc:	e7bc      	b.n	8004138 <_printf_i+0x148>
 80041be:	6833      	ldr	r3, [r6, #0]
 80041c0:	1d1a      	adds	r2, r3, #4
 80041c2:	6032      	str	r2, [r6, #0]
 80041c4:	681e      	ldr	r6, [r3, #0]
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	2100      	movs	r1, #0
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7fc f828 	bl	8000220 <memchr>
 80041d0:	b108      	cbz	r0, 80041d6 <_printf_i+0x1e6>
 80041d2:	1b80      	subs	r0, r0, r6
 80041d4:	6060      	str	r0, [r4, #4]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	6123      	str	r3, [r4, #16]
 80041da:	2300      	movs	r3, #0
 80041dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e0:	e7aa      	b.n	8004138 <_printf_i+0x148>
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	4632      	mov	r2, r6
 80041e6:	4649      	mov	r1, r9
 80041e8:	4640      	mov	r0, r8
 80041ea:	47d0      	blx	sl
 80041ec:	3001      	adds	r0, #1
 80041ee:	d0ad      	beq.n	800414c <_printf_i+0x15c>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	079b      	lsls	r3, r3, #30
 80041f4:	d413      	bmi.n	800421e <_printf_i+0x22e>
 80041f6:	68e0      	ldr	r0, [r4, #12]
 80041f8:	9b03      	ldr	r3, [sp, #12]
 80041fa:	4298      	cmp	r0, r3
 80041fc:	bfb8      	it	lt
 80041fe:	4618      	movlt	r0, r3
 8004200:	e7a6      	b.n	8004150 <_printf_i+0x160>
 8004202:	2301      	movs	r3, #1
 8004204:	4632      	mov	r2, r6
 8004206:	4649      	mov	r1, r9
 8004208:	4640      	mov	r0, r8
 800420a:	47d0      	blx	sl
 800420c:	3001      	adds	r0, #1
 800420e:	d09d      	beq.n	800414c <_printf_i+0x15c>
 8004210:	3501      	adds	r5, #1
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	9903      	ldr	r1, [sp, #12]
 8004216:	1a5b      	subs	r3, r3, r1
 8004218:	42ab      	cmp	r3, r5
 800421a:	dcf2      	bgt.n	8004202 <_printf_i+0x212>
 800421c:	e7eb      	b.n	80041f6 <_printf_i+0x206>
 800421e:	2500      	movs	r5, #0
 8004220:	f104 0619 	add.w	r6, r4, #25
 8004224:	e7f5      	b.n	8004212 <_printf_i+0x222>
 8004226:	bf00      	nop
 8004228:	080045e2 	.word	0x080045e2
 800422c:	080045f3 	.word	0x080045f3

08004230 <memmove>:
 8004230:	4288      	cmp	r0, r1
 8004232:	b510      	push	{r4, lr}
 8004234:	eb01 0402 	add.w	r4, r1, r2
 8004238:	d902      	bls.n	8004240 <memmove+0x10>
 800423a:	4284      	cmp	r4, r0
 800423c:	4623      	mov	r3, r4
 800423e:	d807      	bhi.n	8004250 <memmove+0x20>
 8004240:	1e43      	subs	r3, r0, #1
 8004242:	42a1      	cmp	r1, r4
 8004244:	d008      	beq.n	8004258 <memmove+0x28>
 8004246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800424a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800424e:	e7f8      	b.n	8004242 <memmove+0x12>
 8004250:	4402      	add	r2, r0
 8004252:	4601      	mov	r1, r0
 8004254:	428a      	cmp	r2, r1
 8004256:	d100      	bne.n	800425a <memmove+0x2a>
 8004258:	bd10      	pop	{r4, pc}
 800425a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800425e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004262:	e7f7      	b.n	8004254 <memmove+0x24>

08004264 <_sbrk_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d06      	ldr	r5, [pc, #24]	@ (8004280 <_sbrk_r+0x1c>)
 8004268:	2300      	movs	r3, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f7fd f8b8 	bl	80013e4 <_sbrk>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_sbrk_r+0x1a>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_sbrk_r+0x1a>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	20000a78 	.word	0x20000a78

08004284 <_realloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	4680      	mov	r8, r0
 800428a:	4615      	mov	r5, r2
 800428c:	460c      	mov	r4, r1
 800428e:	b921      	cbnz	r1, 800429a <_realloc_r+0x16>
 8004290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004294:	4611      	mov	r1, r2
 8004296:	f7ff bc59 	b.w	8003b4c <_malloc_r>
 800429a:	b92a      	cbnz	r2, 80042a8 <_realloc_r+0x24>
 800429c:	f7ff fbea 	bl	8003a74 <_free_r>
 80042a0:	2400      	movs	r4, #0
 80042a2:	4620      	mov	r0, r4
 80042a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a8:	f000 f81a 	bl	80042e0 <_malloc_usable_size_r>
 80042ac:	4285      	cmp	r5, r0
 80042ae:	4606      	mov	r6, r0
 80042b0:	d802      	bhi.n	80042b8 <_realloc_r+0x34>
 80042b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042b6:	d8f4      	bhi.n	80042a2 <_realloc_r+0x1e>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7ff fc46 	bl	8003b4c <_malloc_r>
 80042c0:	4607      	mov	r7, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d0ec      	beq.n	80042a0 <_realloc_r+0x1c>
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	462a      	mov	r2, r5
 80042ca:	4621      	mov	r1, r4
 80042cc:	bf28      	it	cs
 80042ce:	4632      	movcs	r2, r6
 80042d0:	f7ff fbc2 	bl	8003a58 <memcpy>
 80042d4:	4621      	mov	r1, r4
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7ff fbcc 	bl	8003a74 <_free_r>
 80042dc:	463c      	mov	r4, r7
 80042de:	e7e0      	b.n	80042a2 <_realloc_r+0x1e>

080042e0 <_malloc_usable_size_r>:
 80042e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e4:	1f18      	subs	r0, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfbc      	itt	lt
 80042ea:	580b      	ldrlt	r3, [r1, r0]
 80042ec:	18c0      	addlt	r0, r0, r3
 80042ee:	4770      	bx	lr

080042f0 <_init>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr

080042fc <_fini>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr
