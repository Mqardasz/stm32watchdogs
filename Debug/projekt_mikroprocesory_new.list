
projekt_mikroprocesory_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f20  08004f20  00006260  2**0
                  CONTENTS
  4 .ARM          00000008  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f28  08004f28  00006260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00005f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  08004f30  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000260  08005190  00006260  2**2
                  ALLOC
 10 .noinit       00000001  20000ac0  08005190  00006ac0  2**0
                  ALLOC
 11 ._user_heap_stack 00000607  20000ac1  08005190  00006ac1  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b678  00000000  00000000  00006290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d5  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  00013be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006df  00000000  00000000  000144f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220eb  00000000  00000000  00014bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9a2  00000000  00000000  00036cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9b0b  00000000  00000000  0004465c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e167  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002858  00000000  00000000  0010e1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00110a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000260 	.word	0x20000260
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c90 	.word	0x08004c90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000264 	.word	0x20000264
 800020c:	08004c90 	.word	0x08004c90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <byteStuffing>:
	{"WGET", executeWGET}, // pobierz konfiguracje
	{"WCNT", executeWCNT}, // pobierz liczbę odświeżeń
};

// formatowanie ramki do wysyłki jako ciąg znaków
uint8_t byteStuffing(uint8_t *input, size_t input_len, uint8_t *output) {
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
    size_t j = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
    output[0] = '~';
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	227e      	movs	r2, #126	@ 0x7e
 80005b4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 1; i < input_len; i++) {
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	e04b      	b.n	8000654 <byteStuffing+0xb4>
        if (input[i] == ESCAPE_CHAR) {
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b7d      	cmp	r3, #125	@ 0x7d
 80005c6:	d10e      	bne.n	80005e6 <byteStuffing+0x46>
            output[j++] = ESCAPE_CHAR;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	617a      	str	r2, [r7, #20]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	227d      	movs	r2, #125	@ 0x7d
 80005d4:	701a      	strb	r2, [r3, #0]
            output[j++] = ']';
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	617a      	str	r2, [r7, #20]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	225d      	movs	r2, #93	@ 0x5d
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e033      	b.n	800064e <byteStuffing+0xae>
        } else if (input[i] == '~') {
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80005f0:	d10e      	bne.n	8000610 <byteStuffing+0x70>
            output[j++] = ESCAPE_CHAR;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	617a      	str	r2, [r7, #20]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	4413      	add	r3, r2
 80005fc:	227d      	movs	r2, #125	@ 0x7d
 80005fe:	701a      	strb	r2, [r3, #0]
            output[j++] = '^';
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	617a      	str	r2, [r7, #20]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	225e      	movs	r2, #94	@ 0x5e
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e01e      	b.n	800064e <byteStuffing+0xae>
        } else if (input[i] == '`') {
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b60      	cmp	r3, #96	@ 0x60
 800061a:	d10e      	bne.n	800063a <byteStuffing+0x9a>
            output[j++] = ESCAPE_CHAR;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	617a      	str	r2, [r7, #20]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	227d      	movs	r2, #125	@ 0x7d
 8000628:	701a      	strb	r2, [r3, #0]
            output[j++] = '&';
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	617a      	str	r2, [r7, #20]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2226      	movs	r2, #38	@ 0x26
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e009      	b.n	800064e <byteStuffing+0xae>
        } else {
            output[j++] = input[i];
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	441a      	add	r2, r3
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	1c59      	adds	r1, r3, #1
 8000644:	6179      	str	r1, [r7, #20]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	440b      	add	r3, r1
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 1; i < input_len; i++) {
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	3301      	adds	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3af      	bcc.n	80005bc <byteStuffing+0x1c>
        }
    }
    output[j++] = '`';
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	617a      	str	r2, [r7, #20]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	2260      	movs	r2, #96	@ 0x60
 8000668:	701a      	strb	r2, [r3, #0]
    return j;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	b2db      	uxtb	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	371c      	adds	r7, #28
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <calculate_crc16>:
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

void calculate_crc16(uint8_t *data, size_t length, char crc_out[2]) {
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	@ 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0xFFFF; // wartość inicjująca
 8000688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800068c:	83fb      	strh	r3, [r7, #30]

    for (size_t i = 0; i < length; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	e019      	b.n	80006c8 <calculate_crc16+0x4c>
        uint8_t byte = data[i];
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	75fb      	strb	r3, [r7, #23]
        uint8_t table_index = (crc >> 8) ^ byte; // oblicz indeks tablicy
 800069e:	8bfb      	ldrh	r3, [r7, #30]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	4053      	eors	r3, r2
 80006aa:	75bb      	strb	r3, [r7, #22]
        crc = (crc << 8) ^ crc16_table[table_index]; // zaktualizuj crc uzywajac wartosci stablicowanej
 80006ac:	8bfb      	ldrh	r3, [r7, #30]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	7dbb      	ldrb	r3, [r7, #22]
 80006b4:	490f      	ldr	r1, [pc, #60]	@ (80006f4 <calculate_crc16+0x78>)
 80006b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4053      	eors	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	83fb      	strh	r3, [r7, #30]
    for (size_t i = 0; i < length; i++) {
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	3301      	adds	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3e1      	bcc.n	8000694 <calculate_crc16+0x18>
    }
    crc_out[0] = (char)((crc >> 8) & 0xFF); // bajt po lewej
 80006d0:	8bfb      	ldrh	r3, [r7, #30]
 80006d2:	0a1b      	lsrs	r3, r3, #8
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	701a      	strb	r2, [r3, #0]
    crc_out[1] = (char)(crc & 0xFF);        // bajt po prawej
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	8bfa      	ldrh	r2, [r7, #30]
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	3724      	adds	r7, #36	@ 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000000 	.word	0x20000000

080006f8 <checkFrame>:

// funkcja dekodująca ramkę i sprawdzająca jej poprawność
bool checkFrame(char *bx, Frame *frame, uint8_t len) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4613      	mov	r3, r2
 8000704:	71fb      	strb	r3, [r7, #7]
	char ownCrc[2];
	char incCrc[2];
    if(len >= MIN_DECODED_RAW_FRAME_LEN && len <= MAX_DECODED_RAW_FRAME_LEN) {
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d959      	bls.n	80007c0 <checkFrame+0xc8>
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b40      	cmp	r3, #64	@ 0x40
 8000710:	d856      	bhi.n	80007c0 <checkFrame+0xc8>
    	uint8_t k = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	76fb      	strb	r3, [r7, #27]
    	frame->sender_address = bx[k++];						// kopiujemy nadawce do struktury
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	76fa      	strb	r2, [r7, #27]
 800071c:	461a      	mov	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	701a      	strb	r2, [r3, #0]
    	frame->receiver_address = bx[k++];						// kopiujemy odbiorce do struktury
 8000728:	7efb      	ldrb	r3, [r7, #27]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	76fa      	strb	r2, [r7, #27]
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4413      	add	r3, r2
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	705a      	strb	r2, [r3, #1]
    	memcpy(frame->command, &bx[k],COMMAND_LEN);				// kopiujemy komende do struktury
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3302      	adds	r3, #2
 800073e:	7efa      	ldrb	r2, [r7, #27]
 8000740:	68f9      	ldr	r1, [r7, #12]
 8000742:	440a      	add	r2, r1
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	601a      	str	r2, [r3, #0]
    	k += COMMAND_LEN;
 8000748:	7efb      	ldrb	r3, [r7, #27]
 800074a:	3304      	adds	r3, #4
 800074c:	76fb      	strb	r3, [r7, #27]
    	uint8_t data_len = len - MIN_DECODED_RAW_FRAME_LEN;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	3b08      	subs	r3, #8
 8000752:	76bb      	strb	r3, [r7, #26]
    	if(data_len != 0) {											// wyliczamy długość danych
 8000754:	7ebb      	ldrb	r3, [r7, #26]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d008      	beq.n	800076c <checkFrame+0x74>
    	    memcpy(frame->data, &bx[k],data_len);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	1d98      	adds	r0, r3, #6
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	4413      	add	r3, r2
 8000764:	7eba      	ldrb	r2, [r7, #26]
 8000766:	4619      	mov	r1, r3
 8000768:	f003 fe46 	bl	80043f8 <memcpy>
    	}
    	k += data_len;
 800076c:	7efa      	ldrb	r2, [r7, #27]
 800076e:	7ebb      	ldrb	r3, [r7, #26]
 8000770:	4413      	add	r3, r2
 8000772:	76fb      	strb	r3, [r7, #27]
    	memcpy(incCrc, &bx[k], 2);								// kopiujemy crc do tablicy
 8000774:	7efb      	ldrb	r3, [r7, #27]
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	4413      	add	r3, r2
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	82bb      	strh	r3, [r7, #20]
    	calculate_crc16((uint8_t *)frame, k, ownCrc);
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	f107 0218 	add.w	r2, r7, #24
 8000786:	4619      	mov	r1, r3
 8000788:	68b8      	ldr	r0, [r7, #8]
 800078a:	f7ff ff77 	bl	800067c <calculate_crc16>
    	for (int l = 0; l < 2; l++) {
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e010      	b.n	80007b6 <checkFrame+0xbe>
    		if(ownCrc[l] != incCrc[l]) {
 8000794:	f107 0218 	add.w	r2, r7, #24
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	4413      	add	r3, r2
 800079c:	781a      	ldrb	r2, [r3, #0]
 800079e:	f107 0114 	add.w	r1, r7, #20
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	440b      	add	r3, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d001      	beq.n	80007b0 <checkFrame+0xb8>
    			return false;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e008      	b.n	80007c2 <checkFrame+0xca>
    	for (int l = 0; l < 2; l++) {
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	3301      	adds	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	ddeb      	ble.n	8000794 <checkFrame+0x9c>
    		}
    	}
    	return true; // crc zostalo pomyslnie porownanie
 80007bc:	2301      	movs	r3, #1
 80007be:	e000      	b.n	80007c2 <checkFrame+0xca>
    }
    return false; // ramka niepoprawna
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <sendFrame>:

void sendFrame(char *command, char *data, uint8_t data_len) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b0b8      	sub	sp, #224	@ 0xe0
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71fb      	strb	r3, [r7, #7]
	char ownCrc[2] = {0};
 80007d8:	2300      	movs	r3, #0
 80007da:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	char bx_send[66] = {0};
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80007e4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80007e8:	223e      	movs	r2, #62	@ 0x3e
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fdbd 	bl	800436c <memset>
	bx_send[0] = '~';
 80007f2:	237e      	movs	r3, #126	@ 0x7e
 80007f4:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	bx_send[1] = 'S';
 80007f8:	2353      	movs	r3, #83	@ 0x53
 80007fa:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
	bx_send[2] = 'C';
 80007fe:	2343      	movs	r3, #67	@ 0x43
 8000800:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	char stuffed_frame[126] = {0};
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	227a      	movs	r2, #122	@ 0x7a
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fdab 	bl	800436c <memset>
	uint8_t i , j, k;
	for(i = 0; i < COMMAND_LEN; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800081c:	e010      	b.n	8000840 <sendFrame+0x76>
		bx_send[3 + i] = command[i];
 800081e:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	441a      	add	r2, r3
 8000826:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800082a:	3303      	adds	r3, #3
 800082c:	7812      	ldrb	r2, [r2, #0]
 800082e:	33e0      	adds	r3, #224	@ 0xe0
 8000830:	443b      	add	r3, r7
 8000832:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(i = 0; i < COMMAND_LEN; i++) {
 8000836:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800083a:	3301      	adds	r3, #1
 800083c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8000840:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8000844:	2b03      	cmp	r3, #3
 8000846:	d9ea      	bls.n	800081e <sendFrame+0x54>
	}
	for(j = 0; j < data_len; j++) {
 8000848:	2300      	movs	r3, #0
 800084a:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 800084e:	e013      	b.n	8000878 <sendFrame+0xae>
		bx_send[3 + i + j] = data[j];
 8000850:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	441a      	add	r2, r3
 8000858:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800085c:	1cd9      	adds	r1, r3, #3
 800085e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8000862:	440b      	add	r3, r1
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	33e0      	adds	r3, #224	@ 0xe0
 8000868:	443b      	add	r3, r7
 800086a:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(j = 0; j < data_len; j++) {
 800086e:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8000872:	3301      	adds	r3, #1
 8000874:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 8000878:	f897 20de 	ldrb.w	r2, [r7, #222]	@ 0xde
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	429a      	cmp	r2, r3
 8000880:	d3e6      	bcc.n	8000850 <sendFrame+0x86>
	}
	uint8_t len = 3 + i + j;
 8000882:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 8000886:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 800088a:	4413      	add	r3, r2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	3303      	adds	r3, #3
 8000890:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
	calculate_crc16((uint8_t *)bx_send, len, ownCrc);
 8000894:	f897 10dc 	ldrb.w	r1, [r7, #220]	@ 0xdc
 8000898:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 800089c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff feeb 	bl	800067c <calculate_crc16>
	for(k = 0; k < 2; k++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 80008ac:	e013      	b.n	80008d6 <sendFrame+0x10c>
		bx_send[len + k] = ownCrc[k];
 80008ae:	f897 20dd 	ldrb.w	r2, [r7, #221]	@ 0xdd
 80008b2:	f897 10dc 	ldrb.w	r1, [r7, #220]	@ 0xdc
 80008b6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80008ba:	440b      	add	r3, r1
 80008bc:	32e0      	adds	r2, #224	@ 0xe0
 80008be:	443a      	add	r2, r7
 80008c0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80008c4:	33e0      	adds	r3, #224	@ 0xe0
 80008c6:	443b      	add	r3, r7
 80008c8:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for(k = 0; k < 2; k++) {
 80008cc:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80008d0:	3301      	adds	r3, #1
 80008d2:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 80008d6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d9e7      	bls.n	80008ae <sendFrame+0xe4>
	}
	len = len + k;
 80008de:	f897 20dc 	ldrb.w	r2, [r7, #220]	@ 0xdc
 80008e2:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 80008e6:	4413      	add	r3, r2
 80008e8:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
	 uint8_t stuffed_len = byteStuffing(bx_send, len, stuffed_frame);
 80008ec:	f897 10dc 	ldrb.w	r1, [r7, #220]	@ 0xdc
 80008f0:	f107 0214 	add.w	r2, r7, #20
 80008f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe51 	bl	80005a0 <byteStuffing>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
	 if (stuffed_len >= 10 && stuffed_len <= 128) {
 8000904:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000908:	2b09      	cmp	r3, #9
 800090a:	d912      	bls.n	8000932 <sendFrame+0x168>
 800090c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000910:	2b80      	cmp	r3, #128	@ 0x80
 8000912:	d80e      	bhi.n	8000932 <sendFrame+0x168>
	 stuffed_frame[stuffed_len] = '`';
 8000914:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8000918:	33e0      	adds	r3, #224	@ 0xe0
 800091a:	443b      	add	r3, r7
 800091c:	2260      	movs	r2, #96	@ 0x60
 800091e:	f803 2ccc 	strb.w	r2, [r3, #-204]
	 USART_fsend_frame(stuffed_frame, stuffed_len);
 8000922:	f897 20db 	ldrb.w	r2, [r7, #219]	@ 0xdb
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff01 	bl	8001734 <USART_fsend_frame>
	 }
}
 8000932:	bf00      	nop
 8000934:	37e0      	adds	r7, #224	@ 0xe0
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <handleCommand>:

void handleCommand(Frame *frame, uint8_t len) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
    uint8_t data_len = len - MIN_DECODED_RAW_FRAME_LEN;
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	3b08      	subs	r3, #8
 800094c:	72fb      	strb	r3, [r7, #11]
    for (int i = 0; i < 16; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e019      	b.n	8000988 <handleCommand+0x4c>
        if (strncmp(frame->command, commandTable[i].command, COMMAND_LEN) == 0) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1c98      	adds	r0, r3, #2
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <handleCommand+0x58>)
 800095e:	4413      	add	r3, r2
 8000960:	2204      	movs	r2, #4
 8000962:	4619      	mov	r1, r3
 8000964:	f003 fd0a 	bl	800437c <strncmp>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d109      	bne.n	8000982 <handleCommand+0x46>
            commandTable[i].function(frame, data_len); // Wywołaj przypisaną funkcję
 800096e:	4a09      	ldr	r2, [pc, #36]	@ (8000994 <handleCommand+0x58>)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	4413      	add	r3, r2
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	7afa      	ldrb	r2, [r7, #11]
 800097a:	4611      	mov	r1, r2
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	4798      	blx	r3
            return;
 8000980:	e005      	b.n	800098e <handleCommand+0x52>
    for (int i = 0; i < 16; i++) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	dde2      	ble.n	8000954 <handleCommand+0x18>
        }
    }
}
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08004e54 	.word	0x08004e54

08000998 <executeILSI>:

// KOMENDY DO IWDG

void executeILSI(Frame *frame) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    RCC->CSR |= RCC_CSR_LSION; // włączamy LSI
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <executeILSI+0x4c>)
 80009a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <executeILSI+0x4c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6753      	str	r3, [r2, #116]	@ 0x74

    while (!(RCC->CSR & RCC_CSR_LSIRDY)); // czekamy na stabilizacje
 80009ac:	bf00      	nop
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <executeILSI+0x4c>)
 80009b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <executeILSI+0x16>
    isLSI = true;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <executeILSI+0x50>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
    // WYSYŁAMY KOMUNIKAT
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3302      	adds	r3, #2
 80009c4:	2204      	movs	r2, #4
 80009c6:	4909      	ldr	r1, [pc, #36]	@ (80009ec <executeILSI+0x54>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fd15 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3302      	adds	r3, #2
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fef7 	bl	80007ca <sendFrame>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	20000283 	.word	0x20000283
 80009ec:	08004ca8 	.word	0x08004ca8

080009f0 <executeIPRE>:

void executeIPRE(Frame *frame, uint8_t len) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
    if (len == 0) {
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d116      	bne.n	8000a30 <executeIPRE+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3302      	adds	r3, #2
 8000a06:	2204      	movs	r2, #4
 8000a08:	4957      	ldr	r1, [pc, #348]	@ (8000b68 <executeIPRE+0x178>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fcf4 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc preskaler", 21);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3306      	adds	r3, #6
 8000a14:	2215      	movs	r2, #21
 8000a16:	4955      	ldr	r1, [pc, #340]	@ (8000b6c <executeIPRE+0x17c>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fced 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 21);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	1c98      	adds	r0, r3, #2
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3306      	adds	r3, #6
 8000a26:	2215      	movs	r2, #21
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f7ff fece 	bl	80007ca <sendFrame>
        return;
 8000a2e:	e098      	b.n	8000b62 <executeIPRE+0x172>
    }
    IWDG->KR = 0x00005555u; // to odblokowuje konfiguracje KR
 8000a30:	4b4f      	ldr	r3, [pc, #316]	@ (8000b70 <executeIPRE+0x180>)
 8000a32:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000a36:	601a      	str	r2, [r3, #0]
    prescaler = 0;
 8000a38:	4b4e      	ldr	r3, [pc, #312]	@ (8000b74 <executeIPRE+0x184>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	801a      	strh	r2, [r3, #0]
    if (len == 1) {
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d105      	bne.n	8000a50 <executeIPRE+0x60>
        prescaler = frame->data[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	799b      	ldrb	r3, [r3, #6]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b74 <executeIPRE+0x184>)
 8000a4c:	801a      	strh	r2, [r3, #0]
 8000a4e:	e00e      	b.n	8000a6e <executeIPRE+0x7e>
    } else if (len == 2) {
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d10b      	bne.n	8000a6e <executeIPRE+0x7e>
        prescaler = (frame->data[0] << 8) | frame->data[1];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	799b      	ldrb	r3, [r3, #6]
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	79db      	ldrb	r3, [r3, #7]
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <executeIPRE+0x184>)
 8000a6c:	801a      	strh	r2, [r3, #0]
    }
    if (prescaler == 4 || prescaler == 8 || prescaler == 16 || prescaler == 32 ||
 8000a6e:	4b41      	ldr	r3, [pc, #260]	@ (8000b74 <executeIPRE+0x184>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d01e      	beq.n	8000ab6 <executeIPRE+0xc6>
 8000a78:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <executeIPRE+0x184>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d019      	beq.n	8000ab6 <executeIPRE+0xc6>
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <executeIPRE+0x184>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2b10      	cmp	r3, #16
 8000a8a:	d014      	beq.n	8000ab6 <executeIPRE+0xc6>
 8000a8c:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <executeIPRE+0x184>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	2b20      	cmp	r3, #32
 8000a94:	d00f      	beq.n	8000ab6 <executeIPRE+0xc6>
        prescaler == 64 || prescaler == 128 || prescaler == 256) {
 8000a96:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <executeIPRE+0x184>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	b29b      	uxth	r3, r3
    if (prescaler == 4 || prescaler == 8 || prescaler == 16 || prescaler == 32 ||
 8000a9c:	2b40      	cmp	r3, #64	@ 0x40
 8000a9e:	d00a      	beq.n	8000ab6 <executeIPRE+0xc6>
        prescaler == 64 || prescaler == 128 || prescaler == 256) {
 8000aa0:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <executeIPRE+0x184>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	@ 0x80
 8000aa8:	d005      	beq.n	8000ab6 <executeIPRE+0xc6>
 8000aaa:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <executeIPRE+0x184>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab4:	d13e      	bne.n	8000b34 <executeIPRE+0x144>
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <executeIPRE+0x184>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d024      	beq.n	8000b0a <executeIPRE+0x11a>
                   (prescaler == 8)   ? 1 :
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <executeIPRE+0x184>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d01d      	beq.n	8000b06 <executeIPRE+0x116>
                   (prescaler == 16)  ? 2 :
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <executeIPRE+0x184>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b29b      	uxth	r3, r3
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d016      	beq.n	8000b02 <executeIPRE+0x112>
                   (prescaler == 32)  ? 3 :
 8000ad4:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <executeIPRE+0x184>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d00f      	beq.n	8000afe <executeIPRE+0x10e>
                   (prescaler == 64)  ? 4 :
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <executeIPRE+0x184>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b29b      	uxth	r3, r3
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000ae4:	2b40      	cmp	r3, #64	@ 0x40
 8000ae6:	d008      	beq.n	8000afa <executeIPRE+0x10a>
                   (prescaler == 128) ? 5 : 6; // mapujemy wartości na to co trzeba przekazać do rejerstru
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <executeIPRE+0x184>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
        IWDG->PR = (prescaler == 4)   ? 0 : // skrocone instrukcje if,
 8000aee:	2b80      	cmp	r3, #128	@ 0x80
 8000af0:	d101      	bne.n	8000af6 <executeIPRE+0x106>
 8000af2:	2305      	movs	r3, #5
 8000af4:	e00a      	b.n	8000b0c <executeIPRE+0x11c>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e008      	b.n	8000b0c <executeIPRE+0x11c>
 8000afa:	2304      	movs	r3, #4
 8000afc:	e006      	b.n	8000b0c <executeIPRE+0x11c>
 8000afe:	2303      	movs	r3, #3
 8000b00:	e004      	b.n	8000b0c <executeIPRE+0x11c>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e002      	b.n	8000b0c <executeIPRE+0x11c>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <executeIPRE+0x11c>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <executeIPRE+0x180>)
 8000b0e:	6053      	str	r3, [r2, #4]
        memcpy(frame->command, "FAIL", COMMAND_LEN);
        memcpy(frame->data, "zla wartosc preskaler", 21);
        sendFrame(frame->command, frame->data, 21);
        return;
    }
    isPrescaler = true;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <executeIPRE+0x188>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3302      	adds	r3, #2
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4917      	ldr	r1, [pc, #92]	@ (8000b7c <executeIPRE+0x18c>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fc6a 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe4c 	bl	80007ca <sendFrame>
 8000b32:	e016      	b.n	8000b62 <executeIPRE+0x172>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3302      	adds	r3, #2
 8000b38:	2204      	movs	r2, #4
 8000b3a:	490b      	ldr	r1, [pc, #44]	@ (8000b68 <executeIPRE+0x178>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fc5b 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc preskaler", 21);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3306      	adds	r3, #6
 8000b46:	2215      	movs	r2, #21
 8000b48:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <executeIPRE+0x17c>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fc54 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 21);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1c98      	adds	r0, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3306      	adds	r3, #6
 8000b58:	2215      	movs	r2, #21
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f7ff fe35 	bl	80007ca <sendFrame>
        return;
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	08004cb0 	.word	0x08004cb0
 8000b6c:	08004cb8 	.word	0x08004cb8
 8000b70:	40003000 	.word	0x40003000
 8000b74:	2000028c 	.word	0x2000028c
 8000b78:	20000284 	.word	0x20000284
 8000b7c:	08004ca8 	.word	0x08004ca8

08000b80 <executeIREL>:

void executeIREL(Frame *frame, uint8_t len) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
    if (len == 0 || len > MAX_DATA_LEN) {
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <executeIREL+0x18>
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	2b36      	cmp	r3, #54	@ 0x36
 8000b96:	d90e      	bls.n	8000bb6 <executeIREL+0x36>
    	memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	4931      	ldr	r1, [pc, #196]	@ (8000c64 <executeIREL+0xe4>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fc29 	bl	80043f8 <memcpy>
    	sendFrame(frame->command, 0, 0);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fe0b 	bl	80007ca <sendFrame>
        return;
 8000bb4:	e053      	b.n	8000c5e <executeIREL+0xde>
    }
    reload = 0;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c68 <executeIREL+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	801a      	strh	r2, [r3, #0]
    if (len == 1) {
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <executeIREL+0x4e>
        reload = frame->data[0];
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	799b      	ldrb	r3, [r3, #6]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <executeIREL+0xe8>)
 8000bca:	801a      	strh	r2, [r3, #0]
 8000bcc:	e00e      	b.n	8000bec <executeIREL+0x6c>
    } else if (len == 2) {
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d10b      	bne.n	8000bec <executeIREL+0x6c>
        reload = (frame->data[0] << 8) | frame->data[1];
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	799b      	ldrb	r3, [r3, #6]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	79db      	ldrb	r3, [r3, #7]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <executeIREL+0xe8>)
 8000bea:	801a      	strh	r2, [r3, #0]
    }
    if (reload >= 0 && reload <= 4095) {
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <executeIREL+0xe8>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <executeIREL+0xe8>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000bfa:	d21a      	bcs.n	8000c32 <executeIREL+0xb2>
        IWDG->KR = 0x5555; // Oblokuj IWDG
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <executeIREL+0xec>)
 8000bfe:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000c02:	601a      	str	r2, [r3, #0]
        IWDG->RLR = reload; // Ustaw wartosc reload
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <executeIREL+0xe8>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <executeIREL+0xec>)
 8000c0c:	609a      	str	r2, [r3, #8]
        // PRAWIDLOWA WARTOSC RELOAD
        isReloadI = true;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <executeIREL+0xf0>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
        memcpy(frame->command, "GOOD", COMMAND_LEN);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3302      	adds	r3, #2
 8000c18:	2204      	movs	r2, #4
 8000c1a:	4916      	ldr	r1, [pc, #88]	@ (8000c74 <executeIREL+0xf4>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fbeb 	bl	80043f8 <memcpy>
        sendFrame(frame->command, 0, 0);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3302      	adds	r3, #2
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fdcd 	bl	80007ca <sendFrame>
 8000c30:	e015      	b.n	8000c5e <executeIREL+0xde>
    } else { // NIEPRAWIDLOWA WARTOSC RELOAD
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3302      	adds	r3, #2
 8000c36:	2204      	movs	r2, #4
 8000c38:	490a      	ldr	r1, [pc, #40]	@ (8000c64 <executeIREL+0xe4>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 fbdc 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc reload", 19);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3306      	adds	r3, #6
 8000c44:	2213      	movs	r2, #19
 8000c46:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <executeIREL+0xf8>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f003 fbd5 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 19);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1c98      	adds	r0, r3, #2
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3306      	adds	r3, #6
 8000c56:	2213      	movs	r2, #19
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f7ff fdb6 	bl	80007ca <sendFrame>
    }
}
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08004cb0 	.word	0x08004cb0
 8000c68:	2000028e 	.word	0x2000028e
 8000c6c:	40003000 	.word	0x40003000
 8000c70:	20000285 	.word	0x20000285
 8000c74:	08004ca8 	.word	0x08004ca8
 8000c78:	08004cd0 	.word	0x08004cd0

08000c7c <executeIREF>:

void executeIREF(Frame *frame, uint8_t len) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
    if (len == 1) {
 8000c88:	78fb      	ldrb	r3, [r7, #3]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d105      	bne.n	8000c9a <executeIREF+0x1e>
    	iwdg_refresh_interval = frame->data[0];
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	799b      	ldrb	r3, [r3, #6]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <executeIREF+0xa4>)
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	e00e      	b.n	8000cb8 <executeIREF+0x3c>
    } else if (len == 2) {
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d10b      	bne.n	8000cb8 <executeIREF+0x3c>
    	iwdg_refresh_interval = (frame->data[0] << 8) | frame->data[1];
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	79db      	ldrb	r3, [r3, #7]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <executeIREF+0xa4>)
 8000cb6:	801a      	strh	r2, [r3, #0]
    }
    if(iwdg_refresh_interval >= 0 && iwdg_refresh_interval <= 50000) {
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <executeIREF+0xa4>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <executeIREF+0xa4>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d80e      	bhi.n	8000ce8 <executeIREF+0x6c>
        memcpy(frame->command, "GOOD", COMMAND_LEN);	// powodzenie
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3302      	adds	r3, #2
 8000cce:	2204      	movs	r2, #4
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <executeIREF+0xa8>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fb90 	bl	80043f8 <memcpy>
        sendFrame(frame->command, 0, 0);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd72 	bl	80007ca <sendFrame>
 8000ce6:	e016      	b.n	8000d16 <executeIREF+0x9a>
    } else {
        memcpy(frame->command, "FAIL", COMMAND_LEN);	// zla wartosc reload
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3302      	adds	r3, #2
 8000cec:	2204      	movs	r2, #4
 8000cee:	490e      	ldr	r1, [pc, #56]	@ (8000d28 <executeIREF+0xac>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fb81 	bl	80043f8 <memcpy>
        memcpy(frame->data, "Nieprawidlowy interwal", 23);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3306      	adds	r3, #6
 8000cfa:	2217      	movs	r2, #23
 8000cfc:	490b      	ldr	r1, [pc, #44]	@ (8000d2c <executeIREF+0xb0>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 fb7a 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 23);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	1c98      	adds	r0, r3, #2
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	2217      	movs	r2, #23
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff fd5b 	bl	80007ca <sendFrame>
    }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000027c 	.word	0x2000027c
 8000d24:	08004ca8 	.word	0x08004ca8
 8000d28:	08004cb0 	.word	0x08004cb0
 8000d2c:	08004ce4 	.word	0x08004ce4

08000d30 <executeIINI>:

void executeIINI(Frame *frame, uint8_t len) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
	if(isLSI && isReloadI && isPrescaler) {
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <executeIINI+0x94>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d022      	beq.n	8000d8c <executeIINI+0x5c>
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <executeIINI+0x98>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01d      	beq.n	8000d8c <executeIINI+0x5c>
 8000d50:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <executeIINI+0x9c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d018      	beq.n	8000d8c <executeIINI+0x5c>
		iwdg_initialized = true;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <executeIINI+0xa0>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
		systick_counter = 0; // synchronizacja
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <executeIINI+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
		IWDG->KR = 0xCCCC;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <executeIINI+0xa8>)
 8000d68:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000d6c:	601a      	str	r2, [r3, #0]
	    memcpy(frame->command, "GOOD", COMMAND_LEN);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3302      	adds	r3, #2
 8000d72:	2204      	movs	r2, #4
 8000d74:	4919      	ldr	r1, [pc, #100]	@ (8000ddc <executeIINI+0xac>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fb3e 	bl	80043f8 <memcpy>
	    sendFrame(frame->command, 0, 0);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3302      	adds	r3, #2
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fd20 	bl	80007ca <sendFrame>
 8000d8a:	e016      	b.n	8000dba <executeIINI+0x8a>
	}	else {
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3302      	adds	r3, #2
 8000d90:	2204      	movs	r2, #4
 8000d92:	4913      	ldr	r1, [pc, #76]	@ (8000de0 <executeIINI+0xb0>)
 8000d94:	4618      	mov	r0, r3
 8000d96:	f003 fb2f 	bl	80043f8 <memcpy>
        memcpy(frame->data, "Sprawdz konfiguracje IWDG", 25);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3306      	adds	r3, #6
 8000d9e:	2219      	movs	r2, #25
 8000da0:	4910      	ldr	r1, [pc, #64]	@ (8000de4 <executeIINI+0xb4>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fb28 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 25);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	1c98      	adds	r0, r3, #2
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3306      	adds	r3, #6
 8000db0:	2219      	movs	r2, #25
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fd09 	bl	80007ca <sendFrame>
	}
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000283 	.word	0x20000283
 8000dc8:	20000285 	.word	0x20000285
 8000dcc:	20000284 	.word	0x20000284
 8000dd0:	20000286 	.word	0x20000286
 8000dd4:	20000910 	.word	0x20000910
 8000dd8:	40003000 	.word	0x40003000
 8000ddc:	08004ca8 	.word	0x08004ca8
 8000de0:	08004cb0 	.word	0x08004cb0
 8000de4:	08004cfc 	.word	0x08004cfc

08000de8 <executeIGET>:

void executeIGET(Frame *frame, uint8_t len) {
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
    snprintf(frame->data, 10, "%02X%02X;%02X%02X",
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1d98      	adds	r0, r3, #6
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <executeIGET+0x70>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	0a1b      	lsrs	r3, r3, #8
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b2dc      	uxtb	r4, r3
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <executeIGET+0x70>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4a13      	ldr	r2, [pc, #76]	@ (8000e5c <executeIGET+0x74>)
 8000e0e:	8812      	ldrh	r2, [r2, #0]
 8000e10:	b292      	uxth	r2, r2
 8000e12:	0a12      	lsrs	r2, r2, #8
 8000e14:	b292      	uxth	r2, r2
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	4910      	ldr	r1, [pc, #64]	@ (8000e5c <executeIGET+0x74>)
 8000e1a:	8809      	ldrh	r1, [r1, #0]
 8000e1c:	b289      	uxth	r1, r1
 8000e1e:	b2c9      	uxtb	r1, r1
 8000e20:	9102      	str	r1, [sp, #8]
 8000e22:	9201      	str	r2, [sp, #4]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	4623      	mov	r3, r4
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <executeIGET+0x78>)
 8000e2a:	210a      	movs	r1, #10
 8000e2c:	f003 fa6a 	bl	8004304 <sniprintf>
             (prescaler >> 8) & 0xFF, prescaler & 0xFF,
             (reload >> 8) & 0xFF, reload & 0xFF
    );
    memcpy(frame->command, "BACK", COMMAND_LEN);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3302      	adds	r3, #2
 8000e34:	2204      	movs	r2, #4
 8000e36:	490b      	ldr	r1, [pc, #44]	@ (8000e64 <executeIGET+0x7c>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fadd 	bl	80043f8 <memcpy>
    sendFrame(frame->command, frame->data, 9);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1c98      	adds	r0, r3, #2
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3306      	adds	r3, #6
 8000e46:	2209      	movs	r2, #9
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fcbe 	bl	80007ca <sendFrame>
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000028c 	.word	0x2000028c
 8000e5c:	2000028e 	.word	0x2000028e
 8000e60:	08004d18 	.word	0x08004d18
 8000e64:	08004d2c 	.word	0x08004d2c

08000e68 <executeICNT>:

void executeICNT(Frame *frame, uint8_t len) {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
    snprintf(frame->data, 18,"IWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	1d98      	adds	r0, r3, #6
            (iwdg_refresh_cntr >> 24) & 0xFF,  // najstarszy bajt
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <executeICNT+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0e1b      	lsrs	r3, r3, #24
    snprintf(frame->data, 18,"IWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 8000e7e:	b2dc      	uxtb	r4, r3
            (iwdg_refresh_cntr >> 16) & 0xFF,
 8000e80:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <executeICNT+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	0c1b      	lsrs	r3, r3, #16
    snprintf(frame->data, 18,"IWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 8000e86:	b2db      	uxtb	r3, r3
            (iwdg_refresh_cntr >> 8) & 0xFF,
 8000e88:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <executeICNT+0x64>)
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	0a12      	lsrs	r2, r2, #8
    snprintf(frame->data, 18,"IWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	490e      	ldr	r1, [pc, #56]	@ (8000ecc <executeICNT+0x64>)
 8000e92:	6809      	ldr	r1, [r1, #0]
 8000e94:	b2c9      	uxtb	r1, r1
 8000e96:	9102      	str	r1, [sp, #8]
 8000e98:	9201      	str	r2, [sp, #4]
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <executeICNT+0x68>)
 8000ea0:	2112      	movs	r1, #18
 8000ea2:	f003 fa2f 	bl	8004304 <sniprintf>
            iwdg_refresh_cntr & 0xFF);         // najmlodszy bajt
    memcpy(frame->command, "BACK", COMMAND_LEN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	2204      	movs	r2, #4
 8000eac:	4909      	ldr	r1, [pc, #36]	@ (8000ed4 <executeICNT+0x6c>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 faa2 	bl	80043f8 <memcpy>
    sendFrame(frame->command, frame->data, 17);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1c98      	adds	r0, r3, #2
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3306      	adds	r3, #6
 8000ebc:	2211      	movs	r2, #17
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fc83 	bl	80007ca <sendFrame>
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	20000908 	.word	0x20000908
 8000ed0:	08004d34 	.word	0x08004d34
 8000ed4:	08004d2c 	.word	0x08004d2c

08000ed8 <executeWAPB>:

void executeWAPB(Frame* frame, uint8_t len) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    if (len != 0) {
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d016      	beq.n	8000f18 <executeWAPB+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3302      	adds	r3, #2
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4916      	ldr	r1, [pc, #88]	@ (8000f4c <executeWAPB+0x74>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fa80 	bl	80043f8 <memcpy>
        memcpy(frame->data, "dane musza byc puste", 21);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3306      	adds	r3, #6
 8000efc:	2215      	movs	r2, #21
 8000efe:	4914      	ldr	r1, [pc, #80]	@ (8000f50 <executeWAPB+0x78>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 fa79 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 21);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	1c98      	adds	r0, r3, #2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3306      	adds	r3, #6
 8000f0e:	2215      	movs	r2, #21
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fc5a 	bl	80007ca <sendFrame>
        return;
 8000f16:	e016      	b.n	8000f46 <executeWAPB+0x6e>
    }
    RCC->APB1ENR |= RCC_APB1ENR_WWDGEN; // Włączenie zegara dla WWDG
 8000f18:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <executeWAPB+0x7c>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f54 <executeWAPB+0x7c>)
 8000f1e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f22:	6413      	str	r3, [r2, #64]	@ 0x40
    isAPB = true; // zmiana flagi
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <executeWAPB+0x80>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	2204      	movs	r2, #4
 8000f30:	490a      	ldr	r1, [pc, #40]	@ (8000f5c <executeWAPB+0x84>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fa60 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fc42 	bl	80007ca <sendFrame>
}
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08004cb0 	.word	0x08004cb0
 8000f50:	08004d50 	.word	0x08004d50
 8000f54:	40023800 	.word	0x40023800
 8000f58:	20000287 	.word	0x20000287
 8000f5c:	08004ca8 	.word	0x08004ca8

08000f60 <executeWPRE>:

// KOMENDY DO WWDG
void executeWPRE(Frame *frame, uint8_t len) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	if (len != 1) {
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d016      	beq.n	8000fa0 <executeWPRE+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3302      	adds	r3, #2
 8000f76:	2204      	movs	r2, #4
 8000f78:	493b      	ldr	r1, [pc, #236]	@ (8001068 <executeWPRE+0x108>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fa3c 	bl	80043f8 <memcpy>
        memcpy(frame->data, "niepoprawna dlugosc danych", 26);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3306      	adds	r3, #6
 8000f84:	221a      	movs	r2, #26
 8000f86:	4939      	ldr	r1, [pc, #228]	@ (800106c <executeWPRE+0x10c>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fa35 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 26);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1c98      	adds	r0, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3306      	adds	r3, #6
 8000f96:	221a      	movs	r2, #26
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fc16 	bl	80007ca <sendFrame>
        return;
 8000f9e:	e060      	b.n	8001062 <executeWPRE+0x102>
	    }

    prescaler_wwdg = frame->data[0];
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	799a      	ldrb	r2, [r3, #6]
 8000fa4:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <executeWPRE+0x110>)
 8000fa6:	701a      	strb	r2, [r3, #0]
    if (prescaler_wwdg == 1 || prescaler_wwdg == 2 || prescaler_wwdg == 4 || prescaler_wwdg == 8) {
 8000fa8:	4b31      	ldr	r3, [pc, #196]	@ (8001070 <executeWPRE+0x110>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d00e      	beq.n	8000fd0 <executeWPRE+0x70>
 8000fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001070 <executeWPRE+0x110>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d009      	beq.n	8000fd0 <executeWPRE+0x70>
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <executeWPRE+0x110>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d004      	beq.n	8000fd0 <executeWPRE+0x70>
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <executeWPRE+0x110>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d132      	bne.n	8001036 <executeWPRE+0xd6>
        WWDG->CFR &= ~WWDG_CFR_WDGTB; // Czyszczenie bitów preskalera
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <executeWPRE+0x114>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <executeWPRE+0x114>)
 8000fd6:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000fda:	6053      	str	r3, [r2, #4]
        WWDG->CFR |= (prescaler_wwdg == 1) ? 0x0 :
 8000fdc:	4b24      	ldr	r3, [pc, #144]	@ (8001070 <executeWPRE+0x110>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d00f      	beq.n	8001006 <executeWPRE+0xa6>
                     (prescaler_wwdg == 2) ? 0x1 :
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <executeWPRE+0x110>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d008      	beq.n	8001002 <executeWPRE+0xa2>
                     (prescaler_wwdg == 4) ? 0x2 : 0x3; // Ustawienie preskalera
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <executeWPRE+0x110>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d101      	bne.n	8000ffe <executeWPRE+0x9e>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e004      	b.n	8001008 <executeWPRE+0xa8>
 8000ffe:	2303      	movs	r3, #3
 8001000:	e002      	b.n	8001008 <executeWPRE+0xa8>
                     (prescaler_wwdg == 2) ? 0x1 :
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <executeWPRE+0xa8>
        WWDG->CFR |= (prescaler_wwdg == 1) ? 0x0 :
 8001006:	2300      	movs	r3, #0
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <executeWPRE+0x114>)
 800100a:	6852      	ldr	r2, [r2, #4]
 800100c:	4919      	ldr	r1, [pc, #100]	@ (8001074 <executeWPRE+0x114>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
        isWprescaler = true; // ustawienie flagi
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <executeWPRE+0x118>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
        memcpy(frame->command, "GOOD", COMMAND_LEN);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3302      	adds	r3, #2
 800101c:	2204      	movs	r2, #4
 800101e:	4917      	ldr	r1, [pc, #92]	@ (800107c <executeWPRE+0x11c>)
 8001020:	4618      	mov	r0, r3
 8001022:	f003 f9e9 	bl	80043f8 <memcpy>
        sendFrame(frame->command, 0, 0);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3302      	adds	r3, #2
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fbcb 	bl	80007ca <sendFrame>
 8001034:	e015      	b.n	8001062 <executeWPRE+0x102>
	 } else {
    	memcpy(frame->command, "FAIL", COMMAND_LEN);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3302      	adds	r3, #2
 800103a:	2204      	movs	r2, #4
 800103c:	490a      	ldr	r1, [pc, #40]	@ (8001068 <executeWPRE+0x108>)
 800103e:	4618      	mov	r0, r3
 8001040:	f003 f9da 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc preskaler", 21);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3306      	adds	r3, #6
 8001048:	2215      	movs	r2, #21
 800104a:	490d      	ldr	r1, [pc, #52]	@ (8001080 <executeWPRE+0x120>)
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f9d3 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 21);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	1c98      	adds	r0, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3306      	adds	r3, #6
 800105a:	2215      	movs	r2, #21
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fbb4 	bl	80007ca <sendFrame>
    }
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08004cb0 	.word	0x08004cb0
 800106c:	08004d68 	.word	0x08004d68
 8001070:	20000280 	.word	0x20000280
 8001074:	40002c00 	.word	0x40002c00
 8001078:	20000288 	.word	0x20000288
 800107c:	08004ca8 	.word	0x08004ca8
 8001080:	08004cb8 	.word	0x08004cb8

08001084 <executeWREL>:

void executeWREL(Frame *frame, uint8_t len) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
	// sprawdzenie czy mozna ustawic wartosc reload
    if (!isWindow || (frame->data[0] > 127 && frame->data[0] < window)) {
 8001090:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <executeWREL+0xc4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f083 0301 	eor.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10b      	bne.n	80010b8 <executeWREL+0x34>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	799b      	ldrb	r3, [r3, #6]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da35      	bge.n	8001116 <executeWREL+0x92>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	799a      	ldrb	r2, [r3, #6]
 80010ae:	4b27      	ldr	r3, [pc, #156]	@ (800114c <executeWREL+0xc8>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d22e      	bcs.n	8001116 <executeWREL+0x92>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	2204      	movs	r2, #4
 80010be:	4924      	ldr	r1, [pc, #144]	@ (8001150 <executeWREL+0xcc>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f999 	bl	80043f8 <memcpy>
        if(!isWindow) {
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <executeWREL+0xc4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00f      	beq.n	80010f6 <executeWREL+0x72>
            memcpy(frame->data, "skonfiguruj wartosc okna", 24);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3306      	adds	r3, #6
 80010da:	2218      	movs	r2, #24
 80010dc:	491d      	ldr	r1, [pc, #116]	@ (8001154 <executeWREL+0xd0>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f98a 	bl	80043f8 <memcpy>
            sendFrame(frame->command, frame->data, 24);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	1c98      	adds	r0, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3306      	adds	r3, #6
 80010ec:	2218      	movs	r2, #24
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fb6b 	bl	80007ca <sendFrame>
            return;
 80010f4:	e024      	b.n	8001140 <executeWREL+0xbc>
        }
        memcpy(frame->data, "zla wartosc reload", 19);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3306      	adds	r3, #6
 80010fa:	2213      	movs	r2, #19
 80010fc:	4916      	ldr	r1, [pc, #88]	@ (8001158 <executeWREL+0xd4>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 f97a 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 19);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c98      	adds	r0, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3306      	adds	r3, #6
 800110c:	2213      	movs	r2, #19
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fb5b 	bl	80007ca <sendFrame>
        return;
 8001114:	e014      	b.n	8001140 <executeWREL+0xbc>
    }
    isReloadW = true;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <executeWREL+0xd8>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
    reload_wwdg = frame->data[0];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	799a      	ldrb	r2, [r3, #6]
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <executeWREL+0xdc>)
 8001122:	701a      	strb	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3302      	adds	r3, #2
 8001128:	2204      	movs	r2, #4
 800112a:	490e      	ldr	r1, [pc, #56]	@ (8001164 <executeWREL+0xe0>)
 800112c:	4618      	mov	r0, r3
 800112e:	f003 f963 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3302      	adds	r3, #2
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fb45 	bl	80007ca <sendFrame>
}
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000028a 	.word	0x2000028a
 800114c:	20000282 	.word	0x20000282
 8001150:	08004cb0 	.word	0x08004cb0
 8001154:	08004d84 	.word	0x08004d84
 8001158:	08004cd0 	.word	0x08004cd0
 800115c:	20000289 	.word	0x20000289
 8001160:	20000281 	.word	0x20000281
 8001164:	08004ca8 	.word	0x08004ca8

08001168 <executeWWIN>:

void executeWWIN(Frame *frame, uint8_t len) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
    if (len != 1 || frame->data[0] < 64 || frame->data[0] > 127 ) {
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <executeWWIN+0x24>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	799b      	ldrb	r3, [r3, #6]
 800117e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001180:	d904      	bls.n	800118c <executeWWIN+0x24>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	da16      	bge.n	80011ba <executeWWIN+0x52>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	2204      	movs	r2, #4
 8001192:	491b      	ldr	r1, [pc, #108]	@ (8001200 <executeWWIN+0x98>)
 8001194:	4618      	mov	r0, r3
 8001196:	f003 f92f 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc okna", 17);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3306      	adds	r3, #6
 800119e:	2211      	movs	r2, #17
 80011a0:	4918      	ldr	r1, [pc, #96]	@ (8001204 <executeWWIN+0x9c>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f928 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 17);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1c98      	adds	r0, r3, #2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3306      	adds	r3, #6
 80011b0:	2211      	movs	r2, #17
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fb09 	bl	80007ca <sendFrame>
        return;
 80011b8:	e01f      	b.n	80011fa <executeWWIN+0x92>
    }

    window = frame->data[0];
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	799a      	ldrb	r2, [r3, #6]
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <executeWWIN+0xa0>)
 80011c0:	701a      	strb	r2, [r3, #0]
    WWDG->CFR = (WWDG->CFR & ~WWDG_CFR_W) | (window << 0);
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <executeWWIN+0xa4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <executeWWIN+0xa0>)
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	4611      	mov	r1, r2
 80011d2:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <executeWWIN+0xa4>)
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6053      	str	r3, [r2, #4]
    isWindow = true;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <executeWWIN+0xa8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3302      	adds	r3, #2
 80011e2:	2204      	movs	r2, #4
 80011e4:	490b      	ldr	r1, [pc, #44]	@ (8001214 <executeWWIN+0xac>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f906 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3302      	adds	r3, #2
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fae8 	bl	80007ca <sendFrame>
}
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08004cb0 	.word	0x08004cb0
 8001204:	08004da0 	.word	0x08004da0
 8001208:	20000282 	.word	0x20000282
 800120c:	40002c00 	.word	0x40002c00
 8001210:	2000028a 	.word	0x2000028a
 8001214:	08004ca8 	.word	0x08004ca8

08001218 <executeWEWI>:

void executeWEWI(Frame *frame, uint8_t len) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
    if (len != 0) {
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <executeWEWI+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3302      	adds	r3, #2
 800122e:	2204      	movs	r2, #4
 8001230:	4916      	ldr	r1, [pc, #88]	@ (800128c <executeWEWI+0x74>)
 8001232:	4618      	mov	r0, r3
 8001234:	f003 f8e0 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zle dane wejsciowe", 19);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3306      	adds	r3, #6
 800123c:	2213      	movs	r2, #19
 800123e:	4914      	ldr	r1, [pc, #80]	@ (8001290 <executeWEWI+0x78>)
 8001240:	4618      	mov	r0, r3
 8001242:	f003 f8d9 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 19);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1c98      	adds	r0, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3306      	adds	r3, #6
 800124e:	2213      	movs	r2, #19
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff faba 	bl	80007ca <sendFrame>
        return;
 8001256:	e016      	b.n	8001286 <executeWEWI+0x6e>
    }
    WWDG->CFR |= WWDG_CFR_EWI; // Włączenie Early Wakeup Interrupt
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <executeWEWI+0x7c>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <executeWEWI+0x7c>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001262:	6053      	str	r3, [r2, #4]
    ewi_flag = 1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <executeWEWI+0x80>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3302      	adds	r3, #2
 800126e:	2204      	movs	r2, #4
 8001270:	490a      	ldr	r1, [pc, #40]	@ (800129c <executeWEWI+0x84>)
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f8c0 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3302      	adds	r3, #2
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff faa2 	bl	80007ca <sendFrame>
}
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08004cb0 	.word	0x08004cb0
 8001290:	08004db4 	.word	0x08004db4
 8001294:	40002c00 	.word	0x40002c00
 8001298:	20000ac0 	.word	0x20000ac0
 800129c:	08004ca8 	.word	0x08004ca8

080012a0 <executeWINI>:


void executeWINI(Frame *frame, uint8_t len) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
    if (len != 0) {
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <executeWINI+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3302      	adds	r3, #2
 80012b6:	2204      	movs	r2, #4
 80012b8:	492e      	ldr	r1, [pc, #184]	@ (8001374 <executeWINI+0xd4>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f89c 	bl	80043f8 <memcpy>
        memcpy(frame->data, "dane musza byc puste", 21);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3306      	adds	r3, #6
 80012c4:	2215      	movs	r2, #21
 80012c6:	492c      	ldr	r1, [pc, #176]	@ (8001378 <executeWINI+0xd8>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f895 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 21);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	1c98      	adds	r0, r3, #2
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3306      	adds	r3, #6
 80012d6:	2215      	movs	r2, #21
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fa76 	bl	80007ca <sendFrame>
        return;
 80012de:	e046      	b.n	800136e <executeWINI+0xce>
    }
    if(isAPB && isWindow && isWprescaler && isReloadW) {
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <executeWINI+0xdc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d02b      	beq.n	8001342 <executeWINI+0xa2>
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <executeWINI+0xe0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d026      	beq.n	8001342 <executeWINI+0xa2>
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <executeWINI+0xe4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d021      	beq.n	8001342 <executeWINI+0xa2>
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <executeWINI+0xe8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01c      	beq.n	8001342 <executeWINI+0xa2>
    	memcpy(frame->command, "GOOD", COMMAND_LEN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3302      	adds	r3, #2
 800130c:	2204      	movs	r2, #4
 800130e:	491f      	ldr	r1, [pc, #124]	@ (800138c <executeWINI+0xec>)
 8001310:	4618      	mov	r0, r3
 8001312:	f003 f871 	bl	80043f8 <memcpy>
    	sendFrame(frame->command, 0, 0);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3302      	adds	r3, #2
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa53 	bl	80007ca <sendFrame>
    	wwdg_initialized = true;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <executeWINI+0xf0>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
    	WWDG->CR = WWDG_CR_WDGA | reload_wwdg;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <executeWINI+0xf4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <executeWINI+0xf8>)
 8001338:	601a      	str	r2, [r3, #0]
    	systick_counter = 0; // synchronizacja systick'a z watchdogiem
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <executeWINI+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e015      	b.n	800136e <executeWINI+0xce>
    } else {
    	memcpy(frame->command, "FAIL", COMMAND_LEN);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3302      	adds	r3, #2
 8001346:	2204      	movs	r2, #4
 8001348:	490a      	ldr	r1, [pc, #40]	@ (8001374 <executeWINI+0xd4>)
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f854 	bl	80043f8 <memcpy>
    	memcpy(frame->data, "sprawdz konfiguracje WWDG", 25);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3306      	adds	r3, #6
 8001354:	2219      	movs	r2, #25
 8001356:	4912      	ldr	r1, [pc, #72]	@ (80013a0 <executeWINI+0x100>)
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f84d 	bl	80043f8 <memcpy>
    	sendFrame(frame->command, frame->data, 25);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1c98      	adds	r0, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3306      	adds	r3, #6
 8001366:	2219      	movs	r2, #25
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fa2e 	bl	80007ca <sendFrame>
    }
}
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08004cb0 	.word	0x08004cb0
 8001378:	08004d50 	.word	0x08004d50
 800137c:	20000287 	.word	0x20000287
 8001380:	2000028a 	.word	0x2000028a
 8001384:	20000288 	.word	0x20000288
 8001388:	20000289 	.word	0x20000289
 800138c:	08004ca8 	.word	0x08004ca8
 8001390:	2000028b 	.word	0x2000028b
 8001394:	20000281 	.word	0x20000281
 8001398:	40002c00 	.word	0x40002c00
 800139c:	20000910 	.word	0x20000910
 80013a0:	08004dc8 	.word	0x08004dc8

080013a4 <executeWREF>:

void executeWREF(Frame *frame, uint8_t len) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
    if (len != 1) {
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d016      	beq.n	80013e4 <executeWREF+0x40>
        memcpy(frame->command, "FAIL", COMMAND_LEN);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3302      	adds	r3, #2
 80013ba:	2204      	movs	r2, #4
 80013bc:	4914      	ldr	r1, [pc, #80]	@ (8001410 <executeWREF+0x6c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f81a 	bl	80043f8 <memcpy>
        memcpy(frame->data, "zla wartosc interwalu", 22);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3306      	adds	r3, #6
 80013c8:	2216      	movs	r2, #22
 80013ca:	4912      	ldr	r1, [pc, #72]	@ (8001414 <executeWREF+0x70>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 f813 	bl	80043f8 <memcpy>
        sendFrame(frame->command, frame->data, 22);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1c98      	adds	r0, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3306      	adds	r3, #6
 80013da:	2216      	movs	r2, #22
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff f9f4 	bl	80007ca <sendFrame>
        return;
 80013e2:	e012      	b.n	800140a <executeWREF+0x66>
    }
    wwdg_refresh_interval = frame->data[0];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	799b      	ldrb	r3, [r3, #6]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <executeWREF+0x74>)
 80013ec:	801a      	strh	r2, [r3, #0]
    memcpy(frame->command, "GOOD", COMMAND_LEN);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3302      	adds	r3, #2
 80013f2:	2204      	movs	r2, #4
 80013f4:	4909      	ldr	r1, [pc, #36]	@ (800141c <executeWREF+0x78>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fffe 	bl	80043f8 <memcpy>
    sendFrame(frame->command, 0, 0);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3302      	adds	r3, #2
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f9e0 	bl	80007ca <sendFrame>
}
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08004cb0 	.word	0x08004cb0
 8001414:	08004de4 	.word	0x08004de4
 8001418:	2000027e 	.word	0x2000027e
 800141c:	08004ca8 	.word	0x08004ca8

08001420 <executeWGET>:

void executeWGET(Frame *frame, uint8_t len) {
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
    snprintf(frame->data, 14, "%02X%02X;%02X;%02X;%02X",
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1d98      	adds	r0, r3, #6
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <executeWGET+0x74>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <executeWGET+0x74>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4914      	ldr	r1, [pc, #80]	@ (8001498 <executeWGET+0x78>)
 8001446:	7809      	ldrb	r1, [r1, #0]
 8001448:	b2c9      	uxtb	r1, r1
 800144a:	460c      	mov	r4, r1
 800144c:	4913      	ldr	r1, [pc, #76]	@ (800149c <executeWGET+0x7c>)
 800144e:	7809      	ldrb	r1, [r1, #0]
 8001450:	b2c9      	uxtb	r1, r1
 8001452:	460d      	mov	r5, r1
 8001454:	4912      	ldr	r1, [pc, #72]	@ (80014a0 <executeWGET+0x80>)
 8001456:	7809      	ldrb	r1, [r1, #0]
 8001458:	b2c9      	uxtb	r1, r1
 800145a:	9103      	str	r1, [sp, #12]
 800145c:	9502      	str	r5, [sp, #8]
 800145e:	9401      	str	r4, [sp, #4]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4613      	mov	r3, r2
 8001464:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <executeWGET+0x84>)
 8001466:	210e      	movs	r1, #14
 8001468:	f002 ff4c 	bl	8004304 <sniprintf>
             (wwdg_refresh_interval >> 8) & 0xFF,  // wyższy bajt wwdg_refresh_interval
             wwdg_refresh_interval & 0xFF,        // ziższy bajt wwdg_refresh_interval
			 prescaler_wwdg,
             window,
             reload_wwdg);
    memcpy(frame->command, "BACK", COMMAND_LEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3302      	adds	r3, #2
 8001470:	2204      	movs	r2, #4
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <executeWGET+0x88>)
 8001474:	4618      	mov	r0, r3
 8001476:	f002 ffbf 	bl	80043f8 <memcpy>
    sendFrame(frame->command, frame->data, 13);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c98      	adds	r0, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3306      	adds	r3, #6
 8001482:	220d      	movs	r2, #13
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff f9a0 	bl	80007ca <sendFrame>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
 8001492:	bf00      	nop
 8001494:	2000027e 	.word	0x2000027e
 8001498:	20000280 	.word	0x20000280
 800149c:	20000282 	.word	0x20000282
 80014a0:	20000281 	.word	0x20000281
 80014a4:	08004dfc 	.word	0x08004dfc
 80014a8:	08004d2c 	.word	0x08004d2c

080014ac <executeWCNT>:

void executeWCNT(Frame *frame, uint8_t len) {
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af04      	add	r7, sp, #16
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
    snprintf(frame->data, 18,"WWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1d98      	adds	r0, r3, #6
            (wwdg_refresh_cntr >> 24) & 0xFF,  // najstarszy bajt
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <executeWCNT+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0e1b      	lsrs	r3, r3, #24
    snprintf(frame->data, 18,"WWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 80014c2:	b2dc      	uxtb	r4, r3
            (wwdg_refresh_cntr >> 16) & 0xFF,
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <executeWCNT+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
    snprintf(frame->data, 18,"WWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 80014ca:	b2db      	uxtb	r3, r3
            (wwdg_refresh_cntr >> 8) & 0xFF,
 80014cc:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <executeWCNT+0x64>)
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	0a12      	lsrs	r2, r2, #8
    snprintf(frame->data, 18,"WWDGcntr:%02X%02X%02X%02X",	// formatowanie string
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	490e      	ldr	r1, [pc, #56]	@ (8001510 <executeWCNT+0x64>)
 80014d6:	6809      	ldr	r1, [r1, #0]
 80014d8:	b2c9      	uxtb	r1, r1
 80014da:	9102      	str	r1, [sp, #8]
 80014dc:	9201      	str	r2, [sp, #4]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4623      	mov	r3, r4
 80014e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <executeWCNT+0x68>)
 80014e4:	2112      	movs	r1, #18
 80014e6:	f002 ff0d 	bl	8004304 <sniprintf>
            wwdg_refresh_cntr & 0xFF);         // najmlodszy bajt
    memcpy(frame->command, "BACK", COMMAND_LEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3302      	adds	r3, #2
 80014ee:	2204      	movs	r2, #4
 80014f0:	4909      	ldr	r1, [pc, #36]	@ (8001518 <executeWCNT+0x6c>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 ff80 	bl	80043f8 <memcpy>
    sendFrame(frame->command, frame->data, 17);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	1c98      	adds	r0, r3, #2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3306      	adds	r3, #6
 8001500:	2211      	movs	r2, #17
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff f961 	bl	80007ca <sendFrame>
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	2000090c 	.word	0x2000090c
 8001514:	08004e14 	.word	0x08004e14
 8001518:	08004d2c 	.word	0x08004d2c

0800151c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a2c      	ldr	r2, [pc, #176]	@ (80015ec <MX_GPIO_Init+0xd0>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a25      	ldr	r2, [pc, #148]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	4812      	ldr	r0, [pc, #72]	@ (80015f0 <MX_GPIO_Init+0xd4>)
 80015a8:	f001 f8c6 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <MX_GPIO_Init+0xd8>)
 80015c4:	f000 ff24 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c8:	2320      	movs	r3, #32
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_GPIO_Init+0xd4>)
 80015e0:	f000 ff16 	bl	8002410 <HAL_GPIO_Init>

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020800 	.word	0x40020800

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800165c:	d301      	bcc.n	8001662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165e:	2301      	movs	r3, #1
 8001660:	e00f      	b.n	8001682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <SysTick_Config+0x40>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166a:	210f      	movs	r1, #15
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f7ff ffc2 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <SysTick_Config+0x40>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <SysTick_Config+0x40>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	e000e010 	.word	0xe000e010

08001690 <configureSysTick>:
uint8_t USART_getline(char *buf); // pobierz linie z bufora
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void configureSysTick(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    // Konfiguracja SysTick dla przerwania co 1 ms
	SysTick_Config(SystemCoreClock / 1000);
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <configureSysTick+0x1c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <configureSysTick+0x20>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffd3 	bl	800164c <SysTick_Config>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000204 	.word	0x20000204
 80016b0:	10624dd3 	.word	0x10624dd3

080016b4 <USART_kbhit>:
// sprawdź czy bufor nie jest pusty
uint8_t USART_kbhit() {
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
    return (USART_RX_Empty != USART_RX_Busy);
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <USART_kbhit+0x20>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <USART_kbhit+0x24>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	20000900 	.word	0x20000900
 80016d8:	20000904 	.word	0x20000904

080016dc <USART_getchar>:

// pobierz pojedyńczy znak z bufora odbiorczego jeśli dostępne są nowe dane
int16_t USART_getchar() {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
    if (USART_RX_Empty != USART_RX_Busy) {
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <USART_getchar+0x4c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <USART_getchar+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d013      	beq.n	8001716 <USART_getchar+0x3a>
        int16_t tmp = USART_RxBuf[USART_RX_Busy];	// pobranie znaku z bufora
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <USART_getchar+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <USART_getchar+0x54>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	80fb      	strh	r3, [r7, #6]
        USART_RX_Busy++;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <USART_getchar+0x50>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <USART_getchar+0x50>)
 8001700:	6013      	str	r3, [r2, #0]
        if (USART_RX_Busy >= USART_RXBUF_LEN) USART_RX_Busy = 0;	// "cykl" bufora
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <USART_getchar+0x50>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b7f      	cmp	r3, #127	@ 0x7f
 8001708:	dd02      	ble.n	8001710 <USART_getchar+0x34>
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <USART_getchar+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
        return tmp;
 8001710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001714:	e001      	b.n	800171a <USART_getchar+0x3e>
    } else {
        return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000900 	.word	0x20000900
 800172c:	20000904 	.word	0x20000904
 8001730:	20000878 	.word	0x20000878

08001734 <USART_fsend_frame>:
        }
    }
    return 0;
}
// wersja funkcji fsend, która przygotowana jest do wysyłania ramki
void USART_fsend_frame(uint8_t *data, uint8_t len) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
    __IO int idx = USART_TX_Empty;
 8001740:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <USART_fsend_frame+0xb0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	613b      	str	r3, [r7, #16]
    uint8_t i;

    // Umieść dane w buforze USART_TxBuf
    for (i = 0; i < len; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
 800174a:	e012      	b.n	8001772 <USART_fsend_frame+0x3e>
        USART_TxBuf[idx] = data[i];
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	441a      	add	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	7811      	ldrb	r1, [r2, #0]
 8001756:	4a24      	ldr	r2, [pc, #144]	@ (80017e8 <USART_fsend_frame+0xb4>)
 8001758:	54d1      	strb	r1, [r2, r3]
        idx++;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	3301      	adds	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
        if (idx >= USART_TXBUF_LEN) idx = 0; // Zapętlenie bufora
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8001766:	db01      	blt.n	800176c <USART_fsend_frame+0x38>
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	3301      	adds	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	7dfa      	ldrb	r2, [r7, #23]
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3e8      	bcc.n	800174c <USART_fsend_frame+0x18>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800177a:	b672      	cpsid	i
}
 800177c:	bf00      	nop
    }
    __disable_irq();
    if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <USART_fsend_frame+0xb0>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <USART_fsend_frame+0xb8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d123      	bne.n	80017d2 <USART_fsend_frame+0x9e>
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <USART_fsend_frame+0xbc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001794:	2b80      	cmp	r3, #128	@ 0x80
 8001796:	d11c      	bne.n	80017d2 <USART_fsend_frame+0x9e>
        // Jeśli bufor był pusty i UART gotowy do nadawania, rozpocznij transmisję
        USART_TX_Empty = idx;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <USART_fsend_frame+0xb0>)
 800179c:	6013      	str	r3, [r2, #0]
        uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <USART_fsend_frame+0xb8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <USART_fsend_frame+0xb4>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	73fb      	strb	r3, [r7, #15]
        USART_TX_Busy++;
 80017a8:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <USART_fsend_frame+0xb8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <USART_fsend_frame+0xb8>)
 80017b0:	6013      	str	r3, [r2, #0]
        if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <USART_fsend_frame+0xb8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 80017ba:	db02      	blt.n	80017c2 <USART_fsend_frame+0x8e>
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <USART_fsend_frame+0xb8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80017c2:	f107 030f 	add.w	r3, r7, #15
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	4809      	ldr	r0, [pc, #36]	@ (80017f0 <USART_fsend_frame+0xbc>)
 80017cc:	f001 fe20 	bl	8003410 <HAL_UART_Transmit_IT>
    if ((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 80017d0:	e002      	b.n	80017d8 <USART_fsend_frame+0xa4>
    } else {
        // Zaktualizuj wskaźnik końca danych w buforze
        USART_TX_Empty = idx;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <USART_fsend_frame+0xb0>)
 80017d6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017d8:	b662      	cpsie	i
}
 80017da:	bf00      	nop
    }
    __enable_irq();
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200008f8 	.word	0x200008f8
 80017e8:	20000290 	.word	0x20000290
 80017ec:	200008fc 	.word	0x200008fc
 80017f0:	20000918 	.word	0x20000918

080017f4 <HAL_UART_TxCpltCallback>:
	}
	__enable_irq();
}//fsend

// funkcja typu callback wywoływana po zakończeniu transmisji
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <HAL_UART_TxCpltCallback+0x58>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d11e      	bne.n	8001842 <HAL_UART_TxCpltCallback+0x4e>
        if (USART_TX_Empty != USART_TX_Busy) {
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_UART_TxCpltCallback+0x5c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d018      	beq.n	8001842 <HAL_UART_TxCpltCallback+0x4e>
            uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8001810:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_UART_TxCpltCallback+0x64>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	73fb      	strb	r3, [r7, #15]
            USART_TX_Busy++;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 8001822:	6013      	str	r3, [r2, #0]
            if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 800182c:	db02      	blt.n	8001834 <HAL_UART_TxCpltCallback+0x40>
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_UART_TxCpltCallback+0x60>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	2201      	movs	r2, #1
 800183a:	4619      	mov	r1, r3
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <HAL_UART_TxCpltCallback+0x58>)
 800183e:	f001 fde7 	bl	8003410 <HAL_UART_Transmit_IT>
        }
    }
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000918 	.word	0x20000918
 8001850:	200008f8 	.word	0x200008f8
 8001854:	200008fc 	.word	0x200008fc
 8001858:	20000290 	.word	0x20000290

0800185c <HAL_UART_RxCpltCallback>:

// funkcja typu callback wywoływana po zakończeniu odbioru
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a0e      	ldr	r2, [pc, #56]	@ (80018a0 <HAL_UART_RxCpltCallback+0x44>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d114      	bne.n	8001896 <HAL_UART_RxCpltCallback+0x3a>
        USART_RX_Empty++;
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <HAL_UART_RxCpltCallback+0x48>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a0c      	ldr	r2, [pc, #48]	@ (80018a4 <HAL_UART_RxCpltCallback+0x48>)
 8001874:	6013      	str	r3, [r2, #0]
        if (USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty = 0;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_UART_RxCpltCallback+0x48>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b7f      	cmp	r3, #127	@ 0x7f
 800187c:	dd02      	ble.n	8001884 <HAL_UART_RxCpltCallback+0x28>
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_UART_RxCpltCallback+0x48>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <HAL_UART_RxCpltCallback+0x48>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_UART_RxCpltCallback+0x4c>)
 800188a:	4413      	add	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	4619      	mov	r1, r3
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <HAL_UART_RxCpltCallback+0x44>)
 8001892:	f001 fdf3 	bl	800347c <HAL_UART_Receive_IT>
    }
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000918 	.word	0x20000918
 80018a4:	20000900 	.word	0x20000900
 80018a8:	20000878 	.word	0x20000878

080018ac <reset_frame_state.0>:
      memcpy(ramka.command, "BACK", COMMAND_LEN);
      memcpy(ramka.data, "przerwanie ewi zadzialalo", 25);
      sendFrame(ramka.command, ramka.data, 25);
      ewi_flag = 0;
  }
  void reset_frame_state() {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4663      	mov	r3, ip
 80018b4:	f8c7 c004 	str.w	ip, [r7, #4]
	in_frame = false;
 80018b8:	2200      	movs	r2, #0
 80018ba:	709a      	strb	r2, [r3, #2]
	escape_detected = false;
 80018bc:	2200      	movs	r2, #0
 80018be:	705a      	strb	r2, [r3, #1]
	bx_index = 0;
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  }
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <main>:
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0aa      	sub	sp, #168	@ 0xa8
 80018d4:	af00      	add	r7, sp, #0
int main(void)
 80018d6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80018da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	configureSysTick();
 80018de:	f7ff fed7 	bl	8001690 <configureSysTick>
  HAL_Init();
 80018e2:	f000 fb7f 	bl	8001fe4 <HAL_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE(); // Włączenie zegara GPIOA
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4ba3      	ldr	r3, [pc, #652]	@ (8001b78 <main+0x2a8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4aa2      	ldr	r2, [pc, #648]	@ (8001b78 <main+0x2a8>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001b78 <main+0x2a8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_5;        // Pin PA5 (LD2)
 8001912:	2320      	movs	r3, #32
 8001914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Wyjście push-pull
 8001918:	2301      	movs	r3, #1
 800191a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Pull = GPIO_NOPULL;      // Bez podciągania
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Niska szybkość
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800192e:	4619      	mov	r1, r3
 8001930:	4892      	ldr	r0, [pc, #584]	@ (8001b7c <main+0x2ac>)
 8001932:	f000 fd6d 	bl	8002410 <HAL_GPIO_Init>
  SystemClock_Config();
 8001936:	f000 f931 	bl	8001b9c <SystemClock_Config>
  MX_GPIO_Init();
 800193a:	f7ff fdef 	bl	800151c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800193e:	f000 faad 	bl	8001e9c <MX_USART2_UART_Init>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8001942:	4b8d      	ldr	r3, [pc, #564]	@ (8001b78 <main+0x2a8>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <main+0x86>
      led_blink_interval = 100; // Zmiana interwału mrugania na 100 ms
 800194e:	4b8c      	ldr	r3, [pc, #560]	@ (8001b80 <main+0x2b0>)
 8001950:	2264      	movs	r2, #100	@ 0x64
 8001952:	801a      	strh	r2, [r3, #0]
 8001954:	e009      	b.n	800196a <main+0x9a>
  else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <main+0x2a8>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <main+0x9a>
	  led_blink_interval = 1000;
 8001962:	4b87      	ldr	r3, [pc, #540]	@ (8001b80 <main+0x2b0>)
 8001964:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001968:	801a      	strh	r2, [r3, #0]
  __HAL_RCC_CLEAR_RESET_FLAGS(); // Czyszczenie flag resetu
 800196a:	4b83      	ldr	r3, [pc, #524]	@ (8001b78 <main+0x2a8>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196e:	4a82      	ldr	r2, [pc, #520]	@ (8001b78 <main+0x2a8>)
 8001970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001974:	6753      	str	r3, [r2, #116]	@ 0x74
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8001976:	2201      	movs	r2, #1
 8001978:	4982      	ldr	r1, [pc, #520]	@ (8001b84 <main+0x2b4>)
 800197a:	4883      	ldr	r0, [pc, #524]	@ (8001b88 <main+0x2b8>)
 800197c:	f001 fd7e 	bl	800347c <HAL_UART_Receive_IT>
  bool escape_detected = false;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
  uint8_t bx_index = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
  bool in_frame = false;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
  if(ewi_flag == 1) {
 8001992:	4b7e      	ldr	r3, [pc, #504]	@ (8001b8c <main+0x2bc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d115      	bne.n	80019c8 <main+0xf8>
      memcpy(ramka.command, "BACK", COMMAND_LEN);
 800199c:	4a7c      	ldr	r2, [pc, #496]	@ (8001b90 <main+0x2c0>)
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	6810      	ldr	r0, [r2, #0]
 80019a2:	6018      	str	r0, [r3, #0]
      memcpy(ramka.data, "przerwanie ewi zadzialalo", 25);
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	3306      	adds	r3, #6
 80019a8:	2219      	movs	r2, #25
 80019aa:	497a      	ldr	r1, [pc, #488]	@ (8001b94 <main+0x2c4>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fd23 	bl	80043f8 <memcpy>
      sendFrame(ramka.command, ramka.data, 25);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	1d99      	adds	r1, r3, #6
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	3302      	adds	r3, #2
 80019ba:	2219      	movs	r2, #25
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe ff04 	bl	80007ca <sendFrame>
      ewi_flag = 0;
 80019c2:	4b72      	ldr	r3, [pc, #456]	@ (8001b8c <main+0x2bc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ce:	4872      	ldr	r0, [pc, #456]	@ (8001b98 <main+0x2c8>)
 80019d0:	f000 feb2 	bl	8002738 <HAL_GPIO_WritePin>
  uint32_t last_toggle_time = HAL_GetTick(); // Pobranie aktualnego czasu
 80019d4:	f000 fb6c 	bl	80020b0 <HAL_GetTick>
 80019d8:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
    if (HAL_GetTick() - last_toggle_time >= led_blink_interval) {
 80019dc:	f000 fb68 	bl	80020b0 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	4a65      	ldr	r2, [pc, #404]	@ (8001b80 <main+0x2b0>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	b292      	uxth	r2, r2
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d307      	bcc.n	8001a02 <main+0x132>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Zmiana stanu diody LD2
 80019f2:	2120      	movs	r1, #32
 80019f4:	4861      	ldr	r0, [pc, #388]	@ (8001b7c <main+0x2ac>)
 80019f6:	f000 feb8 	bl	800276a <HAL_GPIO_TogglePin>
        last_toggle_time = HAL_GetTick();     // Aktualizacja czasu ostatniego przełączenia
 80019fa:	f000 fb59 	bl	80020b0 <HAL_GetTick>
 80019fe:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    }

    if (USART_kbhit()) {                // Sprawdzamy, czy jest dostępny nowy znak
 8001a02:	f7ff fe57 	bl	80016b4 <USART_kbhit>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0e7      	beq.n	80019dc <main+0x10c>
        received_char = USART_getchar();   // Pobieramy znak z bufora odbiorczego
 8001a0c:	f7ff fe66 	bl	80016dc <USART_getchar>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        if (received_char == FRAME_START) {
 8001a16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001a1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a1c:	d115      	bne.n	8001a4a <main+0x17a>
            if (in_frame) {	// wykryto nadmiarowy znak, znowu sprawdzimy ramke
 8001a1e:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <main+0x166>
            	reset_frame_state();
 8001a26:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	f7ff ff3e 	bl	80018ac <reset_frame_state.0>
            	in_frame = true;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
            }// Rozpoczęcie nowej ramki
                in_frame = true;
 8001a36:	2301      	movs	r3, #1
 8001a38:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                bx_index = 0;           // Resetujemy indeks bufora
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                escape_detected = false; // Resetujemy flagę escape
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8001a48:	e7c8      	b.n	80019dc <main+0x10c>
        } else if (received_char == FRAME_STOP && escape_detected == false) {    // Koniec ramki
 8001a4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001a4e:	2b60      	cmp	r3, #96	@ 0x60
 8001a50:	d132      	bne.n	8001ab8 <main+0x1e8>
 8001a52:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001a56:	f083 0301 	eor.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d02b      	beq.n	8001ab8 <main+0x1e8>
            if (in_frame) {
 8001a60:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d021      	beq.n	8001aac <main+0x1dc>
                // Przetwarzanie odebranej ramki (np. wywołanie funkcji lub ustawienie flagi)
            	// sprawdzamy adres odbiorcy, jesli nim jestesmy, procesujemy ramke
                if (checkFrame(bx,&ramka, bx_index) && bx[1] == 'S') {
 8001a68:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8001a6c:	1d39      	adds	r1, r7, #4
 8001a6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fe40 	bl	80006f8 <checkFrame>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <main+0x1c6>
 8001a7e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001a82:	2b53      	cmp	r3, #83	@ 0x53
 8001a84:	d107      	bne.n	8001a96 <main+0x1c6>
                	handleCommand(&ramka, bx_index);
 8001a86:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe ff54 	bl	800093c <handleCommand>
 8001a94:	e004      	b.n	8001aa0 <main+0x1d0>
                } else {
                	reset_frame_state(); // inny adres
 8001a96:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001a9a:	469c      	mov	ip, r3
 8001a9c:	f7ff ff06 	bl	80018ac <reset_frame_state.0>
                }
                reset_frame_state(); // resetujemy po zakończonym odbiorze prawidłowej ramki
 8001aa0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001aa4:	469c      	mov	ip, r3
 8001aa6:	f7ff ff01 	bl	80018ac <reset_frame_state.0>
            if (in_frame) {
 8001aaa:	e064      	b.n	8001b76 <main+0x2a6>
            } else {
                // Jeśli ramka się kończy, ale nie została rozpoczęta
                reset_frame_state();
 8001aac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	f7ff fefb 	bl	80018ac <reset_frame_state.0>
            if (in_frame) {
 8001ab6:	e05e      	b.n	8001b76 <main+0x2a6>
            }
        } else if (in_frame) {
 8001ab8:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d08d      	beq.n	80019dc <main+0x10c>
        	if (bx_index < 66) { // po przypisaniu sprawdzenie
 8001ac0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001ac4:	2b41      	cmp	r3, #65	@ 0x41
 8001ac6:	d851      	bhi.n	8001b6c <main+0x29c>
            // Jesteśmy w ramce i przetwarzamy znaki
            if (escape_detected) {
 8001ac8:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d038      	beq.n	8001b42 <main+0x272>
                // Jeśli wykryto escape char, sprawdzamy następny znak
                if (received_char == '^') {
 8001ad0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001ad4:	2b5e      	cmp	r3, #94	@ 0x5e
 8001ad6:	d10b      	bne.n	8001af0 <main+0x220>
                    bx[bx_index++] = '~'; // '~' było zakodowane jako '}^'
 8001ad8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f887 2098 	strb.w	r2, [r7, #152]	@ 0x98
 8001ae4:	33a8      	adds	r3, #168	@ 0xa8
 8001ae6:	443b      	add	r3, r7
 8001ae8:	227e      	movs	r2, #126	@ 0x7e
 8001aea:	f803 2c68 	strb.w	r2, [r3, #-104]
 8001aee:	e024      	b.n	8001b3a <main+0x26a>
                } else if (received_char == ']') {
 8001af0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001af4:	2b5d      	cmp	r3, #93	@ 0x5d
 8001af6:	d10b      	bne.n	8001b10 <main+0x240>
                    bx[bx_index++] = '}'; // '}' było zakodowane jako '}]'
 8001af8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f887 2098 	strb.w	r2, [r7, #152]	@ 0x98
 8001b04:	33a8      	adds	r3, #168	@ 0xa8
 8001b06:	443b      	add	r3, r7
 8001b08:	227d      	movs	r2, #125	@ 0x7d
 8001b0a:	f803 2c68 	strb.w	r2, [r3, #-104]
 8001b0e:	e014      	b.n	8001b3a <main+0x26a>
                } else if (received_char == '&') {
 8001b10:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001b14:	2b26      	cmp	r3, #38	@ 0x26
 8001b16:	d10b      	bne.n	8001b30 <main+0x260>
                    bx[bx_index++] = '`'; // '`' było zakodowane jako '}&'
 8001b18:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f887 2098 	strb.w	r2, [r7, #152]	@ 0x98
 8001b24:	33a8      	adds	r3, #168	@ 0xa8
 8001b26:	443b      	add	r3, r7
 8001b28:	2260      	movs	r2, #96	@ 0x60
 8001b2a:	f803 2c68 	strb.w	r2, [r3, #-104]
 8001b2e:	e004      	b.n	8001b3a <main+0x26a>
                } else {
                    // Nieprawidłowy znak po '}', resetujemy
                    reset_frame_state();
 8001b30:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001b34:	469c      	mov	ip, r3
 8001b36:	f7ff feb9 	bl	80018ac <reset_frame_state.0>
                }
                escape_detected = false; // Resetujemy flagę escape
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8001b40:	e74c      	b.n	80019dc <main+0x10c>
            } else if (received_char == ESCAPE_CHAR) {
 8001b42:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8001b46:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b48:	d103      	bne.n	8001b52 <main+0x282>
                escape_detected = true; // Wykryto znak escape, czekamy na następny
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8001b50:	e744      	b.n	80019dc <main+0x10c>
            } else {
                bx[bx_index++] = received_char;
 8001b52:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f887 2098 	strb.w	r2, [r7, #152]	@ 0x98
 8001b5e:	33a8      	adds	r3, #168	@ 0xa8
 8001b60:	443b      	add	r3, r7
 8001b62:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8001b66:	f803 2c68 	strb.w	r2, [r3, #-104]
 8001b6a:	e737      	b.n	80019dc <main+0x10c>
                }
            } else {
            	reset_frame_state(); // reset z powodu zbyt duzej ramki
 8001b6c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001b70:	469c      	mov	ip, r3
 8001b72:	f7ff fe9b 	bl	80018ac <reset_frame_state.0>
    if (HAL_GetTick() - last_toggle_time >= led_blink_interval) {
 8001b76:	e731      	b.n	80019dc <main+0x10c>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	20000200 	.word	0x20000200
 8001b84:	20000878 	.word	0x20000878
 8001b88:	20000918 	.word	0x20000918
 8001b8c:	20000ac0 	.word	0x20000ac0
 8001b90:	08004e30 	.word	0x08004e30
 8001b94:	08004e38 	.word	0x08004e38
 8001b98:	40020400 	.word	0x40020400

08001b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b094      	sub	sp, #80	@ 0x50
 8001ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2234      	movs	r2, #52	@ 0x34
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fbde 	bl	800436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd0:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <SystemClock_Config+0xdc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001be8:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <SystemClock_Config+0xdc>)
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <SystemClock_Config+0xdc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c04:	2310      	movs	r3, #16
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c14:	2310      	movs	r3, #16
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 f900 	bl	8002e34 <HAL_RCC_OscConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c3a:	f000 f81f 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	230f      	movs	r3, #15
 8001c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fda0 	bl	80027a0 <HAL_RCC_ClockConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001c66:	f000 f809 	bl	8001c7c <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3750      	adds	r7, #80	@ 0x50
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <Error_Handler+0x8>

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cc6:	2007      	movs	r0, #7
 8001cc8:	f000 face 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <NMI_Handler+0x4>

08001ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <MemManage_Handler+0x4>

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <UsageFault_Handler+0x4>

08001d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */
    systick_counter++;
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d38:	6013      	str	r3, [r2, #0]

    // Odświeżanie WWDG
    if (wwdg_initialized && systick_counter >= wwdg_refresh_interval) {
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <SysTick_Handler+0x8c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01a      	beq.n	8001d7a <SysTick_Handler+0x4e>
 8001d44:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <SysTick_Handler+0x90>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d812      	bhi.n	8001d7a <SysTick_Handler+0x4e>
            // Odświeżenie licznika WWDG
            WWDG->CR = (WWDG->CR & WWDG_CR_WDGA) | reload_wwdg;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <SysTick_Handler+0x94>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5c:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <SysTick_Handler+0x98>)
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	4611      	mov	r1, r2
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <SysTick_Handler+0x94>)
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6013      	str	r3, [r2, #0]
            systick_counter = 0; // Zerowanie licznika dla WWDG
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
            wwdg_refresh_cntr++; // Licznik odświeżeń WWDG
 8001d70:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <SysTick_Handler+0x9c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <SysTick_Handler+0x9c>)
 8001d78:	6013      	str	r3, [r2, #0]
    }

    // Odświeżanie IWDG
    if (iwdg_initialized && systick_counter >= iwdg_refresh_interval) {
 8001d7a:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <SysTick_Handler+0xa0>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <SysTick_Handler+0x80>
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <SysTick_Handler+0xa4>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d80b      	bhi.n	8001dac <SysTick_Handler+0x80>
        IWDG->KR = 0xAAAA; // Odświeżenie Independent Watchdog
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <SysTick_Handler+0xa8>)
 8001d96:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001d9a:	601a      	str	r2, [r3, #0]
        systick_counter = 0; // Zerowanie licznika dla IWDG
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <SysTick_Handler+0x88>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
        iwdg_refresh_cntr++;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <SysTick_Handler+0xac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <SysTick_Handler+0xac>)
 8001daa:	6013      	str	r3, [r2, #0]
    }

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8001dac:	f000 f96c 	bl	8002088 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000910 	.word	0x20000910
 8001db8:	2000028b 	.word	0x2000028b
 8001dbc:	2000027e 	.word	0x2000027e
 8001dc0:	40002c00 	.word	0x40002c00
 8001dc4:	20000281 	.word	0x20000281
 8001dc8:	2000090c 	.word	0x2000090c
 8001dcc:	20000286 	.word	0x20000286
 8001dd0:	2000027c 	.word	0x2000027c
 8001dd4:	40003000 	.word	0x40003000
 8001dd8:	20000908 	.word	0x20000908

08001ddc <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */
  /* USER CODE END WWDG_IRQn 0 */
	ewi_flag = 1;
 8001de0:	4b03      	ldr	r3, [pc, #12]	@ (8001df0 <WWDG_IRQHandler+0x14>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
  HAL_WWDG_IRQHandler(&hwwdg);
 8001de6:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <WWDG_IRQHandler+0x18>)
 8001de8:	f002 fa62 	bl	80042b0 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000ac0 	.word	0x20000ac0
 8001df4:	20000960 	.word	0x20000960

08001df8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <USART2_IRQHandler+0x10>)
 8001dfe:	f001 fb63 	bl	80034c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000918 	.word	0x20000918

08001e0c <_sbrk>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
 8001e3c:	f002 fab0 	bl	80043a0 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20020000 	.word	0x20020000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	20000914 	.word	0x20000914
 8001e74:	20000ac8 	.word	0x20000ac8

08001e78 <SystemInit>:
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <MX_USART2_UART_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_USART2_UART_Init+0x4c>)
 8001ed4:	f001 fa4c 	bl	8003370 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ede:	f7ff fecd 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000918 	.word	0x20000918
 8001eec:	40004400 	.word	0x40004400

08001ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_UART_MspInit+0x94>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d133      	bne.n	8001f7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_UART_MspInit+0x98>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f66:	f000 fa53 	bl	8002410 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2026      	movs	r0, #38	@ 0x26
 8001f70:	f000 f985 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f74:	2026      	movs	r0, #38	@ 0x26
 8001f76:	f000 f99e 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	@ 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f94:	f7ff ff70 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	@ (8001fcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	@ (8001fd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f002 f9f5 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff fc85 	bl	80018d0 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8001fd4:	08004f30 	.word	0x08004f30
  ldr r2, =_sbss
 8001fd8:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8001fdc:	20000ac0 	.word	0x20000ac0

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f92b 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>
 8002018:	f7ff fe36 	bl	8001c88 <HAL_MspInit>
 800201c:	2300      	movs	r3, #0
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f943 	bl	80022d2 <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 f90b 	bl	800227e <HAL_NVIC_SetPriority>
 8002068:	4a06      	ldr	r2, [pc, #24]	@ (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
 8002072:	2301      	movs	r3, #1
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000204 	.word	0x20000204
 8002080:	2000020c 	.word	0x2000020c
 8002084:	20000208 	.word	0x20000208

08002088 <HAL_IncTick>:
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	2000020c 	.word	0x2000020c
 80020ac:	20000974 	.word	0x20000974

080020b0 <HAL_GetTick>:
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4b03      	ldr	r3, [pc, #12]	@ (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000974 	.word	0x20000974

080020c8 <__NVIC_SetPriorityGrouping>:
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4a04      	ldr	r2, [pc, #16]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	@ (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_SetPriority>:
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	db0a      	blt.n	8002192 <__NVIC_SetPriority+0x2a>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	b2da      	uxtb	r2, r3
 8002180:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <__NVIC_SetPriority+0x4c>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	440b      	add	r3, r1
 800218c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002190:	e00a      	b.n	80021a8 <__NVIC_SetPriority+0x40>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <__NVIC_SetPriority+0x50>)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	3b04      	subs	r3, #4
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	440b      	add	r3, r1
 80021a6:	761a      	strb	r2, [r3, #24]
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <NVIC_EncodePriority>:
 80021bc:	b480      	push	{r7}
 80021be:	b089      	sub	sp, #36	@ 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f1c3 0307 	rsb	r3, r3, #7
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	bf28      	it	cs
 80021da:	2304      	movcs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d902      	bls.n	80021ec <NVIC_EncodePriority+0x30>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3b03      	subs	r3, #3
 80021ea:	e000      	b.n	80021ee <NVIC_EncodePriority+0x32>
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	f04f 32ff 	mov.w	r2, #4294967295
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	401a      	ands	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	409a      	lsls	r2, r3
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	43d9      	mvns	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	400b      	ands	r3, r1
 8002214:	4313      	orrs	r3, r2
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	@ 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <SysTick_Config>:
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
 800223a:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	f7ff ff8e 	bl	8002168 <__NVIC_SetPriority>
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff29 	bl	80020c8 <__NVIC_SetPriorityGrouping>
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	f7ff ff3e 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff8e 	bl	80021bc <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5d 	bl	8002168 <__NVIC_SetPriority>
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff31 	bl	800212c <__NVIC_EnableIRQ>
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DMA_Abort>:
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	f7ff feda 	bl	80020b0 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d008      	beq.n	800231c <HAL_DMA_Abort+0x32>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002318:	2301      	movs	r3, #1
 800231a:	e052      	b.n	80023c2 <HAL_DMA_Abort+0xd8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0216 	bic.w	r2, r2, #22
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <HAL_DMA_Abort+0x62>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_DMA_Abort+0x72>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e013      	b.n	8002396 <HAL_DMA_Abort+0xac>
 800236e:	f7ff fe9f 	bl	80020b0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d90c      	bls.n	8002396 <HAL_DMA_Abort+0xac>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002392:	2303      	movs	r3, #3
 8002394:	e015      	b.n	80023c2 <HAL_DMA_Abort+0xd8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e4      	bne.n	800236e <HAL_DMA_Abort+0x84>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80023c0:	2300      	movs	r3, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_DMA_Abort_IT>:
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_Abort_IT+0x1e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023e4:	2301      	movs	r3, #1
 80023e6:	e00c      	b.n	8002402 <HAL_DMA_Abort_IT+0x38>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2205      	movs	r2, #5
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_GPIO_Init>:
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e165      	b.n	80026f8 <HAL_GPIO_Init+0x2e8>
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8154 	bne.w	80026f2 <HAL_GPIO_Init+0x2e2>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80ae 	beq.w	80026f2 <HAL_GPIO_Init+0x2e2>
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_GPIO_Init+0x300>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a5c      	ldr	r2, [pc, #368]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <HAL_GPIO_Init+0x308>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x21a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	@ (800271c <HAL_GPIO_Init+0x30c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x216>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002720 <HAL_GPIO_Init+0x310>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x212>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002724 <HAL_GPIO_Init+0x314>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002728 <HAL_GPIO_Init+0x318>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x20a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_GPIO_Init+0x31c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x206>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a49      	ldr	r2, [pc, #292]	@ (8002730 <HAL_GPIO_Init+0x320>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x202>
 800260e:	2306      	movs	r3, #6
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002612:	2307      	movs	r3, #7
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	4935      	ldr	r1, [pc, #212]	@ (8002714 <HAL_GPIO_Init+0x304>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800264a:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <HAL_GPIO_Init+0x324>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x25e>
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	4a31      	ldr	r2, [pc, #196]	@ (8002734 <HAL_GPIO_Init+0x324>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]
 8002674:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <HAL_GPIO_Init+0x324>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x288>
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <HAL_GPIO_Init+0x324>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2b2>
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2dc>
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae96 	bls.w	800242c <HAL_GPIO_Init+0x1c>
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40013c00 	.word	0x40013c00

08002738 <HAL_GPIO_WritePin>:
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
 8002754:	e003      	b.n	800275e <HAL_GPIO_WritePin+0x26>
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	041a      	lsls	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_GPIO_TogglePin>:
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	807b      	strh	r3, [r7, #2]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	887a      	ldrh	r2, [r7, #2]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	041a      	lsls	r2, r3, #16
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43d9      	mvns	r1, r3
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	400b      	ands	r3, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_RCC_ClockConfig>:
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0cc      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 80027b4:	4b68      	ldr	r3, [pc, #416]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d90c      	bls.n	80027dc <HAL_RCC_ClockConfig+0x3c>
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
 80027ca:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x3c>
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_ClockConfig+0x8a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x60>
 80027f4:	4b59      	ldr	r3, [pc, #356]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a58      	ldr	r2, [pc, #352]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x78>
 800280c:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a52      	ldr	r2, [pc, #328]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002816:	6093      	str	r3, [r2, #8]
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	494d      	ldr	r1, [pc, #308]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d044      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xae>
 800283e:	4b47      	ldr	r3, [pc, #284]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d119      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
 800284a:	2301      	movs	r3, #1
 800284c:	e07f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d003      	beq.n	800285e <HAL_RCC_ClockConfig+0xbe>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
 800285e:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
 800286a:	2301      	movs	r3, #1
 800286c:	e06f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 800286e:	4b3b      	ldr	r3, [pc, #236]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
 800287a:	2301      	movs	r3, #1
 800287c:	e067      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 800287e:	4b37      	ldr	r3, [pc, #220]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4934      	ldr	r1, [pc, #208]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
 8002890:	f7ff fc0e 	bl	80020b0 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
 8002898:	f7ff fc0a 	bl	80020b0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e04f      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 80028ae:	4b2b      	ldr	r3, [pc, #172]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d20c      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x148>
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x148>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e032      	b.n	800294e <HAL_RCC_ClockConfig+0x1ae>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4916      	ldr	r1, [pc, #88]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x186>
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490e      	ldr	r1, [pc, #56]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
 8002926:	f000 f855 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490a      	ldr	r1, [pc, #40]	@ (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb6e 	bl	8002028 <HAL_InitTick>
 800294c:	2300      	movs	r3, #0
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023c00 	.word	0x40023c00
 800295c:	40023800 	.word	0x40023800
 8002960:	08004ed4 	.word	0x08004ed4
 8002964:	20000204 	.word	0x20000204
 8002968:	20000208 	.word	0x20000208

0800296c <HAL_RCC_GetHCLKFreq>:
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000204 	.word	0x20000204

08002984 <HAL_RCC_GetPCLK1Freq>:
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08004ee4 	.word	0x08004ee4

080029ac <HAL_RCC_GetPCLK2Freq>:
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	f7ff ffdc 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0b5b      	lsrs	r3, r3, #13
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08004ee4 	.word	0x08004ee4

080029d4 <HAL_RCC_GetSysClockFreq>:
 80029d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d8:	b0ae      	sub	sp, #184	@ 0xb8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	f200 8206 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x440>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a45 	.word	0x08002a45
 8002a14:	08002e15 	.word	0x08002e15
 8002a18:	08002e15 	.word	0x08002e15
 8002a1c:	08002e15 	.word	0x08002e15
 8002a20:	08002a4d 	.word	0x08002a4d
 8002a24:	08002e15 	.word	0x08002e15
 8002a28:	08002e15 	.word	0x08002e15
 8002a2c:	08002e15 	.word	0x08002e15
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002e15 	.word	0x08002e15
 8002a38:	08002e15 	.word	0x08002e15
 8002a3c:	08002e15 	.word	0x08002e15
 8002a40:	08002c45 	.word	0x08002c45
 8002a44:	4bb9      	ldr	r3, [pc, #740]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x358>)
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a4a:	e1e7      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
 8002a4c:	4bb8      	ldr	r3, [pc, #736]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a52:	e1e3      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
 8002a54:	4bb4      	ldr	r3, [pc, #720]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a60:	4bb1      	ldr	r3, [pc, #708]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d071      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x17c>
 8002a6c:	4bae      	ldr	r3, [pc, #696]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	f04f 0000 	mov.w	r0, #0
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	0159      	lsls	r1, r3, #5
 8002aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa4:	0150      	lsls	r0, r2, #5
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4621      	mov	r1, r4
 8002aac:	1a51      	subs	r1, r2, r1
 8002aae:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	018b      	lsls	r3, r1, #6
 8002ac8:	4641      	mov	r1, r8
 8002aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ace:	4641      	mov	r1, r8
 8002ad0:	018a      	lsls	r2, r1, #6
 8002ad2:	4641      	mov	r1, r8
 8002ad4:	1a51      	subs	r1, r2, r1
 8002ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ad8:	4649      	mov	r1, r9
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002aec:	4649      	mov	r1, r9
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4641      	mov	r1, r8
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4641      	mov	r1, r8
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4622      	mov	r2, r4
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b06:	462b      	mov	r3, r5
 8002b08:	460a      	mov	r2, r1
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	024b      	lsls	r3, r1, #9
 8002b20:	4621      	mov	r1, r4
 8002b22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b26:	4621      	mov	r1, r4
 8002b28:	024a      	lsls	r2, r1, #9
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b40:	f7fd fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b4e:	e067      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x24c>
 8002b50:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	f04f 0000 	mov.w	r0, #0
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	0159      	lsls	r1, r3, #5
 8002b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b84:	0150      	lsls	r0, r2, #5
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	1a51      	subs	r1, r2, r1
 8002b8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b90:	4629      	mov	r1, r5
 8002b92:	eb63 0301 	sbc.w	r3, r3, r1
 8002b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	018b      	lsls	r3, r1, #6
 8002ba8:	4641      	mov	r1, r8
 8002baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bae:	4641      	mov	r1, r8
 8002bb0:	018a      	lsls	r2, r1, #6
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb8:	4649      	mov	r1, r9
 8002bba:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd2:	4692      	mov	sl, r2
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb1a 0303 	adds.w	r3, sl, r3
 8002bdc:	623b      	str	r3, [r7, #32]
 8002bde:	462b      	mov	r3, r5
 8002be0:	eb4b 0303 	adc.w	r3, fp, r3
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	028b      	lsls	r3, r1, #10
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	028a      	lsls	r2, r1, #10
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c08:	2200      	movs	r2, #0
 8002c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c12:	f7fd fb4d 	bl	80002b0 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c20:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c42:	e0eb      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
 8002c44:	4b38      	ldr	r3, [pc, #224]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c50:	4b35      	ldr	r3, [pc, #212]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d06b      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x360>
 8002c5c:	4b32      	ldr	r3, [pc, #200]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	2200      	movs	r2, #0
 8002c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c70:	2300      	movs	r3, #0
 8002c72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c78:	4622      	mov	r2, r4
 8002c7a:	462b      	mov	r3, r5
 8002c7c:	f04f 0000 	mov.w	r0, #0
 8002c80:	f04f 0100 	mov.w	r1, #0
 8002c84:	0159      	lsls	r1, r3, #5
 8002c86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8a:	0150      	lsls	r0, r2, #5
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4621      	mov	r1, r4
 8002c92:	1a51      	subs	r1, r2, r1
 8002c94:	61b9      	str	r1, [r7, #24]
 8002c96:	4629      	mov	r1, r5
 8002c98:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002caa:	4659      	mov	r1, fp
 8002cac:	018b      	lsls	r3, r1, #6
 8002cae:	4651      	mov	r1, sl
 8002cb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	018a      	lsls	r2, r1, #6
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ebb2 0801 	subs.w	r8, r2, r1
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cd8:	4690      	mov	r8, r2
 8002cda:	4699      	mov	r9, r3
 8002cdc:	4623      	mov	r3, r4
 8002cde:	eb18 0303 	adds.w	r3, r8, r3
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	462b      	mov	r3, r5
 8002ce6:	eb49 0303 	adc.w	r3, r9, r3
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	024b      	lsls	r3, r1, #9
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d02:	4621      	mov	r1, r4
 8002d04:	024a      	lsls	r2, r1, #9
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d0e:	2200      	movs	r2, #0
 8002d10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d18:	f7fd faca 	bl	80002b0 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d26:	e065      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x420>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	4b3d      	ldr	r3, [pc, #244]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4611      	mov	r1, r2
 8002d40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d46:	2300      	movs	r3, #0
 8002d48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d4e:	4642      	mov	r2, r8
 8002d50:	464b      	mov	r3, r9
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4641      	mov	r1, r8
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d80:	4659      	mov	r1, fp
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	1a54      	subs	r4, r2, r1
 8002d92:	4659      	mov	r1, fp
 8002d94:	eb63 0501 	sbc.w	r5, r3, r1
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	00eb      	lsls	r3, r5, #3
 8002da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002da6:	00e2      	lsls	r2, r4, #3
 8002da8:	4614      	mov	r4, r2
 8002daa:	461d      	mov	r5, r3
 8002dac:	4643      	mov	r3, r8
 8002dae:	18e3      	adds	r3, r4, r3
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	464b      	mov	r3, r9
 8002db4:	eb45 0303 	adc.w	r3, r5, r3
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	028b      	lsls	r3, r1, #10
 8002dca:	4621      	mov	r1, r4
 8002dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	028a      	lsls	r2, r1, #10
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ddc:	2200      	movs	r2, #0
 8002dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002de0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002de2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002de6:	f7fd fa63 	bl	80002b0 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4613      	mov	r3, r2
 8002df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002df4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0f1b      	lsrs	r3, r3, #28
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e12:	e003      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x448>
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e1a:	bf00      	nop
 8002e1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e20:	4618      	mov	r0, r3
 8002e22:	37b8      	adds	r7, #184	@ 0xb8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400

08002e34 <HAL_RCC_OscConfig>:
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e28d      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8083 	beq.w	8002f5a <HAL_RCC_OscConfig+0x126>
 8002e54:	4b94      	ldr	r3, [pc, #592]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCC_OscConfig+0x60>
 8002e60:	4b91      	ldr	r3, [pc, #580]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x46>
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x60>
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x78>
 8002e86:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x78>
 8002e94:	4b84      	ldr	r3, [pc, #528]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x124>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x124>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e25a      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x90>
 8002eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7b      	ldr	r2, [pc, #492]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xcc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xb4>
 8002ece:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b73      	ldr	r3, [pc, #460]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a72      	ldr	r2, [pc, #456]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xcc>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xfc>
 8002f08:	f7ff f8d2 	bl	80020b0 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xee>
 8002f10:	f7ff f8ce 	bl	80020b0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xee>
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e21f      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002f22:	4b61      	ldr	r3, [pc, #388]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xdc>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x126>
 8002f30:	f7ff f8be 	bl	80020b0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x116>
 8002f38:	f7ff f8ba 	bl	80020b0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x116>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e20b      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002f4a:	4b57      	ldr	r3, [pc, #348]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x104>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x126>
 8002f58:	bf00      	nop
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06f      	beq.n	8003046 <HAL_RCC_OscConfig+0x212>
 8002f66:	4b50      	ldr	r3, [pc, #320]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d017      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x16e>
 8002f72:	4b4d      	ldr	r3, [pc, #308]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x156>
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x16e>
 8002f8a:	4b47      	ldr	r3, [pc, #284]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d11c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x19c>
 8002f96:	4b44      	ldr	r3, [pc, #272]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x19c>
 8002fa2:	4b41      	ldr	r3, [pc, #260]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x186>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x186>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e1d3      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002fba:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4937      	ldr	r1, [pc, #220]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e03a      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_OscConfig+0x1e6>
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_RCC_OscConfig+0x278>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f7ff f867 	bl	80020b0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1c4>
 8002fe6:	f7ff f863 	bl	80020b0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1c4>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e1b4      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8002ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
 8003004:	4b28      	ldr	r3, [pc, #160]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4925      	ldr	r1, [pc, #148]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_OscConfig+0x278>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f7ff f846 	bl	80020b0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x206>
 8003028:	f7ff f842 	bl	80020b0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x206>
 8003036:	2303      	movs	r3, #3
 8003038:	e193      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1f4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d036      	beq.n	80030c0 <HAL_RCC_OscConfig+0x28c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <HAL_RCC_OscConfig+0x254>
 800305a:	4b15      	ldr	r3, [pc, #84]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f7ff f826 	bl	80020b0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x246>
 8003068:	f7ff f822 	bl	80020b0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x246>
 8003076:	2303      	movs	r3, #3
 8003078:	e173      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_OscConfig+0x274>)
 800307c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x234>
 8003086:	e01b      	b.n	80030c0 <HAL_RCC_OscConfig+0x28c>
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x27c>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f7ff f80f 	bl	80020b0 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]
 8003094:	e00e      	b.n	80030b4 <HAL_RCC_OscConfig+0x280>
 8003096:	f7ff f80b 	bl	80020b0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d907      	bls.n	80030b4 <HAL_RCC_OscConfig+0x280>
 80030a4:	2303      	movs	r3, #3
 80030a6:	e15c      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	42470000 	.word	0x42470000
 80030b0:	42470e80 	.word	0x42470e80
 80030b4:	4b8a      	ldr	r3, [pc, #552]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ea      	bne.n	8003096 <HAL_RCC_OscConfig+0x262>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8097 	beq.w	80031fc <HAL_RCC_OscConfig+0x3c8>
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]
 80030d2:	4b83      	ldr	r3, [pc, #524]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10f      	bne.n	80030fe <HAL_RCC_OscConfig+0x2ca>
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	4b7f      	ldr	r3, [pc, #508]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a7e      	ldr	r2, [pc, #504]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b7c      	ldr	r3, [pc, #496]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2301      	movs	r3, #1
 80030fc:	75fb      	strb	r3, [r7, #23]
 80030fe:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d118      	bne.n	800313c <HAL_RCC_OscConfig+0x308>
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	f7fe ffcb 	bl	80020b0 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x2fc>
 800311e:	f7fe ffc7 	bl	80020b0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x2fc>
 800312c:	2303      	movs	r3, #3
 800312e:	e118      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8003130:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <HAL_RCC_OscConfig+0x4b0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x2ea>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x31e>
 8003144:	4b66      	ldr	r3, [pc, #408]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4a65      	ldr	r2, [pc, #404]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003150:	e01c      	b.n	800318c <HAL_RCC_OscConfig+0x358>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b05      	cmp	r3, #5
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x340>
 800315a:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a60      	ldr	r2, [pc, #384]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0x358>
 8003174:	4b5a      	ldr	r3, [pc, #360]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a59      	ldr	r2, [pc, #356]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003180:	4b57      	ldr	r3, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	4a56      	ldr	r2, [pc, #344]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003186:	f023 0304 	bic.w	r3, r3, #4
 800318a:	6713      	str	r3, [r2, #112]	@ 0x70
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCC_OscConfig+0x38c>
 8003194:	f7fe ff8c 	bl	80020b0 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x37e>
 800319c:	f7fe ff88 	bl	80020b0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x37e>
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0d7      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80031b2:	4b4b      	ldr	r3, [pc, #300]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ee      	beq.n	800319c <HAL_RCC_OscConfig+0x368>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x3b6>
 80031c0:	f7fe ff76 	bl	80020b0 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x3aa>
 80031c8:	f7fe ff72 	bl	80020b0 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3aa>
 80031da:	2303      	movs	r3, #3
 80031dc:	e0c1      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80031de:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ee      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x3c8>
 80031f0:	4b3b      	ldr	r3, [pc, #236]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	4a3a      	ldr	r2, [pc, #232]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80ad 	beq.w	8003360 <HAL_RCC_OscConfig+0x52c>
 8003206:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d060      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4a0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d145      	bne.n	80032a6 <HAL_RCC_OscConfig+0x472>
 800321a:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f7fe ff46 	bl	80020b0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x406>
 8003228:	f7fe ff42 	bl	80020b0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x406>
 8003236:	2303      	movs	r3, #3
 8003238:	e093      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 800323a:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x3f4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	019b      	lsls	r3, r3, #6
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325c:	085b      	lsrs	r3, r3, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f7fe ff17 	bl	80020b0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x464>
 8003286:	f7fe ff13 	bl	80020b0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x464>
 8003294:	2303      	movs	r3, #3
 8003296:	e064      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x452>
 80032a4:	e05c      	b.n	8003360 <HAL_RCC_OscConfig+0x52c>
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x4b4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f7fe ff00 	bl	80020b0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x492>
 80032b4:	f7fe fefc 	bl	80020b0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x492>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e04d      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x480>
 80032d2:	e045      	b.n	8003360 <HAL_RCC_OscConfig+0x52c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4b8>
 80032dc:	2301      	movs	r3, #1
 80032de:	e040      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42470060 	.word	0x42470060
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_RCC_OscConfig+0x538>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d030      	beq.n	800335c <HAL_RCC_OscConfig+0x528>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	429a      	cmp	r2, r3
 8003306:	d129      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	429a      	cmp	r2, r3
 8003314:	d122      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	0192      	lsls	r2, r2, #6
 8003324:	4293      	cmp	r3, r2
 8003326:	d119      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	429a      	cmp	r2, r3
 800333a:	d10f      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x528>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	071b      	lsls	r3, r3, #28
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x52c>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x52e>
 8003360:	2300      	movs	r3, #0
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_UART_Init>:
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fdaa 	bl	8001ef0 <HAL_UART_MspInit>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd07 	bl	8003dc8 <UART_SetConfig>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34
 8003406:	2300      	movs	r3, #0
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit_IT>:
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	d121      	bne.n	800346e <HAL_UART_Transmit_IT+0x5e>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_UART_Transmit_IT+0x26>
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Transmit_IT+0x2a>
 8003436:	2301      	movs	r3, #1
 8003438:	e01a      	b.n	8003470 <HAL_UART_Transmit_IT+0x60>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	621a      	str	r2, [r3, #32]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	849a      	strh	r2, [r3, #36]	@ 0x24
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	84da      	strh	r2, [r3, #38]	@ 0x26
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	@ 0x44
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2221      	movs	r2, #33	@ 0x21
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_UART_Transmit_IT+0x60>
 800346e:	2302      	movs	r3, #2
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UART_Receive_IT>:
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	d112      	bne.n	80034bc <HAL_UART_Receive_IT+0x40>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_UART_Receive_IT+0x26>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive_IT+0x2a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00b      	b.n	80034be <HAL_UART_Receive_IT+0x42>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fab0 	bl	8003a18 <UART_Start_Receive_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	e000      	b.n	80034be <HAL_UART_Receive_IT+0x42>
 80034bc:	2302      	movs	r3, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_UART_IRQHandler>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b0ba      	sub	sp, #232	@ 0xe8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <HAL_UART_IRQHandler+0x66>
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_UART_IRQHandler+0x66>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_UART_IRQHandler+0x66>
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fb8f 	bl	8003c4a <UART_Receive_IT>
 800352c:	e25b      	b.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 800352e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80de 	beq.w	80036f4 <HAL_UART_IRQHandler+0x22c>
 8003538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_UART_IRQHandler+0x8a>
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003548:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80d1 	beq.w	80036f4 <HAL_UART_IRQHandler+0x22c>
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_UART_IRQHandler+0xae>
 800355e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_UART_IRQHandler+0xae>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	645a      	str	r2, [r3, #68]	@ 0x44
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0xd2>
 8003582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_UART_IRQHandler+0xd2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_UART_IRQHandler+0xf6>
 80035a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_UART_IRQHandler+0xf6>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_UART_IRQHandler+0x126>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_UART_IRQHandler+0x11a>
 80035d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0x126>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f043 0208 	orr.w	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 81f2 	beq.w	80039dc <HAL_UART_IRQHandler+0x514>
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_UART_IRQHandler+0x14e>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_UART_IRQHandler+0x14e>
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fb1a 	bl	8003c4a <UART_Receive_IT>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_UART_IRQHandler+0x17a>
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04f      	beq.n	80036e2 <HAL_UART_IRQHandler+0x21a>
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa22 	bl	8003a8c <UART_EndRxTransfer>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	d141      	bne.n	80036da <HAL_UART_IRQHandler+0x212>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3314      	adds	r3, #20
 800365c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800366c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3314      	adds	r3, #20
 800367e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800368a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800368e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800369a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1d9      	bne.n	8003656 <HAL_UART_IRQHandler+0x18e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d013      	beq.n	80036d2 <HAL_UART_IRQHandler+0x20a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	4a7e      	ldr	r2, [pc, #504]	@ (80038a8 <HAL_UART_IRQHandler+0x3e0>)
 80036b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fe87 	bl	80023ca <HAL_DMA_Abort_IT>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_UART_IRQHandler+0x228>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
 80036d0:	e00e      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f98a 	bl	80039ec <HAL_UART_ErrorCallback>
 80036d8:	e00a      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f986 	bl	80039ec <HAL_UART_ErrorCallback>
 80036e0:	e006      	b.n	80036f0 <HAL_UART_IRQHandler+0x228>
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f982 	bl	80039ec <HAL_UART_ErrorCallback>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80036ee:	e175      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
 80036f0:	bf00      	nop
 80036f2:	e173      	b.n	80039dc <HAL_UART_IRQHandler+0x514>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 814f 	bne.w	800399c <HAL_UART_IRQHandler+0x4d4>
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8148 	beq.w	800399c <HAL_UART_IRQHandler+0x4d4>
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8141 	beq.w	800399c <HAL_UART_IRQHandler+0x4d4>
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373a:	2b40      	cmp	r3, #64	@ 0x40
 800373c:	f040 80b6 	bne.w	80038ac <HAL_UART_IRQHandler+0x3e4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800374c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8145 	beq.w	80039e0 <HAL_UART_IRQHandler+0x518>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800375a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800375e:	429a      	cmp	r2, r3
 8003760:	f080 813e 	bcs.w	80039e0 <HAL_UART_IRQHandler+0x518>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800376a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	f000 8088 	beq.w	800388a <HAL_UART_IRQHandler+0x3c2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	330c      	adds	r3, #12
 80037a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1d9      	bne.n	800377a <HAL_UART_IRQHandler+0x2b2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80037ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80037d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3314      	adds	r3, #20
 80037e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80037f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e1      	bne.n	80037c6 <HAL_UART_IRQHandler+0x2fe>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	663b      	str	r3, [r7, #96]	@ 0x60
 800380a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3314      	adds	r3, #20
 8003822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800382a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800382c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800382e:	e841 2300 	strex	r3, r2, [r1]
 8003832:	667b      	str	r3, [r7, #100]	@ 0x64
 8003834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e3      	bne.n	8003802 <HAL_UART_IRQHandler+0x33a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385a:	f023 0310 	bic.w	r3, r3, #16
 800385e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800386c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800386e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003870:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003872:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	653b      	str	r3, [r7, #80]	@ 0x50
 800387a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e3      	bne.n	8003848 <HAL_UART_IRQHandler+0x380>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fd30 	bl	80022ea <HAL_DMA_Abort>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8ad 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
 80038a6:	e09b      	b.n	80039e0 <HAL_UART_IRQHandler+0x518>
 80038a8:	08003b53 	.word	0x08003b53
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 808e 	beq.w	80039e4 <HAL_UART_IRQHandler+0x51c>
 80038c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8089 	beq.w	80039e4 <HAL_UART_IRQHandler+0x51c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e3      	bne.n	80038d2 <HAL_UART_IRQHandler+0x40a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800392e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e3      	bne.n	800390a <HAL_UART_IRQHandler+0x442>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0310 	bic.w	r3, r3, #16
 8003966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003974:	61fa      	str	r2, [r7, #28]
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e3      	bne.n	8003950 <HAL_UART_IRQHandler+0x488>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	635a      	str	r2, [r3, #52]	@ 0x34
 800398e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f833 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
 800399a:	e023      	b.n	80039e4 <HAL_UART_IRQHandler+0x51c>
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_UART_IRQHandler+0x4f4>
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_UART_IRQHandler+0x4f4>
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8e0 	bl	8003b7a <UART_Transmit_IT>
 80039ba:	e014      	b.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f920 	bl	8003c1a <UART_EndTransmit_IT>
 80039da:	e004      	b.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039dc:	bf00      	nop
 80039de:	e002      	b.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_UART_IRQHandler+0x51e>
 80039e4:	bf00      	nop
 80039e6:	37e8      	adds	r7, #232	@ 0xe8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_ErrorCallback>:
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_UARTEx_RxEventCallback>:
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <UART_Start_Receive_IT>:
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2222      	movs	r2, #34	@ 0x22
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <UART_Start_Receive_IT+0x46>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_EndRxTransfer>:
 8003a8c:	b480      	push	{r7}
 8003a8e:	b095      	sub	sp, #84	@ 0x54
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ab4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_EndRxTransfer+0x8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3314      	adds	r3, #20
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e5      	bne.n	8003ac8 <UART_EndRxTransfer+0x3c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d119      	bne.n	8003b38 <UART_EndRxTransfer+0xac>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f023 0310 	bic.w	r3, r3, #16
 8003b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b24:	61ba      	str	r2, [r7, #24]
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	6979      	ldr	r1, [r7, #20]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_EndRxTransfer+0x78>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b46:	bf00      	nop
 8003b48:	3754      	adds	r7, #84	@ 0x54
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <UART_DMAAbortOnError>:
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff ff3d 	bl	80039ec <HAL_UART_ErrorCallback>
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <UART_Transmit_IT>:
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b21      	cmp	r3, #33	@ 0x21
 8003b8c:	d13e      	bne.n	8003c0c <UART_Transmit_IT+0x92>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b96:	d114      	bne.n	8003bc2 <UART_Transmit_IT+0x48>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d110      	bne.n	8003bc2 <UART_Transmit_IT+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]
 8003bc0:	e008      	b.n	8003bd4 <UART_Transmit_IT+0x5a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	1c59      	adds	r1, r3, #1
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6211      	str	r1, [r2, #32]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4619      	mov	r1, r3
 8003be2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10f      	bne.n	8003c08 <UART_Transmit_IT+0x8e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf6:	60da      	str	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <UART_Transmit_IT+0x94>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <UART_EndTransmit_IT>:
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fdda 	bl	80017f4 <HAL_UART_TxCpltCallback>
 8003c40:	2300      	movs	r3, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_Receive_IT>:
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b08c      	sub	sp, #48	@ 0x30
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b22      	cmp	r3, #34	@ 0x22
 8003c5c:	f040 80ae 	bne.w	8003dbc <UART_Receive_IT+0x172>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c68:	d117      	bne.n	8003c9a <UART_Receive_IT+0x50>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d113      	bne.n	8003c9a <UART_Receive_IT+0x50>
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c92:	1c9a      	adds	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c98:	e026      	b.n	8003ce8 <UART_Receive_IT+0x9e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cac:	d007      	beq.n	8003cbe <UART_Receive_IT+0x74>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <UART_Receive_IT+0x82>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <UART_Receive_IT+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e008      	b.n	8003cde <UART_Receive_IT+0x94>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d15d      	bne.n	8003db8 <UART_Receive_IT+0x16e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0220 	bic.w	r2, r2, #32
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	615a      	str	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d135      	bne.n	8003dae <UART_Receive_IT+0x164>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f023 0310 	bic.w	r3, r3, #16
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d68:	623a      	str	r2, [r7, #32]
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_Receive_IT+0xfe>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d10a      	bne.n	8003da0 <UART_Receive_IT+0x156>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe2a 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
 8003dac:	e002      	b.n	8003db4 <UART_Receive_IT+0x16a>
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fd54 	bl	800185c <HAL_UART_RxCpltCallback>
 8003db4:	2300      	movs	r3, #0
 8003db6:	e002      	b.n	8003dbe <UART_Receive_IT+0x174>
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <UART_Receive_IT+0x174>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	@ 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <UART_SetConfig>:
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b0c0      	sub	sp, #256	@ 0x100
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	68d9      	ldr	r1, [r3, #12]
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	ea40 0301 	orr.w	r3, r0, r1
 8003df0:	6113      	str	r3, [r2, #16]
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e20:	f021 010c 	bic.w	r1, r1, #12
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	60d3      	str	r3, [r2, #12]
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	6999      	ldr	r1, [r3, #24]
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	ea40 0301 	orr.w	r3, r0, r1
 8003e4e:	6153      	str	r3, [r2, #20]
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <UART_SetConfig+0x2cc>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d005      	beq.n	8003e68 <UART_SetConfig+0xa0>
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b8d      	ldr	r3, [pc, #564]	@ (8004098 <UART_SetConfig+0x2d0>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d104      	bne.n	8003e72 <UART_SetConfig+0xaa>
 8003e68:	f7fe fda0 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e70:	e003      	b.n	8003e7a <UART_SetConfig+0xb2>
 8003e72:	f7fe fd87 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003e76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e84:	f040 810c 	bne.w	80040a0 <UART_SetConfig+0x2d8>
 8003e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	1891      	adds	r1, r2, r2
 8003ea0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ea2:	415b      	adcs	r3, r3
 8003ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eaa:	4621      	mov	r1, r4
 8003eac:	eb12 0801 	adds.w	r8, r2, r1
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb43 0901 	adc.w	r9, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eca:	4690      	mov	r8, r2
 8003ecc:	4699      	mov	r9, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb18 0303 	adds.w	r3, r8, r3
 8003ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ed8:	462b      	mov	r3, r5
 8003eda:	eb49 0303 	adc.w	r3, r9, r3
 8003ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003eee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	18db      	adds	r3, r3, r3
 8003efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003efc:	4613      	mov	r3, r2
 8003efe:	eb42 0303 	adc.w	r3, r2, r3
 8003f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f0c:	f7fc f9d0 	bl	80002b0 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4b61      	ldr	r3, [pc, #388]	@ (800409c <UART_SetConfig+0x2d4>)
 8003f16:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	011c      	lsls	r4, r3, #4
 8003f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	1891      	adds	r1, r2, r2
 8003f36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f40:	4641      	mov	r1, r8
 8003f42:	eb12 0a01 	adds.w	sl, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb43 0b01 	adc.w	fp, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f60:	4692      	mov	sl, r2
 8003f62:	469b      	mov	fp, r3
 8003f64:	4643      	mov	r3, r8
 8003f66:	eb1a 0303 	adds.w	r3, sl, r3
 8003f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	eb4b 0303 	adc.w	r3, fp, r3
 8003f74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	18db      	adds	r3, r3, r3
 8003f90:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f92:	4613      	mov	r3, r2
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fa2:	f7fc f985 	bl	80002b0 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <UART_SetConfig+0x2d4>)
 8003fae:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2264      	movs	r2, #100	@ 0x64
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	1acb      	subs	r3, r1, r3
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fc2:	4b36      	ldr	r3, [pc, #216]	@ (800409c <UART_SetConfig+0x2d4>)
 8003fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fd0:	441c      	add	r4, r3
 8003fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	1891      	adds	r1, r2, r2
 8003fea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fec:	415b      	adcs	r3, r3
 8003fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	1851      	adds	r1, r2, r1
 8003ff8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	414b      	adcs	r3, r1
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800400c:	4659      	mov	r1, fp
 800400e:	00cb      	lsls	r3, r1, #3
 8004010:	4651      	mov	r1, sl
 8004012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004016:	4651      	mov	r1, sl
 8004018:	00ca      	lsls	r2, r1, #3
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	4603      	mov	r3, r0
 8004020:	4642      	mov	r2, r8
 8004022:	189b      	adds	r3, r3, r2
 8004024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004028:	464b      	mov	r3, r9
 800402a:	460a      	mov	r2, r1
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004040:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004048:	460b      	mov	r3, r1
 800404a:	18db      	adds	r3, r3, r3
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800404e:	4613      	mov	r3, r2
 8004050:	eb42 0303 	adc.w	r3, r2, r3
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800405a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800405e:	f7fc f927 	bl	80002b0 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <UART_SetConfig+0x2d4>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	@ 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	3332      	adds	r3, #50	@ 0x32
 800407a:	4a08      	ldr	r2, [pc, #32]	@ (800409c <UART_SetConfig+0x2d4>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 0207 	and.w	r2, r3, #7
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4422      	add	r2, r4
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	e106      	b.n	80042a0 <UART_SetConfig+0x4d8>
 8004092:	bf00      	nop
 8004094:	40011000 	.word	0x40011000
 8004098:	40011400 	.word	0x40011400
 800409c:	51eb851f 	.word	0x51eb851f
 80040a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040b2:	4642      	mov	r2, r8
 80040b4:	464b      	mov	r3, r9
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	6239      	str	r1, [r7, #32]
 80040ba:	415b      	adcs	r3, r3
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c2:	4641      	mov	r1, r8
 80040c4:	1854      	adds	r4, r2, r1
 80040c6:	4649      	mov	r1, r9
 80040c8:	eb43 0501 	adc.w	r5, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	00eb      	lsls	r3, r5, #3
 80040d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040da:	00e2      	lsls	r2, r4, #3
 80040dc:	4614      	mov	r4, r2
 80040de:	461d      	mov	r5, r3
 80040e0:	4643      	mov	r3, r8
 80040e2:	18e3      	adds	r3, r4, r3
 80040e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040e8:	464b      	mov	r3, r9
 80040ea:	eb45 0303 	adc.w	r3, r5, r3
 80040ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800410e:	4629      	mov	r1, r5
 8004110:	008b      	lsls	r3, r1, #2
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004118:	4621      	mov	r1, r4
 800411a:	008a      	lsls	r2, r1, #2
 800411c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004120:	f7fc f8c6 	bl	80002b0 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4b60      	ldr	r3, [pc, #384]	@ (80042ac <UART_SetConfig+0x4e4>)
 800412a:	fba3 2302 	umull	r2, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	011c      	lsls	r4, r3, #4
 8004132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800413c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	1891      	adds	r1, r2, r2
 800414a:	61b9      	str	r1, [r7, #24]
 800414c:	415b      	adcs	r3, r3
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004154:	4641      	mov	r1, r8
 8004156:	1851      	adds	r1, r2, r1
 8004158:	6139      	str	r1, [r7, #16]
 800415a:	4649      	mov	r1, r9
 800415c:	414b      	adcs	r3, r1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800416c:	4659      	mov	r1, fp
 800416e:	00cb      	lsls	r3, r1, #3
 8004170:	4651      	mov	r1, sl
 8004172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004176:	4651      	mov	r1, sl
 8004178:	00ca      	lsls	r2, r1, #3
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	4603      	mov	r3, r0
 8004180:	4642      	mov	r2, r8
 8004182:	189b      	adds	r3, r3, r2
 8004184:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004188:	464b      	mov	r3, r9
 800418a:	460a      	mov	r2, r1
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800419e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041ac:	4649      	mov	r1, r9
 80041ae:	008b      	lsls	r3, r1, #2
 80041b0:	4641      	mov	r1, r8
 80041b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b6:	4641      	mov	r1, r8
 80041b8:	008a      	lsls	r2, r1, #2
 80041ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041be:	f7fc f877 	bl	80002b0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	4b38      	ldr	r3, [pc, #224]	@ (80042ac <UART_SetConfig+0x4e4>)
 80041ca:	fba3 2301 	umull	r2, r3, r3, r1
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2264      	movs	r2, #100	@ 0x64
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	1acb      	subs	r3, r1, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	@ 0x32
 80041dc:	4a33      	ldr	r2, [pc, #204]	@ (80042ac <UART_SetConfig+0x4e4>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e8:	441c      	add	r4, r3
 80041ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ee:	2200      	movs	r2, #0
 80041f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80041f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041f8:	4642      	mov	r2, r8
 80041fa:	464b      	mov	r3, r9
 80041fc:	1891      	adds	r1, r2, r2
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	415b      	adcs	r3, r3
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004208:	4641      	mov	r1, r8
 800420a:	1851      	adds	r1, r2, r1
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	4649      	mov	r1, r9
 8004210:	414b      	adcs	r3, r1
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004220:	4659      	mov	r1, fp
 8004222:	00cb      	lsls	r3, r1, #3
 8004224:	4651      	mov	r1, sl
 8004226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800422a:	4651      	mov	r1, sl
 800422c:	00ca      	lsls	r2, r1, #3
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	4603      	mov	r3, r0
 8004234:	4642      	mov	r2, r8
 8004236:	189b      	adds	r3, r3, r2
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423a:	464b      	mov	r3, r9
 800423c:	460a      	mov	r2, r1
 800423e:	eb42 0303 	adc.w	r3, r2, r3
 8004242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	663b      	str	r3, [r7, #96]	@ 0x60
 800424e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800425c:	4649      	mov	r1, r9
 800425e:	008b      	lsls	r3, r1, #2
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004266:	4641      	mov	r1, r8
 8004268:	008a      	lsls	r2, r1, #2
 800426a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800426e:	f7fc f81f 	bl	80002b0 <__aeabi_uldivmod>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <UART_SetConfig+0x4e4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	@ 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	@ 0x32
 800428a:	4a08      	ldr	r2, [pc, #32]	@ (80042ac <UART_SetConfig+0x4e4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4422      	add	r2, r4
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	bf00      	nop
 80042a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ac:	51eb851f 	.word	0x51eb851f

080042b0 <HAL_WWDG_IRQHandler>:
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c6:	d10e      	bne.n	80042e6 <HAL_WWDG_IRQHandler+0x36>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_WWDG_IRQHandler+0x36>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f804 	bl	80042ee <HAL_WWDG_EarlyWakeupCallback>
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_WWDG_EarlyWakeupCallback>:
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <sniprintf>:
 8004304:	b40c      	push	{r2, r3}
 8004306:	b530      	push	{r4, r5, lr}
 8004308:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <sniprintf+0x64>)
 800430a:	1e0c      	subs	r4, r1, #0
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	b09d      	sub	sp, #116	@ 0x74
 8004310:	da08      	bge.n	8004324 <sniprintf+0x20>
 8004312:	238b      	movs	r3, #139	@ 0x8b
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	b01d      	add	sp, #116	@ 0x74
 800431c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004320:	b002      	add	sp, #8
 8004322:	4770      	bx	lr
 8004324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800432c:	bf14      	ite	ne
 800432e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004332:	4623      	moveq	r3, r4
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004344:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004346:	ab21      	add	r3, sp, #132	@ 0x84
 8004348:	a902      	add	r1, sp, #8
 800434a:	4628      	mov	r0, r5
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	f000 f9b5 	bl	80046bc <_svfiprintf_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	bfbc      	itt	lt
 8004356:	238b      	movlt	r3, #139	@ 0x8b
 8004358:	602b      	strlt	r3, [r5, #0]
 800435a:	2c00      	cmp	r4, #0
 800435c:	d0dd      	beq.n	800431a <sniprintf+0x16>
 800435e:	9b02      	ldr	r3, [sp, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e7d9      	b.n	800431a <sniprintf+0x16>
 8004366:	bf00      	nop
 8004368:	20000210 	.word	0x20000210

0800436c <memset>:
 800436c:	4402      	add	r2, r0
 800436e:	4603      	mov	r3, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	d100      	bne.n	8004376 <memset+0xa>
 8004374:	4770      	bx	lr
 8004376:	f803 1b01 	strb.w	r1, [r3], #1
 800437a:	e7f9      	b.n	8004370 <memset+0x4>

0800437c <strncmp>:
 800437c:	b510      	push	{r4, lr}
 800437e:	b16a      	cbz	r2, 800439c <strncmp+0x20>
 8004380:	3901      	subs	r1, #1
 8004382:	1884      	adds	r4, r0, r2
 8004384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004388:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800438c:	429a      	cmp	r2, r3
 800438e:	d103      	bne.n	8004398 <strncmp+0x1c>
 8004390:	42a0      	cmp	r0, r4
 8004392:	d001      	beq.n	8004398 <strncmp+0x1c>
 8004394:	2a00      	cmp	r2, #0
 8004396:	d1f5      	bne.n	8004384 <strncmp+0x8>
 8004398:	1ad0      	subs	r0, r2, r3
 800439a:	bd10      	pop	{r4, pc}
 800439c:	4610      	mov	r0, r2
 800439e:	e7fc      	b.n	800439a <strncmp+0x1e>

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	@ (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000210 	.word	0x20000210

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	4d0d      	ldr	r5, [pc, #52]	@ (80043e4 <__libc_init_array+0x38>)
 80043b0:	4c0d      	ldr	r4, [pc, #52]	@ (80043e8 <__libc_init_array+0x3c>)
 80043b2:	1b64      	subs	r4, r4, r5
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	2600      	movs	r6, #0
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	4d0b      	ldr	r5, [pc, #44]	@ (80043ec <__libc_init_array+0x40>)
 80043be:	4c0c      	ldr	r4, [pc, #48]	@ (80043f0 <__libc_init_array+0x44>)
 80043c0:	f000 fc66 	bl	8004c90 <_init>
 80043c4:	1b64      	subs	r4, r4, r5
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	2600      	movs	r6, #0
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f855 3b04 	ldr.w	r3, [r5], #4
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08004f28 	.word	0x08004f28
 80043e8:	08004f28 	.word	0x08004f28
 80043ec:	08004f28 	.word	0x08004f28
 80043f0:	08004f2c 	.word	0x08004f2c

080043f4 <__retarget_lock_acquire_recursive>:
 80043f4:	4770      	bx	lr

080043f6 <__retarget_lock_release_recursive>:
 80043f6:	4770      	bx	lr

080043f8 <memcpy>:
 80043f8:	440a      	add	r2, r1
 80043fa:	4291      	cmp	r1, r2
 80043fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004400:	d100      	bne.n	8004404 <memcpy+0xc>
 8004402:	4770      	bx	lr
 8004404:	b510      	push	{r4, lr}
 8004406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440e:	4291      	cmp	r1, r2
 8004410:	d1f9      	bne.n	8004406 <memcpy+0xe>
 8004412:	bd10      	pop	{r4, pc}

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d041      	beq.n	80044a0 <_free_r+0x8c>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f8e0 	bl	80045ec <__malloc_lock>
 800442c:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <_free_r+0x90>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x2c>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443c:	f000 b8dc 	b.w	80045f8 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x42>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x1e>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x4c>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x42>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1850      	adds	r0, r2, r1
 8004464:	42a0      	cmp	r0, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x6c>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	4401      	add	r1, r0
 800446c:	1850      	adds	r0, r2, r1
 800446e:	4283      	cmp	r3, r0
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x22>
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	6053      	str	r3, [r2, #4]
 800447a:	4408      	add	r0, r1
 800447c:	6010      	str	r0, [r2, #0]
 800447e:	e7da      	b.n	8004436 <_free_r+0x22>
 8004480:	d902      	bls.n	8004488 <_free_r+0x74>
 8004482:	230c      	movs	r3, #12
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x22>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf04      	itt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	bf04      	itt	eq
 8004498:	1809      	addeq	r1, r1, r0
 800449a:	6021      	streq	r1, [r4, #0]
 800449c:	6054      	str	r4, [r2, #4]
 800449e:	e7ca      	b.n	8004436 <_free_r+0x22>
 80044a0:	bd38      	pop	{r3, r4, r5, pc}
 80044a2:	bf00      	nop
 80044a4:	20000abc 	.word	0x20000abc

080044a8 <sbrk_aligned>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4e0f      	ldr	r6, [pc, #60]	@ (80044e8 <sbrk_aligned+0x40>)
 80044ac:	460c      	mov	r4, r1
 80044ae:	6831      	ldr	r1, [r6, #0]
 80044b0:	4605      	mov	r5, r0
 80044b2:	b911      	cbnz	r1, 80044ba <sbrk_aligned+0x12>
 80044b4:	f000 fba6 	bl	8004c04 <_sbrk_r>
 80044b8:	6030      	str	r0, [r6, #0]
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 fba1 	bl	8004c04 <_sbrk_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d103      	bne.n	80044ce <sbrk_aligned+0x26>
 80044c6:	f04f 34ff 	mov.w	r4, #4294967295
 80044ca:	4620      	mov	r0, r4
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d0f8      	beq.n	80044ca <sbrk_aligned+0x22>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb92 	bl	8004c04 <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d1f2      	bne.n	80044ca <sbrk_aligned+0x22>
 80044e4:	e7ef      	b.n	80044c6 <sbrk_aligned+0x1e>
 80044e6:	bf00      	nop
 80044e8:	20000ab8 	.word	0x20000ab8

080044ec <_malloc_r>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	1ccd      	adds	r5, r1, #3
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	2d00      	cmp	r5, #0
 8004500:	4606      	mov	r6, r0
 8004502:	db01      	blt.n	8004508 <_malloc_r+0x1c>
 8004504:	42a9      	cmp	r1, r5
 8004506:	d904      	bls.n	8004512 <_malloc_r+0x26>
 8004508:	230c      	movs	r3, #12
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045e8 <_malloc_r+0xfc>
 8004516:	f000 f869 	bl	80045ec <__malloc_lock>
 800451a:	f8d8 3000 	ldr.w	r3, [r8]
 800451e:	461c      	mov	r4, r3
 8004520:	bb44      	cbnz	r4, 8004574 <_malloc_r+0x88>
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	f7ff ffbf 	bl	80044a8 <sbrk_aligned>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	4604      	mov	r4, r0
 800452e:	d158      	bne.n	80045e2 <_malloc_r+0xf6>
 8004530:	f8d8 4000 	ldr.w	r4, [r8]
 8004534:	4627      	mov	r7, r4
 8004536:	2f00      	cmp	r7, #0
 8004538:	d143      	bne.n	80045c2 <_malloc_r+0xd6>
 800453a:	2c00      	cmp	r4, #0
 800453c:	d04b      	beq.n	80045d6 <_malloc_r+0xea>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	4639      	mov	r1, r7
 8004542:	4630      	mov	r0, r6
 8004544:	eb04 0903 	add.w	r9, r4, r3
 8004548:	f000 fb5c 	bl	8004c04 <_sbrk_r>
 800454c:	4581      	cmp	r9, r0
 800454e:	d142      	bne.n	80045d6 <_malloc_r+0xea>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	1a6d      	subs	r5, r5, r1
 8004554:	4629      	mov	r1, r5
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff ffa6 	bl	80044a8 <sbrk_aligned>
 800455c:	3001      	adds	r0, #1
 800455e:	d03a      	beq.n	80045d6 <_malloc_r+0xea>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	442b      	add	r3, r5
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	f8d8 3000 	ldr.w	r3, [r8]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	bb62      	cbnz	r2, 80045c8 <_malloc_r+0xdc>
 800456e:	f8c8 7000 	str.w	r7, [r8]
 8004572:	e00f      	b.n	8004594 <_malloc_r+0xa8>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	1b52      	subs	r2, r2, r5
 8004578:	d420      	bmi.n	80045bc <_malloc_r+0xd0>
 800457a:	2a0b      	cmp	r2, #11
 800457c:	d917      	bls.n	80045ae <_malloc_r+0xc2>
 800457e:	1961      	adds	r1, r4, r5
 8004580:	42a3      	cmp	r3, r4
 8004582:	6025      	str	r5, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	6059      	strne	r1, [r3, #4]
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	bf08      	it	eq
 800458c:	f8c8 1000 	streq.w	r1, [r8]
 8004590:	5162      	str	r2, [r4, r5]
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f82f 	bl	80045f8 <__malloc_unlock>
 800459a:	f104 000b 	add.w	r0, r4, #11
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	f020 0007 	bic.w	r0, r0, #7
 80045a4:	1ac2      	subs	r2, r0, r3
 80045a6:	bf1c      	itt	ne
 80045a8:	1a1b      	subne	r3, r3, r0
 80045aa:	50a3      	strne	r3, [r4, r2]
 80045ac:	e7af      	b.n	800450e <_malloc_r+0x22>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	bf0c      	ite	eq
 80045b4:	f8c8 2000 	streq.w	r2, [r8]
 80045b8:	605a      	strne	r2, [r3, #4]
 80045ba:	e7eb      	b.n	8004594 <_malloc_r+0xa8>
 80045bc:	4623      	mov	r3, r4
 80045be:	6864      	ldr	r4, [r4, #4]
 80045c0:	e7ae      	b.n	8004520 <_malloc_r+0x34>
 80045c2:	463c      	mov	r4, r7
 80045c4:	687f      	ldr	r7, [r7, #4]
 80045c6:	e7b6      	b.n	8004536 <_malloc_r+0x4a>
 80045c8:	461a      	mov	r2, r3
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d1fb      	bne.n	80045c8 <_malloc_r+0xdc>
 80045d0:	2300      	movs	r3, #0
 80045d2:	6053      	str	r3, [r2, #4]
 80045d4:	e7de      	b.n	8004594 <_malloc_r+0xa8>
 80045d6:	230c      	movs	r3, #12
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f80c 	bl	80045f8 <__malloc_unlock>
 80045e0:	e794      	b.n	800450c <_malloc_r+0x20>
 80045e2:	6005      	str	r5, [r0, #0]
 80045e4:	e7d6      	b.n	8004594 <_malloc_r+0xa8>
 80045e6:	bf00      	nop
 80045e8:	20000abc 	.word	0x20000abc

080045ec <__malloc_lock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <__malloc_lock+0x8>)
 80045ee:	f7ff bf01 	b.w	80043f4 <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	20000ab4 	.word	0x20000ab4

080045f8 <__malloc_unlock>:
 80045f8:	4801      	ldr	r0, [pc, #4]	@ (8004600 <__malloc_unlock+0x8>)
 80045fa:	f7ff befc 	b.w	80043f6 <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	20000ab4 	.word	0x20000ab4

08004604 <__ssputs_r>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	688e      	ldr	r6, [r1, #8]
 800460a:	461f      	mov	r7, r3
 800460c:	42be      	cmp	r6, r7
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	4682      	mov	sl, r0
 8004612:	460c      	mov	r4, r1
 8004614:	4690      	mov	r8, r2
 8004616:	d82d      	bhi.n	8004674 <__ssputs_r+0x70>
 8004618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800461c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004620:	d026      	beq.n	8004670 <__ssputs_r+0x6c>
 8004622:	6965      	ldr	r5, [r4, #20]
 8004624:	6909      	ldr	r1, [r1, #16]
 8004626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800462a:	eba3 0901 	sub.w	r9, r3, r1
 800462e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004632:	1c7b      	adds	r3, r7, #1
 8004634:	444b      	add	r3, r9
 8004636:	106d      	asrs	r5, r5, #1
 8004638:	429d      	cmp	r5, r3
 800463a:	bf38      	it	cc
 800463c:	461d      	movcc	r5, r3
 800463e:	0553      	lsls	r3, r2, #21
 8004640:	d527      	bpl.n	8004692 <__ssputs_r+0x8e>
 8004642:	4629      	mov	r1, r5
 8004644:	f7ff ff52 	bl	80044ec <_malloc_r>
 8004648:	4606      	mov	r6, r0
 800464a:	b360      	cbz	r0, 80046a6 <__ssputs_r+0xa2>
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	464a      	mov	r2, r9
 8004650:	f7ff fed2 	bl	80043f8 <memcpy>
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800465a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	6126      	str	r6, [r4, #16]
 8004662:	6165      	str	r5, [r4, #20]
 8004664:	444e      	add	r6, r9
 8004666:	eba5 0509 	sub.w	r5, r5, r9
 800466a:	6026      	str	r6, [r4, #0]
 800466c:	60a5      	str	r5, [r4, #8]
 800466e:	463e      	mov	r6, r7
 8004670:	42be      	cmp	r6, r7
 8004672:	d900      	bls.n	8004676 <__ssputs_r+0x72>
 8004674:	463e      	mov	r6, r7
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	4632      	mov	r2, r6
 800467a:	4641      	mov	r1, r8
 800467c:	f000 faa8 	bl	8004bd0 <memmove>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	1b9b      	subs	r3, r3, r6
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	4433      	add	r3, r6
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	2000      	movs	r0, #0
 800468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004692:	462a      	mov	r2, r5
 8004694:	f000 fac6 	bl	8004c24 <_realloc_r>
 8004698:	4606      	mov	r6, r0
 800469a:	2800      	cmp	r0, #0
 800469c:	d1e0      	bne.n	8004660 <__ssputs_r+0x5c>
 800469e:	6921      	ldr	r1, [r4, #16]
 80046a0:	4650      	mov	r0, sl
 80046a2:	f7ff feb7 	bl	8004414 <_free_r>
 80046a6:	230c      	movs	r3, #12
 80046a8:	f8ca 3000 	str.w	r3, [sl]
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	e7e9      	b.n	800468e <__ssputs_r+0x8a>
	...

080046bc <_svfiprintf_r>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	4698      	mov	r8, r3
 80046c2:	898b      	ldrh	r3, [r1, #12]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	b09d      	sub	sp, #116	@ 0x74
 80046c8:	4607      	mov	r7, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	4614      	mov	r4, r2
 80046ce:	d510      	bpl.n	80046f2 <_svfiprintf_r+0x36>
 80046d0:	690b      	ldr	r3, [r1, #16]
 80046d2:	b973      	cbnz	r3, 80046f2 <_svfiprintf_r+0x36>
 80046d4:	2140      	movs	r1, #64	@ 0x40
 80046d6:	f7ff ff09 	bl	80044ec <_malloc_r>
 80046da:	6028      	str	r0, [r5, #0]
 80046dc:	6128      	str	r0, [r5, #16]
 80046de:	b930      	cbnz	r0, 80046ee <_svfiprintf_r+0x32>
 80046e0:	230c      	movs	r3, #12
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b01d      	add	sp, #116	@ 0x74
 80046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ee:	2340      	movs	r3, #64	@ 0x40
 80046f0:	616b      	str	r3, [r5, #20]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f6:	2320      	movs	r3, #32
 80046f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004700:	2330      	movs	r3, #48	@ 0x30
 8004702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048a0 <_svfiprintf_r+0x1e4>
 8004706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800470a:	f04f 0901 	mov.w	r9, #1
 800470e:	4623      	mov	r3, r4
 8004710:	469a      	mov	sl, r3
 8004712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004716:	b10a      	cbz	r2, 800471c <_svfiprintf_r+0x60>
 8004718:	2a25      	cmp	r2, #37	@ 0x25
 800471a:	d1f9      	bne.n	8004710 <_svfiprintf_r+0x54>
 800471c:	ebba 0b04 	subs.w	fp, sl, r4
 8004720:	d00b      	beq.n	800473a <_svfiprintf_r+0x7e>
 8004722:	465b      	mov	r3, fp
 8004724:	4622      	mov	r2, r4
 8004726:	4629      	mov	r1, r5
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff ff6b 	bl	8004604 <__ssputs_r>
 800472e:	3001      	adds	r0, #1
 8004730:	f000 80a7 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004736:	445a      	add	r2, fp
 8004738:	9209      	str	r2, [sp, #36]	@ 0x24
 800473a:	f89a 3000 	ldrb.w	r3, [sl]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 809f 	beq.w	8004882 <_svfiprintf_r+0x1c6>
 8004744:	2300      	movs	r3, #0
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474e:	f10a 0a01 	add.w	sl, sl, #1
 8004752:	9304      	str	r3, [sp, #16]
 8004754:	9307      	str	r3, [sp, #28]
 8004756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800475a:	931a      	str	r3, [sp, #104]	@ 0x68
 800475c:	4654      	mov	r4, sl
 800475e:	2205      	movs	r2, #5
 8004760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004764:	484e      	ldr	r0, [pc, #312]	@ (80048a0 <_svfiprintf_r+0x1e4>)
 8004766:	f7fb fd53 	bl	8000210 <memchr>
 800476a:	9a04      	ldr	r2, [sp, #16]
 800476c:	b9d8      	cbnz	r0, 80047a6 <_svfiprintf_r+0xea>
 800476e:	06d0      	lsls	r0, r2, #27
 8004770:	bf44      	itt	mi
 8004772:	2320      	movmi	r3, #32
 8004774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004778:	0711      	lsls	r1, r2, #28
 800477a:	bf44      	itt	mi
 800477c:	232b      	movmi	r3, #43	@ 0x2b
 800477e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004782:	f89a 3000 	ldrb.w	r3, [sl]
 8004786:	2b2a      	cmp	r3, #42	@ 0x2a
 8004788:	d015      	beq.n	80047b6 <_svfiprintf_r+0xfa>
 800478a:	9a07      	ldr	r2, [sp, #28]
 800478c:	4654      	mov	r4, sl
 800478e:	2000      	movs	r0, #0
 8004790:	f04f 0c0a 	mov.w	ip, #10
 8004794:	4621      	mov	r1, r4
 8004796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800479a:	3b30      	subs	r3, #48	@ 0x30
 800479c:	2b09      	cmp	r3, #9
 800479e:	d94b      	bls.n	8004838 <_svfiprintf_r+0x17c>
 80047a0:	b1b0      	cbz	r0, 80047d0 <_svfiprintf_r+0x114>
 80047a2:	9207      	str	r2, [sp, #28]
 80047a4:	e014      	b.n	80047d0 <_svfiprintf_r+0x114>
 80047a6:	eba0 0308 	sub.w	r3, r0, r8
 80047aa:	fa09 f303 	lsl.w	r3, r9, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	9304      	str	r3, [sp, #16]
 80047b2:	46a2      	mov	sl, r4
 80047b4:	e7d2      	b.n	800475c <_svfiprintf_r+0xa0>
 80047b6:	9b03      	ldr	r3, [sp, #12]
 80047b8:	1d19      	adds	r1, r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	9103      	str	r1, [sp, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfbb      	ittet	lt
 80047c2:	425b      	neglt	r3, r3
 80047c4:	f042 0202 	orrlt.w	r2, r2, #2
 80047c8:	9307      	strge	r3, [sp, #28]
 80047ca:	9307      	strlt	r3, [sp, #28]
 80047cc:	bfb8      	it	lt
 80047ce:	9204      	strlt	r2, [sp, #16]
 80047d0:	7823      	ldrb	r3, [r4, #0]
 80047d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d4:	d10a      	bne.n	80047ec <_svfiprintf_r+0x130>
 80047d6:	7863      	ldrb	r3, [r4, #1]
 80047d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047da:	d132      	bne.n	8004842 <_svfiprintf_r+0x186>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	1d1a      	adds	r2, r3, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	9203      	str	r2, [sp, #12]
 80047e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047e8:	3402      	adds	r4, #2
 80047ea:	9305      	str	r3, [sp, #20]
 80047ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048b0 <_svfiprintf_r+0x1f4>
 80047f0:	7821      	ldrb	r1, [r4, #0]
 80047f2:	2203      	movs	r2, #3
 80047f4:	4650      	mov	r0, sl
 80047f6:	f7fb fd0b 	bl	8000210 <memchr>
 80047fa:	b138      	cbz	r0, 800480c <_svfiprintf_r+0x150>
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	eba0 000a 	sub.w	r0, r0, sl
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	4082      	lsls	r2, r0
 8004806:	4313      	orrs	r3, r2
 8004808:	3401      	adds	r4, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	4824      	ldr	r0, [pc, #144]	@ (80048a4 <_svfiprintf_r+0x1e8>)
 8004812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004816:	2206      	movs	r2, #6
 8004818:	f7fb fcfa 	bl	8000210 <memchr>
 800481c:	2800      	cmp	r0, #0
 800481e:	d036      	beq.n	800488e <_svfiprintf_r+0x1d2>
 8004820:	4b21      	ldr	r3, [pc, #132]	@ (80048a8 <_svfiprintf_r+0x1ec>)
 8004822:	bb1b      	cbnz	r3, 800486c <_svfiprintf_r+0x1b0>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	3307      	adds	r3, #7
 8004828:	f023 0307 	bic.w	r3, r3, #7
 800482c:	3308      	adds	r3, #8
 800482e:	9303      	str	r3, [sp, #12]
 8004830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004832:	4433      	add	r3, r6
 8004834:	9309      	str	r3, [sp, #36]	@ 0x24
 8004836:	e76a      	b.n	800470e <_svfiprintf_r+0x52>
 8004838:	fb0c 3202 	mla	r2, ip, r2, r3
 800483c:	460c      	mov	r4, r1
 800483e:	2001      	movs	r0, #1
 8004840:	e7a8      	b.n	8004794 <_svfiprintf_r+0xd8>
 8004842:	2300      	movs	r3, #0
 8004844:	3401      	adds	r4, #1
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0c0a 	mov.w	ip, #10
 800484e:	4620      	mov	r0, r4
 8004850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004854:	3a30      	subs	r2, #48	@ 0x30
 8004856:	2a09      	cmp	r2, #9
 8004858:	d903      	bls.n	8004862 <_svfiprintf_r+0x1a6>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0c6      	beq.n	80047ec <_svfiprintf_r+0x130>
 800485e:	9105      	str	r1, [sp, #20]
 8004860:	e7c4      	b.n	80047ec <_svfiprintf_r+0x130>
 8004862:	fb0c 2101 	mla	r1, ip, r1, r2
 8004866:	4604      	mov	r4, r0
 8004868:	2301      	movs	r3, #1
 800486a:	e7f0      	b.n	800484e <_svfiprintf_r+0x192>
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	462a      	mov	r2, r5
 8004872:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <_svfiprintf_r+0x1f0>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	4638      	mov	r0, r7
 8004878:	f3af 8000 	nop.w
 800487c:	1c42      	adds	r2, r0, #1
 800487e:	4606      	mov	r6, r0
 8004880:	d1d6      	bne.n	8004830 <_svfiprintf_r+0x174>
 8004882:	89ab      	ldrh	r3, [r5, #12]
 8004884:	065b      	lsls	r3, r3, #25
 8004886:	f53f af2d 	bmi.w	80046e4 <_svfiprintf_r+0x28>
 800488a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800488c:	e72c      	b.n	80046e8 <_svfiprintf_r+0x2c>
 800488e:	ab03      	add	r3, sp, #12
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	462a      	mov	r2, r5
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <_svfiprintf_r+0x1f0>)
 8004896:	a904      	add	r1, sp, #16
 8004898:	4638      	mov	r0, r7
 800489a:	f000 f879 	bl	8004990 <_printf_i>
 800489e:	e7ed      	b.n	800487c <_svfiprintf_r+0x1c0>
 80048a0:	08004eec 	.word	0x08004eec
 80048a4:	08004ef6 	.word	0x08004ef6
 80048a8:	00000000 	.word	0x00000000
 80048ac:	08004605 	.word	0x08004605
 80048b0:	08004ef2 	.word	0x08004ef2

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4616      	mov	r6, r2
 80048ba:	4698      	mov	r8, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048c4:	4293      	cmp	r3, r2
 80048c6:	bfb8      	it	lt
 80048c8:	4613      	movlt	r3, r2
 80048ca:	6033      	str	r3, [r6, #0]
 80048cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048d0:	4607      	mov	r7, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	b10a      	cbz	r2, 80048da <_printf_common+0x26>
 80048d6:	3301      	adds	r3, #1
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	0699      	lsls	r1, r3, #26
 80048de:	bf42      	ittt	mi
 80048e0:	6833      	ldrmi	r3, [r6, #0]
 80048e2:	3302      	addmi	r3, #2
 80048e4:	6033      	strmi	r3, [r6, #0]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d106      	bne.n	80048fc <_printf_common+0x48>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	dc26      	bgt.n	800494a <_printf_common+0x96>
 80048fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	3b00      	subs	r3, #0
 8004904:	bf18      	it	ne
 8004906:	2301      	movne	r3, #1
 8004908:	0692      	lsls	r2, r2, #26
 800490a:	d42b      	bmi.n	8004964 <_printf_common+0xb0>
 800490c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004910:	4641      	mov	r1, r8
 8004912:	4638      	mov	r0, r7
 8004914:	47c8      	blx	r9
 8004916:	3001      	adds	r0, #1
 8004918:	d01e      	beq.n	8004958 <_printf_common+0xa4>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	2b04      	cmp	r3, #4
 8004924:	bf02      	ittt	eq
 8004926:	68e5      	ldreq	r5, [r4, #12]
 8004928:	6833      	ldreq	r3, [r6, #0]
 800492a:	1aed      	subeq	r5, r5, r3
 800492c:	68a3      	ldr	r3, [r4, #8]
 800492e:	bf0c      	ite	eq
 8004930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004934:	2500      	movne	r5, #0
 8004936:	4293      	cmp	r3, r2
 8004938:	bfc4      	itt	gt
 800493a:	1a9b      	subgt	r3, r3, r2
 800493c:	18ed      	addgt	r5, r5, r3
 800493e:	2600      	movs	r6, #0
 8004940:	341a      	adds	r4, #26
 8004942:	42b5      	cmp	r5, r6
 8004944:	d11a      	bne.n	800497c <_printf_common+0xc8>
 8004946:	2000      	movs	r0, #0
 8004948:	e008      	b.n	800495c <_printf_common+0xa8>
 800494a:	2301      	movs	r3, #1
 800494c:	4652      	mov	r2, sl
 800494e:	4641      	mov	r1, r8
 8004950:	4638      	mov	r0, r7
 8004952:	47c8      	blx	r9
 8004954:	3001      	adds	r0, #1
 8004956:	d103      	bne.n	8004960 <_printf_common+0xac>
 8004958:	f04f 30ff 	mov.w	r0, #4294967295
 800495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004960:	3501      	adds	r5, #1
 8004962:	e7c6      	b.n	80048f2 <_printf_common+0x3e>
 8004964:	18e1      	adds	r1, r4, r3
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	2030      	movs	r0, #48	@ 0x30
 800496a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800496e:	4422      	add	r2, r4
 8004970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004978:	3302      	adds	r3, #2
 800497a:	e7c7      	b.n	800490c <_printf_common+0x58>
 800497c:	2301      	movs	r3, #1
 800497e:	4622      	mov	r2, r4
 8004980:	4641      	mov	r1, r8
 8004982:	4638      	mov	r0, r7
 8004984:	47c8      	blx	r9
 8004986:	3001      	adds	r0, #1
 8004988:	d0e6      	beq.n	8004958 <_printf_common+0xa4>
 800498a:	3601      	adds	r6, #1
 800498c:	e7d9      	b.n	8004942 <_printf_common+0x8e>
	...

08004990 <_printf_i>:
 8004990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	7e0f      	ldrb	r7, [r1, #24]
 8004996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004998:	2f78      	cmp	r7, #120	@ 0x78
 800499a:	4691      	mov	r9, r2
 800499c:	4680      	mov	r8, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	469a      	mov	sl, r3
 80049a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049a6:	d807      	bhi.n	80049b8 <_printf_i+0x28>
 80049a8:	2f62      	cmp	r7, #98	@ 0x62
 80049aa:	d80a      	bhi.n	80049c2 <_printf_i+0x32>
 80049ac:	2f00      	cmp	r7, #0
 80049ae:	f000 80d2 	beq.w	8004b56 <_printf_i+0x1c6>
 80049b2:	2f58      	cmp	r7, #88	@ 0x58
 80049b4:	f000 80b9 	beq.w	8004b2a <_printf_i+0x19a>
 80049b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c0:	e03a      	b.n	8004a38 <_printf_i+0xa8>
 80049c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049c6:	2b15      	cmp	r3, #21
 80049c8:	d8f6      	bhi.n	80049b8 <_printf_i+0x28>
 80049ca:	a101      	add	r1, pc, #4	@ (adr r1, 80049d0 <_printf_i+0x40>)
 80049cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d0:	08004a29 	.word	0x08004a29
 80049d4:	08004a3d 	.word	0x08004a3d
 80049d8:	080049b9 	.word	0x080049b9
 80049dc:	080049b9 	.word	0x080049b9
 80049e0:	080049b9 	.word	0x080049b9
 80049e4:	080049b9 	.word	0x080049b9
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	080049b9 	.word	0x080049b9
 80049f0:	080049b9 	.word	0x080049b9
 80049f4:	080049b9 	.word	0x080049b9
 80049f8:	080049b9 	.word	0x080049b9
 80049fc:	08004b3d 	.word	0x08004b3d
 8004a00:	08004a67 	.word	0x08004a67
 8004a04:	08004af7 	.word	0x08004af7
 8004a08:	080049b9 	.word	0x080049b9
 8004a0c:	080049b9 	.word	0x080049b9
 8004a10:	08004b5f 	.word	0x08004b5f
 8004a14:	080049b9 	.word	0x080049b9
 8004a18:	08004a67 	.word	0x08004a67
 8004a1c:	080049b9 	.word	0x080049b9
 8004a20:	080049b9 	.word	0x080049b9
 8004a24:	08004aff 	.word	0x08004aff
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6032      	str	r2, [r6, #0]
 8004a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e09d      	b.n	8004b78 <_printf_i+0x1e8>
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6031      	str	r1, [r6, #0]
 8004a44:	0606      	lsls	r6, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xbc>
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <_printf_i+0xc4>
 8004a4c:	0645      	lsls	r5, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xb8>
 8004a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	da03      	bge.n	8004a60 <_printf_i+0xd0>
 8004a58:	232d      	movs	r3, #45	@ 0x2d
 8004a5a:	426d      	negs	r5, r5
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a60:	4859      	ldr	r0, [pc, #356]	@ (8004bc8 <_printf_i+0x238>)
 8004a62:	230a      	movs	r3, #10
 8004a64:	e011      	b.n	8004a8a <_printf_i+0xfa>
 8004a66:	6821      	ldr	r1, [r4, #0]
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	0608      	lsls	r0, r1, #24
 8004a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a70:	d402      	bmi.n	8004a78 <_printf_i+0xe8>
 8004a72:	0649      	lsls	r1, r1, #25
 8004a74:	bf48      	it	mi
 8004a76:	b2ad      	uxthmi	r5, r5
 8004a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7a:	4853      	ldr	r0, [pc, #332]	@ (8004bc8 <_printf_i+0x238>)
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	bf14      	ite	ne
 8004a80:	230a      	movne	r3, #10
 8004a82:	2308      	moveq	r3, #8
 8004a84:	2100      	movs	r1, #0
 8004a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8a:	6866      	ldr	r6, [r4, #4]
 8004a8c:	60a6      	str	r6, [r4, #8]
 8004a8e:	2e00      	cmp	r6, #0
 8004a90:	bfa2      	ittt	ge
 8004a92:	6821      	ldrge	r1, [r4, #0]
 8004a94:	f021 0104 	bicge.w	r1, r1, #4
 8004a98:	6021      	strge	r1, [r4, #0]
 8004a9a:	b90d      	cbnz	r5, 8004aa0 <_printf_i+0x110>
 8004a9c:	2e00      	cmp	r6, #0
 8004a9e:	d04b      	beq.n	8004b38 <_printf_i+0x1a8>
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8004aaa:	5dc7      	ldrb	r7, [r0, r7]
 8004aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab0:	462f      	mov	r7, r5
 8004ab2:	42bb      	cmp	r3, r7
 8004ab4:	460d      	mov	r5, r1
 8004ab6:	d9f4      	bls.n	8004aa2 <_printf_i+0x112>
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d10b      	bne.n	8004ad4 <_printf_i+0x144>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	07df      	lsls	r7, r3, #31
 8004ac0:	d508      	bpl.n	8004ad4 <_printf_i+0x144>
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	6861      	ldr	r1, [r4, #4]
 8004ac6:	4299      	cmp	r1, r3
 8004ac8:	bfde      	ittt	le
 8004aca:	2330      	movle	r3, #48	@ 0x30
 8004acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad4:	1b92      	subs	r2, r2, r6
 8004ad6:	6122      	str	r2, [r4, #16]
 8004ad8:	f8cd a000 	str.w	sl, [sp]
 8004adc:	464b      	mov	r3, r9
 8004ade:	aa03      	add	r2, sp, #12
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	f7ff fee6 	bl	80048b4 <_printf_common>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d14a      	bne.n	8004b82 <_printf_i+0x1f2>
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	b004      	add	sp, #16
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f043 0320 	orr.w	r3, r3, #32
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	4833      	ldr	r0, [pc, #204]	@ (8004bcc <_printf_i+0x23c>)
 8004b00:	2778      	movs	r7, #120	@ 0x78
 8004b02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	6831      	ldr	r1, [r6, #0]
 8004b0a:	061f      	lsls	r7, r3, #24
 8004b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b10:	d402      	bmi.n	8004b18 <_printf_i+0x188>
 8004b12:	065f      	lsls	r7, r3, #25
 8004b14:	bf48      	it	mi
 8004b16:	b2ad      	uxthmi	r5, r5
 8004b18:	6031      	str	r1, [r6, #0]
 8004b1a:	07d9      	lsls	r1, r3, #31
 8004b1c:	bf44      	itt	mi
 8004b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b22:	6023      	strmi	r3, [r4, #0]
 8004b24:	b11d      	cbz	r5, 8004b2e <_printf_i+0x19e>
 8004b26:	2310      	movs	r3, #16
 8004b28:	e7ac      	b.n	8004a84 <_printf_i+0xf4>
 8004b2a:	4827      	ldr	r0, [pc, #156]	@ (8004bc8 <_printf_i+0x238>)
 8004b2c:	e7e9      	b.n	8004b02 <_printf_i+0x172>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f023 0320 	bic.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	e7f6      	b.n	8004b26 <_printf_i+0x196>
 8004b38:	4616      	mov	r6, r2
 8004b3a:	e7bd      	b.n	8004ab8 <_printf_i+0x128>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	6961      	ldr	r1, [r4, #20]
 8004b42:	1d18      	adds	r0, r3, #4
 8004b44:	6030      	str	r0, [r6, #0]
 8004b46:	062e      	lsls	r6, r5, #24
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	d501      	bpl.n	8004b50 <_printf_i+0x1c0>
 8004b4c:	6019      	str	r1, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <_printf_i+0x1c6>
 8004b50:	0668      	lsls	r0, r5, #25
 8004b52:	d5fb      	bpl.n	8004b4c <_printf_i+0x1bc>
 8004b54:	8019      	strh	r1, [r3, #0]
 8004b56:	2300      	movs	r3, #0
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	e7bc      	b.n	8004ad8 <_printf_i+0x148>
 8004b5e:	6833      	ldr	r3, [r6, #0]
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	6032      	str	r2, [r6, #0]
 8004b64:	681e      	ldr	r6, [r3, #0]
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7fb fb50 	bl	8000210 <memchr>
 8004b70:	b108      	cbz	r0, 8004b76 <_printf_i+0x1e6>
 8004b72:	1b80      	subs	r0, r0, r6
 8004b74:	6060      	str	r0, [r4, #4]
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b80:	e7aa      	b.n	8004ad8 <_printf_i+0x148>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	4632      	mov	r2, r6
 8004b86:	4649      	mov	r1, r9
 8004b88:	4640      	mov	r0, r8
 8004b8a:	47d0      	blx	sl
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d0ad      	beq.n	8004aec <_printf_i+0x15c>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	079b      	lsls	r3, r3, #30
 8004b94:	d413      	bmi.n	8004bbe <_printf_i+0x22e>
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	bfb8      	it	lt
 8004b9e:	4618      	movlt	r0, r3
 8004ba0:	e7a6      	b.n	8004af0 <_printf_i+0x160>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	47d0      	blx	sl
 8004bac:	3001      	adds	r0, #1
 8004bae:	d09d      	beq.n	8004aec <_printf_i+0x15c>
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	9903      	ldr	r1, [sp, #12]
 8004bb6:	1a5b      	subs	r3, r3, r1
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dcf2      	bgt.n	8004ba2 <_printf_i+0x212>
 8004bbc:	e7eb      	b.n	8004b96 <_printf_i+0x206>
 8004bbe:	2500      	movs	r5, #0
 8004bc0:	f104 0619 	add.w	r6, r4, #25
 8004bc4:	e7f5      	b.n	8004bb2 <_printf_i+0x222>
 8004bc6:	bf00      	nop
 8004bc8:	08004efd 	.word	0x08004efd
 8004bcc:	08004f0e 	.word	0x08004f0e

08004bd0 <memmove>:
 8004bd0:	4288      	cmp	r0, r1
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	eb01 0402 	add.w	r4, r1, r2
 8004bd8:	d902      	bls.n	8004be0 <memmove+0x10>
 8004bda:	4284      	cmp	r4, r0
 8004bdc:	4623      	mov	r3, r4
 8004bde:	d807      	bhi.n	8004bf0 <memmove+0x20>
 8004be0:	1e43      	subs	r3, r0, #1
 8004be2:	42a1      	cmp	r1, r4
 8004be4:	d008      	beq.n	8004bf8 <memmove+0x28>
 8004be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bee:	e7f8      	b.n	8004be2 <memmove+0x12>
 8004bf0:	4402      	add	r2, r0
 8004bf2:	4601      	mov	r1, r0
 8004bf4:	428a      	cmp	r2, r1
 8004bf6:	d100      	bne.n	8004bfa <memmove+0x2a>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c02:	e7f7      	b.n	8004bf4 <memmove+0x24>

08004c04 <_sbrk_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4d06      	ldr	r5, [pc, #24]	@ (8004c20 <_sbrk_r+0x1c>)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	602b      	str	r3, [r5, #0]
 8004c10:	f7fd f8fc 	bl	8001e0c <_sbrk>
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	d102      	bne.n	8004c1e <_sbrk_r+0x1a>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	b103      	cbz	r3, 8004c1e <_sbrk_r+0x1a>
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	20000ab0 	.word	0x20000ab0

08004c24 <_realloc_r>:
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	4680      	mov	r8, r0
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	b921      	cbnz	r1, 8004c3a <_realloc_r+0x16>
 8004c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c34:	4611      	mov	r1, r2
 8004c36:	f7ff bc59 	b.w	80044ec <_malloc_r>
 8004c3a:	b92a      	cbnz	r2, 8004c48 <_realloc_r+0x24>
 8004c3c:	f7ff fbea 	bl	8004414 <_free_r>
 8004c40:	2400      	movs	r4, #0
 8004c42:	4620      	mov	r0, r4
 8004c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c48:	f000 f81a 	bl	8004c80 <_malloc_usable_size_r>
 8004c4c:	4285      	cmp	r5, r0
 8004c4e:	4606      	mov	r6, r0
 8004c50:	d802      	bhi.n	8004c58 <_realloc_r+0x34>
 8004c52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c56:	d8f4      	bhi.n	8004c42 <_realloc_r+0x1e>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f7ff fc46 	bl	80044ec <_malloc_r>
 8004c60:	4607      	mov	r7, r0
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d0ec      	beq.n	8004c40 <_realloc_r+0x1c>
 8004c66:	42b5      	cmp	r5, r6
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	bf28      	it	cs
 8004c6e:	4632      	movcs	r2, r6
 8004c70:	f7ff fbc2 	bl	80043f8 <memcpy>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7ff fbcc 	bl	8004414 <_free_r>
 8004c7c:	463c      	mov	r4, r7
 8004c7e:	e7e0      	b.n	8004c42 <_realloc_r+0x1e>

08004c80 <_malloc_usable_size_r>:
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f18      	subs	r0, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfbc      	itt	lt
 8004c8a:	580b      	ldrlt	r3, [r1, r0]
 8004c8c:	18c0      	addlt	r0, r0, r3
 8004c8e:	4770      	bx	lr

08004c90 <_init>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr

08004c9c <_fini>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr
